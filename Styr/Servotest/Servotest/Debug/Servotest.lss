
Servotest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d8d  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  00001081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000551  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000433  00000000  00000000  000025f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	49 d0       	rcall	.+146    	; 0x13c <main>
  aa:	67 c0       	rjmp	.+206    	; 0x17a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <USART_Init>:
	
	unsigned char data[] = {header, header, ID, Length, Instruction, Checksum};
	unsigned char data_size = sizeof(data) / sizeof(data[0]);
	USART_Transmit(data, data_size);
	_delay_us(10);
}
  ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c2:	08 95       	ret

000000c4 <init_pwm>:
  c4:	e0 eb       	ldi	r30, 0xB0	; 176
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	83 6a       	ori	r24, 0xA3	; 163
  cc:	80 83       	st	Z, r24
  ce:	e1 eb       	ldi	r30, 0xB1	; 177
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
  de:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  e2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
  e6:	08 95       	ret

000000e8 <SPI_init>:
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	84 b9       	out	0x04, r24	; 4
  ec:	80 ec       	ldi	r24, 0xC0	; 192
  ee:	8c bd       	out	0x2c, r24	; 44
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <drive_fwd>:
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	82 b9       	out	0x02, r24	; 2
  f8:	8e ef       	ldi	r24, 0xFE	; 254
  fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  fe:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 102:	08 95       	ret

00000104 <rotate_left_maybe>:
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	82 b9       	out	0x02, r24	; 2
 108:	8e ef       	ldi	r24, 0xFE	; 254
 10a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 10e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 112:	08 95       	ret

00000114 <stop>:
 114:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 118:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 11c:	08 95       	ret

0000011e <__vector_19>:

volatile uint8_t current_action = 0;

ISR(SPI_STC_vect) {
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
	// SPI interrupt: när data mottas, läs från SDPR (SPI Data Register)
	current_action = SPDR;
 12a:	8e b5       	in	r24, 0x2e	; 46
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	

}
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:

int main(void)
{
	
	DDRA = 0b1010;
	PORTA = 0b0010;
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	81 b9       	out	0x01, r24	; 1
	DDRD = 0b11000110; // Sätt TXD och TX enable till output och RXD till input
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	82 b9       	out	0x02, r24	; 2
	USART_Init(MYUBRR);
 144:	86 ec       	ldi	r24, 0xC6	; 198
 146:	8a b9       	out	0x0a, r24	; 10
	SPI_init();
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	b1 df       	rcall	.-158    	; 0xae <USART_Init>
	init_pwm();
 14c:	cd df       	rcall	.-102    	; 0xe8 <SPI_init>
	_delay_us(30);
 14e:	ba df       	rcall	.-140    	; 0xc4 <init_pwm>
 150:	80 ea       	ldi	r24, 0xA0	; 160
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x16>
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>

	while (1)
	{
		
		if(current_action == 0x1)
		{
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	11 f4       	brne	.+4      	; 0x162 <main+0x26>
			drive_fwd();
		}
 15e:	ca df       	rcall	.-108    	; 0xf4 <drive_fwd>
 160:	fa cf       	rjmp	.-12     	; 0x156 <main+0x1a>
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		else if(current_action == 0x2)
		{
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	11 f4       	brne	.+4      	; 0x16e <main+0x32>
			rotate_left_maybe();
		}
 16a:	cc df       	rcall	.-104    	; 0x104 <rotate_left_maybe>
 16c:	f4 cf       	rjmp	.-24     	; 0x156 <main+0x1a>
		else if(current_action == 0x3)
		{
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	81 f7       	brne	.-32     	; 0x156 <main+0x1a>
			stop();
		}
 176:	ce df       	rcall	.-100    	; 0x114 <stop>
 178:	ee cf       	rjmp	.-36     	; 0x156 <main+0x1a>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
