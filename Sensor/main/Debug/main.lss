
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000d82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001069  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a82  00000000  00000000  00001f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a3  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  0000316c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  0000338c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000479  00000000  00000000  000038fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	94 c0       	rjmp	.+296    	; 0x12e <__bad_interrupt>
   6:	00 00       	nop
   8:	92 c0       	rjmp	.+292    	; 0x12e <__bad_interrupt>
   a:	00 00       	nop
   c:	90 c0       	rjmp	.+288    	; 0x12e <__bad_interrupt>
   e:	00 00       	nop
  10:	8e c0       	rjmp	.+284    	; 0x12e <__bad_interrupt>
  12:	00 00       	nop
  14:	8c c0       	rjmp	.+280    	; 0x12e <__bad_interrupt>
  16:	00 00       	nop
  18:	8a c0       	rjmp	.+276    	; 0x12e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	88 c0       	rjmp	.+272    	; 0x12e <__bad_interrupt>
  1e:	00 00       	nop
  20:	86 c0       	rjmp	.+268    	; 0x12e <__bad_interrupt>
  22:	00 00       	nop
  24:	84 c0       	rjmp	.+264    	; 0x12e <__bad_interrupt>
  26:	00 00       	nop
  28:	82 c0       	rjmp	.+260    	; 0x12e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	80 c0       	rjmp	.+256    	; 0x12e <__bad_interrupt>
  2e:	00 00       	nop
  30:	7e c0       	rjmp	.+252    	; 0x12e <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__bad_interrupt>
  36:	00 00       	nop
  38:	7a c0       	rjmp	.+244    	; 0x12e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	78 c0       	rjmp	.+240    	; 0x12e <__bad_interrupt>
  3e:	00 00       	nop
  40:	76 c0       	rjmp	.+236    	; 0x12e <__bad_interrupt>
  42:	00 00       	nop
  44:	74 c0       	rjmp	.+232    	; 0x12e <__bad_interrupt>
  46:	00 00       	nop
  48:	72 c0       	rjmp	.+228    	; 0x12e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e5 c1       	rjmp	.+970    	; 0x418 <__vector_19>
  4e:	00 00       	nop
  50:	6e c0       	rjmp	.+220    	; 0x12e <__bad_interrupt>
  52:	00 00       	nop
  54:	6c c0       	rjmp	.+216    	; 0x12e <__bad_interrupt>
  56:	00 00       	nop
  58:	6a c0       	rjmp	.+212    	; 0x12e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	68 c0       	rjmp	.+208    	; 0x12e <__bad_interrupt>
  5e:	00 00       	nop
  60:	66 c0       	rjmp	.+204    	; 0x12e <__bad_interrupt>
  62:	00 00       	nop
  64:	64 c0       	rjmp	.+200    	; 0x12e <__bad_interrupt>
  66:	00 00       	nop
  68:	62 c0       	rjmp	.+196    	; 0x12e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	60 c0       	rjmp	.+192    	; 0x12e <__bad_interrupt>
  6e:	00 00       	nop
  70:	5e c0       	rjmp	.+188    	; 0x12e <__bad_interrupt>
  72:	00 00       	nop
  74:	5c c0       	rjmp	.+184    	; 0x12e <__bad_interrupt>
  76:	00 00       	nop
  78:	5a c0       	rjmp	.+180    	; 0x12e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	58 c0       	rjmp	.+176    	; 0x12e <__bad_interrupt>
  7e:	00 00       	nop
  80:	56 c0       	rjmp	.+172    	; 0x12e <__bad_interrupt>
  82:	00 00       	nop
  84:	54 c0       	rjmp	.+168    	; 0x12e <__bad_interrupt>
  86:	00 00       	nop
  88:	52 c0       	rjmp	.+164    	; 0x12e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	07 63       	ori	r16, 0x37	; 55
  8e:	42 36       	cpi	r20, 0x62	; 98
  90:	b7 9b       	sbis	0x16, 7	; 22
  92:	d8 a7       	std	Y+40, r29	; 0x28
  94:	1a 39       	cpi	r17, 0x9A	; 154
  96:	68 56       	subi	r22, 0x68	; 104
  98:	18 ae       	std	Y+56, r1	; 0x38
  9a:	ba ab       	std	Y+50, r27	; 0x32
  9c:	55 8c       	ldd	r5, Z+29	; 0x1d
  9e:	1d 3c       	cpi	r17, 0xCD	; 205
  a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
  a2:	57 63       	ori	r21, 0x37	; 55
  a4:	bd 6d       	ori	r27, 0xDD	; 221
  a6:	ed fd       	.word	0xfded	; ????
  a8:	75 3e       	cpi	r23, 0xE5	; 229
  aa:	f6 17       	cp	r31, r22
  ac:	72 31       	cpi	r23, 0x12	; 18
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__fp_splitA+0x1e>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d0 e4       	ldi	r29, 0x40	; 64
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_clear_bss>:
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a3 30       	cpi	r26, 0x03	; 3
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	66 d1       	rcall	.+716    	; 0x3f8 <main>
 12c:	ee c5       	rjmp	.+3036   	; 0xd0a <_exit>

0000012e <__bad_interrupt>:
 12e:	68 cf       	rjmp	.-304    	; 0x0 <__vectors>

00000130 <AD_convert>:
#include <avr/interrupt.h>
#include <math.h>
#include "convert.h"

uint8_t AD_convert(int is_MSB)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	1f 92       	push	r1
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	9c 01       	movw	r18, r24
	ADCSRA |= (1 << ADSC);
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	90 81       	ld	r25, Z
 142:	90 64       	ori	r25, 0x40	; 64
 144:	90 83       	st	Z, r25
	volatile uint8_t indata_t;
	
	while(ADCSRA & (1<<ADSC))
 146:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 14a:	96 fd       	sbrc	r25, 6
 14c:	fc cf       	rjmp	.-8      	; 0x146 <AD_convert+0x16>
	{
	}
	
	if (is_MSB){
 14e:	23 2b       	or	r18, r19
 150:	21 f0       	breq	.+8      	; 0x15a <AD_convert+0x2a>
		return indata_t = ADCH;
 152:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 156:	89 83       	std	Y+1, r24	; 0x01
 158:	03 c0       	rjmp	.+6      	; 0x160 <AD_convert+0x30>
	} else {
		return indata_t = ADCL;
 15a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 15e:	89 83       	std	Y+1, r24	; 0x01
	}
}
 160:	0f 90       	pop	r0
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <digital_to_volt>:


float digital_to_volt(int digital_out)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	00 d0       	rcall	.+0      	; 0x16e <digital_to_volt+0x6>
 16e:	00 d0       	rcall	.+0      	; 0x170 <digital_to_volt+0x8>
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	volatile float volt_convert = digital_out*4.94/1023;				// Kalibrera intern spänning
 174:	bc 01       	movw	r22, r24
 176:	99 0f       	add	r25, r25
 178:	88 0b       	sbc	r24, r24
 17a:	99 0b       	sbc	r25, r25
 17c:	4b d3       	rcall	.+1686   	; 0x814 <__floatsisf>
 17e:	2b e7       	ldi	r18, 0x7B	; 123
 180:	34 e1       	ldi	r19, 0x14	; 20
 182:	4e e9       	ldi	r20, 0x9E	; 158
 184:	50 e4       	ldi	r21, 0x40	; 64
 186:	d2 d3       	rcall	.+1956   	; 0x92c <__mulsf3>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 ec       	ldi	r19, 0xC0	; 192
 18c:	4f e7       	ldi	r20, 0x7F	; 127
 18e:	54 e4       	ldi	r21, 0x44	; 68
 190:	a6 d2       	rcall	.+1356   	; 0x6de <__divsf3>
 192:	69 83       	std	Y+1, r22	; 0x01
 194:	7a 83       	std	Y+2, r23	; 0x02
 196:	8b 83       	std	Y+3, r24	; 0x03
 198:	9c 83       	std	Y+4, r25	; 0x04
	return volt_convert;
 19a:	69 81       	ldd	r22, Y+1	; 0x01
 19c:	7a 81       	ldd	r23, Y+2	; 0x02
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	9c 81       	ldd	r25, Y+4	; 0x04
}
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <convert_uint8_t>:


int convert_uint8_t(uint8_t num)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	60 97       	sbiw	r28, 0x10	; 16
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
	// Konverterar en uint8_t variabel till int
	
	int array[8];
	for (int i = 0; i <8; i++ )
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	1a c0       	rjmp	.+52     	; 0x1fe <convert_uint8_t+0x4e>
	{
		array[i] = (num >>(7-i)) & 1;	
 1ca:	67 e0       	ldi	r22, 0x07	; 7
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	64 1b       	sub	r22, r20
 1d0:	75 0b       	sbc	r23, r21
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <convert_uint8_t+0x2c>
 1d8:	35 95       	asr	r19
 1da:	27 95       	ror	r18
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <convert_uint8_t+0x28>
 1e0:	21 70       	andi	r18, 0x01	; 1
 1e2:	33 27       	eor	r19, r19
 1e4:	fa 01       	movw	r30, r20
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	6c 0f       	add	r22, r28
 1f0:	7d 1f       	adc	r23, r29
 1f2:	e6 0f       	add	r30, r22
 1f4:	f7 1f       	adc	r31, r23
 1f6:	31 83       	std	Z+1, r19	; 0x01
 1f8:	20 83       	st	Z, r18
int convert_uint8_t(uint8_t num)
{
	// Konverterar en uint8_t variabel till int
	
	int array[8];
	for (int i = 0; i <8; i++ )
 1fa:	4f 5f       	subi	r20, 0xFF	; 255
 1fc:	5f 4f       	sbci	r21, 0xFF	; 255
 1fe:	48 30       	cpi	r20, 0x08	; 8
 200:	51 05       	cpc	r21, r1
 202:	1c f3       	brlt	.-58     	; 0x1ca <convert_uint8_t+0x1a>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	18 c0       	rjmp	.+48     	; 0x23e <convert_uint8_t+0x8e>
	
	int conversion = 0;
	
	for (int index = 0; index < 8; index++)
	{	
		conversion += array[index]*(1 << (7-index+2));
 20e:	f9 01       	movw	r30, r18
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	4c 0f       	add	r20, r28
 21a:	5d 1f       	adc	r21, r29
 21c:	e4 0f       	add	r30, r20
 21e:	f5 1f       	adc	r31, r21
 220:	40 81       	ld	r20, Z
 222:	51 81       	ldd	r21, Z+1	; 0x01
 224:	69 e0       	ldi	r22, 0x09	; 9
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	62 1b       	sub	r22, r18
 22a:	73 0b       	sbc	r23, r19
 22c:	02 c0       	rjmp	.+4      	; 0x232 <convert_uint8_t+0x82>
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <convert_uint8_t+0x7e>
 236:	84 0f       	add	r24, r20
 238:	95 1f       	adc	r25, r21
		array[i] = (num >>(7-i)) & 1;	
	}
	
	int conversion = 0;
	
	for (int index = 0; index < 8; index++)
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	28 30       	cpi	r18, 0x08	; 8
 240:	31 05       	cpc	r19, r1
 242:	2c f3       	brlt	.-54     	; 0x20e <convert_uint8_t+0x5e>
	{	
		conversion += array[index]*(1 << (7-index+2));
	}
	
	return conversion;
}
 244:	60 96       	adiw	r28, 0x10	; 16
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <convert_uint16_t>:


int convert_uint16_t(uint16_t num)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	a0 97       	sbiw	r28, 0x20	; 32
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	int array[16];
	for (int i = 0; i < 16; i++ )
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	1a c0       	rjmp	.+52     	; 0x2a4 <convert_uint16_t+0x4e>
	{
		array[i] = (num >>(15-i)) & 1;
 270:	4f e0       	ldi	r20, 0x0F	; 15
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	42 1b       	sub	r20, r18
 276:	53 0b       	sbc	r21, r19
 278:	bc 01       	movw	r22, r24
 27a:	02 c0       	rjmp	.+4      	; 0x280 <convert_uint16_t+0x2a>
 27c:	76 95       	lsr	r23
 27e:	67 95       	ror	r22
 280:	4a 95       	dec	r20
 282:	e2 f7       	brpl	.-8      	; 0x27c <convert_uint16_t+0x26>
 284:	ab 01       	movw	r20, r22
 286:	f9 01       	movw	r30, r18
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	6c 0f       	add	r22, r28
 292:	7d 1f       	adc	r23, r29
 294:	e6 0f       	add	r30, r22
 296:	f7 1f       	adc	r31, r23
 298:	41 70       	andi	r20, 0x01	; 1
 29a:	55 27       	eor	r21, r21
 29c:	51 83       	std	Z+1, r21	; 0x01
 29e:	40 83       	st	Z, r20


int convert_uint16_t(uint16_t num)
{
	int array[16];
	for (int i = 0; i < 16; i++ )
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	20 31       	cpi	r18, 0x10	; 16
 2a6:	31 05       	cpc	r19, r1
 2a8:	1c f3       	brlt	.-58     	; 0x270 <convert_uint16_t+0x1a>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	18 c0       	rjmp	.+48     	; 0x2e4 <convert_uint16_t+0x8e>
	
	int conversion = 0;
	
	for (int index = 0; index < 16; index++)
	{
		conversion += array[index]*(1 << (15-index+2));
 2b4:	f9 01       	movw	r30, r18
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	4c 0f       	add	r20, r28
 2c0:	5d 1f       	adc	r21, r29
 2c2:	e4 0f       	add	r30, r20
 2c4:	f5 1f       	adc	r31, r21
 2c6:	40 81       	ld	r20, Z
 2c8:	51 81       	ldd	r21, Z+1	; 0x01
 2ca:	61 e1       	ldi	r22, 0x11	; 17
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	62 1b       	sub	r22, r18
 2d0:	73 0b       	sbc	r23, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <convert_uint16_t+0x82>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <convert_uint16_t+0x7e>
 2dc:	84 0f       	add	r24, r20
 2de:	95 1f       	adc	r25, r21
		array[i] = (num >>(15-i)) & 1;
	}
	
	int conversion = 0;
	
	for (int index = 0; index < 16; index++)
 2e0:	2f 5f       	subi	r18, 0xFF	; 255
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	20 31       	cpi	r18, 0x10	; 16
 2e6:	31 05       	cpc	r19, r1
 2e8:	2c f3       	brlt	.-54     	; 0x2b4 <convert_uint16_t+0x5e>
	{
		conversion += array[index]*(1 << (15-index+2));
	}
	
	return conversion;
}
 2ea:	a0 96       	adiw	r28, 0x20	; 32
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <is_active_reflex>:


int is_active_reflex()
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <is_active_reflex+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <is_active_reflex+0x8>
 304:	1f 92       	push	r1
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t indata_t = AD_convert(1);
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	10 df       	rcall	.-480    	; 0x130 <AD_convert>
 310:	89 83       	std	Y+1, r24	; 0x01
	volatile int indata_int = convert_uint8_t(indata_t);
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	4d df       	rcall	.-358    	; 0x1b0 <convert_uint8_t>
 316:	9b 83       	std	Y+3, r25	; 0x03
 318:	8a 83       	std	Y+2, r24	; 0x02
	volatile int indata_volt = digital_to_volt(indata_int);
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	9b 81       	ldd	r25, Y+3	; 0x03
 31e:	24 df       	rcall	.-440    	; 0x168 <digital_to_volt>
 320:	46 d2       	rcall	.+1164   	; 0x7ae <__fixsfsi>
 322:	7d 83       	std	Y+5, r23	; 0x05
 324:	6c 83       	std	Y+4, r22	; 0x04
	
	if (indata_volt > 2) {								// Ändra 2 till ett värde som kalibreras
 326:	8c 81       	ldd	r24, Y+4	; 0x04
 328:	9d 81       	ldd	r25, Y+5	; 0x05
 32a:	03 97       	sbiw	r24, 0x03	; 3
 32c:	1c f0       	brlt	.+6      	; 0x334 <is_active_reflex+0x38>
		return 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <is_active_reflex+0x3c>
	} else {
		return 0;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <volt_to_dist>:


int volt_to_dist(int indata)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <volt_to_dist+0x6>
 34e:	00 d0       	rcall	.+0      	; 0x350 <volt_to_dist+0x8>
 350:	00 d0       	rcall	.+0      	; 0x352 <volt_to_dist+0xa>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	volatile float volt_convert = digital_to_volt(indata);
 356:	08 df       	rcall	.-496    	; 0x168 <digital_to_volt>
 358:	69 83       	std	Y+1, r22	; 0x01
 35a:	7a 83       	std	Y+2, r23	; 0x02
 35c:	8b 83       	std	Y+3, r24	; 0x03
 35e:	9c 83       	std	Y+4, r25	; 0x04
	volatile int distance = 27/(pow(volt_convert,1.15));
 360:	69 81       	ldd	r22, Y+1	; 0x01
 362:	7a 81       	ldd	r23, Y+2	; 0x02
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	9c 81       	ldd	r25, Y+4	; 0x04
 368:	23 e3       	ldi	r18, 0x33	; 51
 36a:	33 e3       	ldi	r19, 0x33	; 51
 36c:	43 e9       	ldi	r20, 0x93	; 147
 36e:	5f e3       	ldi	r21, 0x3F	; 63
 370:	40 d3       	rcall	.+1664   	; 0x9f2 <pow>
 372:	9b 01       	movw	r18, r22
 374:	ac 01       	movw	r20, r24
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	88 ed       	ldi	r24, 0xD8	; 216
 37c:	91 e4       	ldi	r25, 0x41	; 65
 37e:	af d1       	rcall	.+862    	; 0x6de <__divsf3>
 380:	16 d2       	rcall	.+1068   	; 0x7ae <__fixsfsi>
 382:	7e 83       	std	Y+6, r23	; 0x06
 384:	6d 83       	std	Y+5, r22	; 0x05
	return distance;
 386:	8d 81       	ldd	r24, Y+5	; 0x05
 388:	9e 81       	ldd	r25, Y+6	; 0x06
}
 38a:	26 96       	adiw	r28, 0x06	; 6
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <is_roadmark>:


int is_roadmark(int sum)
{
	if (sum > 4) {									// Placeholder värde
 39c:	05 97       	sbiw	r24, 0x05	; 5
 39e:	1c f0       	brlt	.+6      	; 0x3a6 <is_roadmark+0xa>
		return 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	08 95       	ret
		} else {
		return 0;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 3aa:	08 95       	ret

000003ac <init_IR>:
#include <avr/interrupt.h>
#include "init.h"

void init_IR()
{
	ADMUX = (0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(0<<MUX0);
 3ac:	86 e2       	ldi	r24, 0x26	; 38
 3ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3b2:	87 e8       	ldi	r24, 0x87	; 135
 3b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3b8:	08 95       	ret

000003ba <init_gyro>:
}


void init_gyro()
{
	ADMUX = (0<<REFS0)|(0<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 3ba:	87 e0       	ldi	r24, 0x07	; 7
 3bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3c0:	87 e8       	ldi	r24, 0x87	; 135
 3c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3c6:	08 95       	ret

000003c8 <init_reflex>:
}


void init_reflex()
{
	DDRA |= 0x1F;
 3c8:	81 b1       	in	r24, 0x01	; 1
 3ca:	8f 61       	ori	r24, 0x1F	; 31
 3cc:	81 b9       	out	0x01, r24	; 1
	ADMUX = (0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0); 
 3ce:	85 e2       	ldi	r24, 0x25	; 37
 3d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3d4:	87 e8       	ldi	r24, 0x87	; 135
 3d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3da:	08 95       	ret

000003dc <init_interrupt>:
}


void init_interrupt()
{
	EICRA |=(1<<ISC01)|(1<<ISC00);
 3dc:	e9 e6       	ldi	r30, 0x69	; 105
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	83 60       	ori	r24, 0x03	; 3
 3e4:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 3e6:	8d b3       	in	r24, 0x1d	; 29
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	8d bb       	out	0x1d, r24	; 29
 3ec:	08 95       	ret

000003ee <init_SPI>:
}


void init_SPI()
{
	DDRB = (1 << DDB6);
 3ee:	80 e4       	ldi	r24, 0x40	; 64
 3f0:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE) | (1 << SPIE) | (0 << DORD) | (0 << CPOL) | (0 << CPHA); 
 3f2:	80 ec       	ldi	r24, 0xC0	; 192
 3f4:	8c bd       	out	0x2c, r24	; 44
 3f6:	08 95       	ret

000003f8 <main>:
volatile uint8_t reflex_send = 0;


int main()
{
	init_interrupt();
 3f8:	f1 df       	rcall	.-30     	; 0x3dc <init_interrupt>
	init_SPI();
 3fa:	f9 df       	rcall	.-14     	; 0x3ee <init_SPI>
	sei();
	
	while (1)
	{
		init_IR();
 3fc:	78 94       	sei
 3fe:	d6 df       	rcall	.-84     	; 0x3ac <init_IR>
		IR_send = read_IR();
 400:	88 d0       	rcall	.+272    	; 0x512 <read_IR>
 402:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <IR_send>
		
		init_gyro();
		gyro_send = read_gyro();
 406:	d9 df       	rcall	.-78     	; 0x3ba <init_gyro>
 408:	ad d0       	rcall	.+346    	; 0x564 <read_gyro>
 40a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <gyro_send>
		
		init_reflex();
 40e:	dc df       	rcall	.-72     	; 0x3c8 <init_reflex>
 410:	18 d0       	rcall	.+48     	; 0x442 <read_reflex>
		reflex_send = read_reflex();
 412:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 416:	f3 cf       	rjmp	.-26     	; 0x3fe <main+0x6>

00000418 <__vector_19>:
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
	}
}


ISR(SPI_STC_vect)
{
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	8f 93       	push	r24
	SPDR = IR_send;
 424:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <IR_send>
 428:	8e bd       	out	0x2e, r24	; 46
	SPDR = gyro_send;
 42a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gyro_send>
 42e:	8e bd       	out	0x2e, r24	; 46
	SPDR = reflex_send;
 430:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 434:	8e bd       	out	0x2e, r24	; 46
}
 436:	8f 91       	pop	r24
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <read_reflex>:
#include "convert.h"

int test = 0;

uint8_t read_reflex()
{
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	2c 97       	sbiw	r28, 0x0c	; 12
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
	int i;
	volatile uint8_t data;
	volatile int array[11];
	
	volatile uint8_t indata = 0;
 45a:	1a 82       	std	Y+2, r1	; 0x02
	volatile int sum = 0;
 45c:	1c 82       	std	Y+4, r1	; 0x04
 45e:	1b 82       	std	Y+3, r1	; 0x03
	volatile int sum_index = 0;
 460:	1e 82       	std	Y+6, r1	; 0x06
 462:	1d 82       	std	Y+5, r1	; 0x05
	volatile int roadmark = 0;
 464:	18 86       	std	Y+8, r1	; 0x08
 466:	1f 82       	std	Y+7, r1	; 0x07
	volatile int pivot = 0;
 468:	1a 86       	std	Y+10, r1	; 0x0a
 46a:	19 86       	std	Y+9, r1	; 0x09
	volatile int offset = 0;
 46c:	1c 86       	std	Y+12, r1	; 0x0c
 46e:	1b 86       	std	Y+11, r1	; 0x0b
	
	
	for(i = 0; i < 11; i++)
 470:	00 e0       	ldi	r16, 0x00	; 0
 472:	10 e0       	ldi	r17, 0x00	; 0
 474:	23 c0       	rjmp	.+70     	; 0x4bc <read_reflex+0x7a>
	{
		PORTA &= 0xF0;									// Nollställer de fyra LSB bitarna i PORT A
 476:	82 b1       	in	r24, 0x02	; 2
 478:	80 7f       	andi	r24, 0xF0	; 240
 47a:	82 b9       	out	0x02, r24	; 2
		PORTA |= i;										// Sätter Muxen till index i
 47c:	82 b1       	in	r24, 0x02	; 2
 47e:	80 2b       	or	r24, r16
 480:	82 b9       	out	0x02, r24	; 2
		PORTA |= 0x10;									// Startar sensorn
 482:	82 b1       	in	r24, 0x02	; 2
 484:	80 61       	ori	r24, 0x10	; 16
 486:	82 b9       	out	0x02, r24	; 2
		
		indata = is_active_reflex();
 488:	39 df       	rcall	.-398    	; 0x2fc <is_active_reflex>
 48a:	8a 83       	std	Y+2, r24	; 0x02
		PORTA &= 0xEF;									// Stänger av sensorn
 48c:	82 b1       	in	r24, 0x02	; 2
 48e:	8f 7e       	andi	r24, 0xEF	; 239
 490:	82 b9       	out	0x02, r24	; 2
		
		sum += indata;
 492:	2a 81       	ldd	r18, Y+2	; 0x02
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	9c 81       	ldd	r25, Y+4	; 0x04
 498:	82 0f       	add	r24, r18
 49a:	91 1d       	adc	r25, r1
 49c:	9c 83       	std	Y+4, r25	; 0x04
 49e:	8b 83       	std	Y+3, r24	; 0x03
		sum_index += i*indata;
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	80 9f       	mul	r24, r16
 4a4:	90 01       	movw	r18, r0
 4a6:	81 9f       	mul	r24, r17
 4a8:	30 0d       	add	r19, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	8d 81       	ldd	r24, Y+5	; 0x05
 4ae:	9e 81       	ldd	r25, Y+6	; 0x06
 4b0:	82 0f       	add	r24, r18
 4b2:	93 1f       	adc	r25, r19
 4b4:	9e 83       	std	Y+6, r25	; 0x06
 4b6:	8d 83       	std	Y+5, r24	; 0x05
	volatile int roadmark = 0;
	volatile int pivot = 0;
	volatile int offset = 0;
	
	
	for(i = 0; i < 11; i++)
 4b8:	0f 5f       	subi	r16, 0xFF	; 255
 4ba:	1f 4f       	sbci	r17, 0xFF	; 255
 4bc:	0b 30       	cpi	r16, 0x0B	; 11
 4be:	11 05       	cpc	r17, r1
 4c0:	d4 f2       	brlt	.-76     	; 0x476 <read_reflex+0x34>
		sum += indata;
		sum_index += i*indata;
		
	}
	
	roadmark = is_roadmark(sum);
 4c2:	8b 81       	ldd	r24, Y+3	; 0x03
 4c4:	9c 81       	ldd	r25, Y+4	; 0x04
 4c6:	6a df       	rcall	.-300    	; 0x39c <is_roadmark>
 4c8:	98 87       	std	Y+8, r25	; 0x08
 4ca:	8f 83       	std	Y+7, r24	; 0x07
	
	pivot = sum_index/sum;
 4cc:	8d 81       	ldd	r24, Y+5	; 0x05
 4ce:	9e 81       	ldd	r25, Y+6	; 0x06
 4d0:	6b 81       	ldd	r22, Y+3	; 0x03
 4d2:	7c 81       	ldd	r23, Y+4	; 0x04
 4d4:	f3 d3       	rcall	.+2022   	; 0xcbc <__divmodhi4>
 4d6:	7a 87       	std	Y+10, r23	; 0x0a
 4d8:	69 87       	std	Y+9, r22	; 0x09
	offset = (6 - pivot);
 4da:	29 85       	ldd	r18, Y+9	; 0x09
 4dc:	3a 85       	ldd	r19, Y+10	; 0x0a
 4de:	86 e0       	ldi	r24, 0x06	; 6
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	82 1b       	sub	r24, r18
 4e4:	93 0b       	sbc	r25, r19
 4e6:	9c 87       	std	Y+12, r25	; 0x0c
 4e8:	8b 87       	std	Y+11, r24	; 0x0b
	
	return data = (uint8_t)(roadmark*16 + offset);
 4ea:	2f 81       	ldd	r18, Y+7	; 0x07
 4ec:	38 85       	ldd	r19, Y+8	; 0x08
 4ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 4f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 4f2:	40 e1       	ldi	r20, 0x10	; 16
 4f4:	24 9f       	mul	r18, r20
 4f6:	80 0d       	add	r24, r0
 4f8:	11 24       	eor	r1, r1
 4fa:	89 83       	std	Y+1, r24	; 0x01
}
 4fc:	2c 96       	adiw	r28, 0x0c	; 12
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	de bf       	out	0x3e, r29	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	cd bf       	out	0x3d, r28	; 61
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	08 95       	ret

00000512 <read_IR>:


uint8_t read_IR()
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	00 d0       	rcall	.+0      	; 0x518 <read_IR+0x6>
 518:	00 d0       	rcall	.+0      	; 0x51a <read_IR+0x8>
 51a:	00 d0       	rcall	.+0      	; 0x51c <read_IR+0xa>
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data;
	
	volatile uint8_t indata_t = AD_convert(1);
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	05 de       	rcall	.-1014   	; 0x130 <AD_convert>
 526:	8a 83       	std	Y+2, r24	; 0x02
	volatile int indata = convert_uint8_t(indata_t);
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	42 de       	rcall	.-892    	; 0x1b0 <convert_uint8_t>
 52c:	9c 83       	std	Y+4, r25	; 0x04
 52e:	8b 83       	std	Y+3, r24	; 0x03
	volatile int dist = volt_to_dist(indata);
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	9c 81       	ldd	r25, Y+4	; 0x04
 534:	09 df       	rcall	.-494    	; 0x348 <volt_to_dist>
 536:	9e 83       	std	Y+6, r25	; 0x06
 538:	8d 83       	std	Y+5, r24	; 0x05
	
	if (dist > 250){									// Förhindrar integer overflow
 53a:	8d 81       	ldd	r24, Y+5	; 0x05
 53c:	9e 81       	ldd	r25, Y+6	; 0x06
 53e:	8b 3f       	cpi	r24, 0xFB	; 251
 540:	91 05       	cpc	r25, r1
 542:	1c f0       	brlt	.+6      	; 0x54a <read_IR+0x38>
		return data = 0xFF;
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	04 c0       	rjmp	.+8      	; 0x552 <read_IR+0x40>
		} else {
		return data = (uint8_t)dist;
 54a:	2d 81       	ldd	r18, Y+5	; 0x05
 54c:	3e 81       	ldd	r19, Y+6	; 0x06
 54e:	82 2f       	mov	r24, r18
 550:	29 83       	std	Y+1, r18	; 0x01
	}
}
 552:	26 96       	adiw	r28, 0x06	; 6
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <read_gyro>:


uint8_t read_gyro()
{
 564:	cf 92       	push	r12
 566:	df 92       	push	r13
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	2e 97       	sbiw	r28, 0x0e	; 14
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t indata_MSB = AD_convert(1);
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	d5 dd       	rcall	.-1110   	; 0x130 <AD_convert>
 586:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t indata_LSB = AD_convert(0);
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	d1 dd       	rcall	.-1118   	; 0x130 <AD_convert>
 58e:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint16_t indata16_t = ((uint16_t)indata_MSB << 8) | indata_LSB;
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	98 2f       	mov	r25, r24
 596:	88 27       	eor	r24, r24
 598:	2a 81       	ldd	r18, Y+2	; 0x02
 59a:	82 2b       	or	r24, r18
 59c:	9c 83       	std	Y+4, r25	; 0x04
 59e:	8b 83       	std	Y+3, r24	; 0x03
	
	volatile int indata = convert_uint16_t(indata16_t);
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	9c 81       	ldd	r25, Y+4	; 0x04
 5a4:	58 de       	rcall	.-848    	; 0x256 <convert_uint16_t>
 5a6:	9e 83       	std	Y+6, r25	; 0x06
 5a8:	8d 83       	std	Y+5, r24	; 0x05
	volatile float volt = digital_to_volt(indata);
 5aa:	8d 81       	ldd	r24, Y+5	; 0x05
 5ac:	9e 81       	ldd	r25, Y+6	; 0x06
 5ae:	dc dd       	rcall	.-1096   	; 0x168 <digital_to_volt>
 5b0:	6f 83       	std	Y+7, r22	; 0x07
 5b2:	78 87       	std	Y+8, r23	; 0x08
 5b4:	89 87       	std	Y+9, r24	; 0x09
 5b6:	9a 87       	std	Y+10, r25	; 0x0a
 5b8:	6f 81       	ldd	r22, Y+7	; 0x07
	volatile float w = (volt - 2.5)/(2*volt) * 150;
 5ba:	78 85       	ldd	r23, Y+8	; 0x08
 5bc:	89 85       	ldd	r24, Y+9	; 0x09
 5be:	9a 85       	ldd	r25, Y+10	; 0x0a
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	40 e2       	ldi	r20, 0x20	; 32
 5c6:	50 e4       	ldi	r21, 0x40	; 64
 5c8:	25 d0       	rcall	.+74     	; 0x614 <__subsf3>
 5ca:	6b 01       	movw	r12, r22
 5cc:	7c 01       	movw	r14, r24
 5ce:	6f 81       	ldd	r22, Y+7	; 0x07
 5d0:	78 85       	ldd	r23, Y+8	; 0x08
 5d2:	89 85       	ldd	r24, Y+9	; 0x09
 5d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 5d6:	9b 01       	movw	r18, r22
 5d8:	ac 01       	movw	r20, r24
 5da:	1d d0       	rcall	.+58     	; 0x616 <__addsf3>
 5dc:	9b 01       	movw	r18, r22
 5de:	ac 01       	movw	r20, r24
 5e0:	c7 01       	movw	r24, r14
 5e2:	b6 01       	movw	r22, r12
 5e4:	7c d0       	rcall	.+248    	; 0x6de <__divsf3>
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	46 e1       	ldi	r20, 0x16	; 22
 5ec:	53 e4       	ldi	r21, 0x43	; 67
 5ee:	9e d1       	rcall	.+828    	; 0x92c <__mulsf3>
 5f0:	6b 87       	std	Y+11, r22	; 0x0b
 5f2:	7c 87       	std	Y+12, r23	; 0x0c
 5f4:	8d 87       	std	Y+13, r24	; 0x0d
 5f6:	9e 87       	std	Y+14, r25	; 0x0e
 5f8:	80 e0       	ldi	r24, 0x00	; 0
	
	uint8_t result = 0;
	
	return  result;
	// Skicka dist till bussen
 5fa:	2e 96       	adiw	r28, 0x0e	; 14
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	ff 90       	pop	r15
 60c:	ef 90       	pop	r14
 60e:	df 90       	pop	r13
 610:	cf 90       	pop	r12
 612:	08 95       	ret

00000614 <__subsf3>:
 614:	50 58       	subi	r21, 0x80	; 128

00000616 <__addsf3>:
 616:	bb 27       	eor	r27, r27
 618:	aa 27       	eor	r26, r26
 61a:	0e d0       	rcall	.+28     	; 0x638 <__addsf3x>
 61c:	4d c1       	rjmp	.+666    	; 0x8b8 <__fp_round>
 61e:	3e d1       	rcall	.+636    	; 0x89c <__fp_pscA>
 620:	30 f0       	brcs	.+12     	; 0x62e <__addsf3+0x18>
 622:	43 d1       	rcall	.+646    	; 0x8aa <__fp_pscB>
 624:	20 f0       	brcs	.+8      	; 0x62e <__addsf3+0x18>
 626:	31 f4       	brne	.+12     	; 0x634 <__addsf3+0x1e>
 628:	9f 3f       	cpi	r25, 0xFF	; 255
 62a:	11 f4       	brne	.+4      	; 0x630 <__addsf3+0x1a>
 62c:	1e f4       	brtc	.+6      	; 0x634 <__addsf3+0x1e>
 62e:	33 c1       	rjmp	.+614    	; 0x896 <__fp_nan>
 630:	0e f4       	brtc	.+2      	; 0x634 <__addsf3+0x1e>
 632:	e0 95       	com	r30
 634:	e7 fb       	bst	r30, 7
 636:	29 c1       	rjmp	.+594    	; 0x88a <__fp_inf>

00000638 <__addsf3x>:
 638:	e9 2f       	mov	r30, r25
 63a:	4f d1       	rcall	.+670    	; 0x8da <__fp_split3>
 63c:	80 f3       	brcs	.-32     	; 0x61e <__addsf3+0x8>
 63e:	ba 17       	cp	r27, r26
 640:	62 07       	cpc	r22, r18
 642:	73 07       	cpc	r23, r19
 644:	84 07       	cpc	r24, r20
 646:	95 07       	cpc	r25, r21
 648:	18 f0       	brcs	.+6      	; 0x650 <__addsf3x+0x18>
 64a:	71 f4       	brne	.+28     	; 0x668 <__addsf3x+0x30>
 64c:	9e f5       	brtc	.+102    	; 0x6b4 <__addsf3x+0x7c>
 64e:	67 c1       	rjmp	.+718    	; 0x91e <__fp_zero>
 650:	0e f4       	brtc	.+2      	; 0x654 <__addsf3x+0x1c>
 652:	e0 95       	com	r30
 654:	0b 2e       	mov	r0, r27
 656:	ba 2f       	mov	r27, r26
 658:	a0 2d       	mov	r26, r0
 65a:	0b 01       	movw	r0, r22
 65c:	b9 01       	movw	r22, r18
 65e:	90 01       	movw	r18, r0
 660:	0c 01       	movw	r0, r24
 662:	ca 01       	movw	r24, r20
 664:	a0 01       	movw	r20, r0
 666:	11 24       	eor	r1, r1
 668:	ff 27       	eor	r31, r31
 66a:	59 1b       	sub	r21, r25
 66c:	99 f0       	breq	.+38     	; 0x694 <__addsf3x+0x5c>
 66e:	59 3f       	cpi	r21, 0xF9	; 249
 670:	50 f4       	brcc	.+20     	; 0x686 <__addsf3x+0x4e>
 672:	50 3e       	cpi	r21, 0xE0	; 224
 674:	68 f1       	brcs	.+90     	; 0x6d0 <__addsf3x+0x98>
 676:	1a 16       	cp	r1, r26
 678:	f0 40       	sbci	r31, 0x00	; 0
 67a:	a2 2f       	mov	r26, r18
 67c:	23 2f       	mov	r18, r19
 67e:	34 2f       	mov	r19, r20
 680:	44 27       	eor	r20, r20
 682:	58 5f       	subi	r21, 0xF8	; 248
 684:	f3 cf       	rjmp	.-26     	; 0x66c <__addsf3x+0x34>
 686:	46 95       	lsr	r20
 688:	37 95       	ror	r19
 68a:	27 95       	ror	r18
 68c:	a7 95       	ror	r26
 68e:	f0 40       	sbci	r31, 0x00	; 0
 690:	53 95       	inc	r21
 692:	c9 f7       	brne	.-14     	; 0x686 <__addsf3x+0x4e>
 694:	7e f4       	brtc	.+30     	; 0x6b4 <__addsf3x+0x7c>
 696:	1f 16       	cp	r1, r31
 698:	ba 0b       	sbc	r27, r26
 69a:	62 0b       	sbc	r22, r18
 69c:	73 0b       	sbc	r23, r19
 69e:	84 0b       	sbc	r24, r20
 6a0:	ba f0       	brmi	.+46     	; 0x6d0 <__addsf3x+0x98>
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	a1 f0       	breq	.+40     	; 0x6ce <__addsf3x+0x96>
 6a6:	ff 0f       	add	r31, r31
 6a8:	bb 1f       	adc	r27, r27
 6aa:	66 1f       	adc	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	c2 f7       	brpl	.-16     	; 0x6a2 <__addsf3x+0x6a>
 6b2:	0e c0       	rjmp	.+28     	; 0x6d0 <__addsf3x+0x98>
 6b4:	ba 0f       	add	r27, r26
 6b6:	62 1f       	adc	r22, r18
 6b8:	73 1f       	adc	r23, r19
 6ba:	84 1f       	adc	r24, r20
 6bc:	48 f4       	brcc	.+18     	; 0x6d0 <__addsf3x+0x98>
 6be:	87 95       	ror	r24
 6c0:	77 95       	ror	r23
 6c2:	67 95       	ror	r22
 6c4:	b7 95       	ror	r27
 6c6:	f7 95       	ror	r31
 6c8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ca:	08 f0       	brcs	.+2      	; 0x6ce <__addsf3x+0x96>
 6cc:	b3 cf       	rjmp	.-154    	; 0x634 <__addsf3+0x1e>
 6ce:	93 95       	inc	r25
 6d0:	88 0f       	add	r24, r24
 6d2:	08 f0       	brcs	.+2      	; 0x6d6 <__addsf3x+0x9e>
 6d4:	99 27       	eor	r25, r25
 6d6:	ee 0f       	add	r30, r30
 6d8:	97 95       	ror	r25
 6da:	87 95       	ror	r24
 6dc:	08 95       	ret

000006de <__divsf3>:
 6de:	0c d0       	rcall	.+24     	; 0x6f8 <__divsf3x>
 6e0:	eb c0       	rjmp	.+470    	; 0x8b8 <__fp_round>
 6e2:	e3 d0       	rcall	.+454    	; 0x8aa <__fp_pscB>
 6e4:	40 f0       	brcs	.+16     	; 0x6f6 <__divsf3+0x18>
 6e6:	da d0       	rcall	.+436    	; 0x89c <__fp_pscA>
 6e8:	30 f0       	brcs	.+12     	; 0x6f6 <__divsf3+0x18>
 6ea:	21 f4       	brne	.+8      	; 0x6f4 <__divsf3+0x16>
 6ec:	5f 3f       	cpi	r21, 0xFF	; 255
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <__divsf3+0x18>
 6f0:	cc c0       	rjmp	.+408    	; 0x88a <__fp_inf>
 6f2:	51 11       	cpse	r21, r1
 6f4:	15 c1       	rjmp	.+554    	; 0x920 <__fp_szero>
 6f6:	cf c0       	rjmp	.+414    	; 0x896 <__fp_nan>

000006f8 <__divsf3x>:
 6f8:	f0 d0       	rcall	.+480    	; 0x8da <__fp_split3>
 6fa:	98 f3       	brcs	.-26     	; 0x6e2 <__divsf3+0x4>

000006fc <__divsf3_pse>:
 6fc:	99 23       	and	r25, r25
 6fe:	c9 f3       	breq	.-14     	; 0x6f2 <__divsf3+0x14>
 700:	55 23       	and	r21, r21
 702:	b1 f3       	breq	.-20     	; 0x6f0 <__divsf3+0x12>
 704:	95 1b       	sub	r25, r21
 706:	55 0b       	sbc	r21, r21
 708:	bb 27       	eor	r27, r27
 70a:	aa 27       	eor	r26, r26
 70c:	62 17       	cp	r22, r18
 70e:	73 07       	cpc	r23, r19
 710:	84 07       	cpc	r24, r20
 712:	38 f0       	brcs	.+14     	; 0x722 <__divsf3_pse+0x26>
 714:	9f 5f       	subi	r25, 0xFF	; 255
 716:	5f 4f       	sbci	r21, 0xFF	; 255
 718:	22 0f       	add	r18, r18
 71a:	33 1f       	adc	r19, r19
 71c:	44 1f       	adc	r20, r20
 71e:	aa 1f       	adc	r26, r26
 720:	a9 f3       	breq	.-22     	; 0x70c <__divsf3_pse+0x10>
 722:	33 d0       	rcall	.+102    	; 0x78a <__divsf3_pse+0x8e>
 724:	0e 2e       	mov	r0, r30
 726:	3a f0       	brmi	.+14     	; 0x736 <__divsf3_pse+0x3a>
 728:	e0 e8       	ldi	r30, 0x80	; 128
 72a:	30 d0       	rcall	.+96     	; 0x78c <__divsf3_pse+0x90>
 72c:	91 50       	subi	r25, 0x01	; 1
 72e:	50 40       	sbci	r21, 0x00	; 0
 730:	e6 95       	lsr	r30
 732:	00 1c       	adc	r0, r0
 734:	ca f7       	brpl	.-14     	; 0x728 <__divsf3_pse+0x2c>
 736:	29 d0       	rcall	.+82     	; 0x78a <__divsf3_pse+0x8e>
 738:	fe 2f       	mov	r31, r30
 73a:	27 d0       	rcall	.+78     	; 0x78a <__divsf3_pse+0x8e>
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	bb 1f       	adc	r27, r27
 744:	26 17       	cp	r18, r22
 746:	37 07       	cpc	r19, r23
 748:	48 07       	cpc	r20, r24
 74a:	ab 07       	cpc	r26, r27
 74c:	b0 e8       	ldi	r27, 0x80	; 128
 74e:	09 f0       	breq	.+2      	; 0x752 <__divsf3_pse+0x56>
 750:	bb 0b       	sbc	r27, r27
 752:	80 2d       	mov	r24, r0
 754:	bf 01       	movw	r22, r30
 756:	ff 27       	eor	r31, r31
 758:	93 58       	subi	r25, 0x83	; 131
 75a:	5f 4f       	sbci	r21, 0xFF	; 255
 75c:	2a f0       	brmi	.+10     	; 0x768 <__divsf3_pse+0x6c>
 75e:	9e 3f       	cpi	r25, 0xFE	; 254
 760:	51 05       	cpc	r21, r1
 762:	68 f0       	brcs	.+26     	; 0x77e <__divsf3_pse+0x82>
 764:	92 c0       	rjmp	.+292    	; 0x88a <__fp_inf>
 766:	dc c0       	rjmp	.+440    	; 0x920 <__fp_szero>
 768:	5f 3f       	cpi	r21, 0xFF	; 255
 76a:	ec f3       	brlt	.-6      	; 0x766 <__divsf3_pse+0x6a>
 76c:	98 3e       	cpi	r25, 0xE8	; 232
 76e:	dc f3       	brlt	.-10     	; 0x766 <__divsf3_pse+0x6a>
 770:	86 95       	lsr	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b7 95       	ror	r27
 778:	f7 95       	ror	r31
 77a:	9f 5f       	subi	r25, 0xFF	; 255
 77c:	c9 f7       	brne	.-14     	; 0x770 <__divsf3_pse+0x74>
 77e:	88 0f       	add	r24, r24
 780:	91 1d       	adc	r25, r1
 782:	96 95       	lsr	r25
 784:	87 95       	ror	r24
 786:	97 f9       	bld	r25, 7
 788:	08 95       	ret
 78a:	e1 e0       	ldi	r30, 0x01	; 1
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	bb 1f       	adc	r27, r27
 794:	62 17       	cp	r22, r18
 796:	73 07       	cpc	r23, r19
 798:	84 07       	cpc	r24, r20
 79a:	ba 07       	cpc	r27, r26
 79c:	20 f0       	brcs	.+8      	; 0x7a6 <__divsf3_pse+0xaa>
 79e:	62 1b       	sub	r22, r18
 7a0:	73 0b       	sbc	r23, r19
 7a2:	84 0b       	sbc	r24, r20
 7a4:	ba 0b       	sbc	r27, r26
 7a6:	ee 1f       	adc	r30, r30
 7a8:	88 f7       	brcc	.-30     	; 0x78c <__divsf3_pse+0x90>
 7aa:	e0 95       	com	r30
 7ac:	08 95       	ret

000007ae <__fixsfsi>:
 7ae:	04 d0       	rcall	.+8      	; 0x7b8 <__fixunssfsi>
 7b0:	68 94       	set
 7b2:	b1 11       	cpse	r27, r1
 7b4:	b5 c0       	rjmp	.+362    	; 0x920 <__fp_szero>
 7b6:	08 95       	ret

000007b8 <__fixunssfsi>:
 7b8:	98 d0       	rcall	.+304    	; 0x8ea <__fp_splitA>
 7ba:	88 f0       	brcs	.+34     	; 0x7de <__fixunssfsi+0x26>
 7bc:	9f 57       	subi	r25, 0x7F	; 127
 7be:	90 f0       	brcs	.+36     	; 0x7e4 <__fixunssfsi+0x2c>
 7c0:	b9 2f       	mov	r27, r25
 7c2:	99 27       	eor	r25, r25
 7c4:	b7 51       	subi	r27, 0x17	; 23
 7c6:	a0 f0       	brcs	.+40     	; 0x7f0 <__fixunssfsi+0x38>
 7c8:	d1 f0       	breq	.+52     	; 0x7fe <__fixunssfsi+0x46>
 7ca:	66 0f       	add	r22, r22
 7cc:	77 1f       	adc	r23, r23
 7ce:	88 1f       	adc	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	1a f0       	brmi	.+6      	; 0x7da <__fixunssfsi+0x22>
 7d4:	ba 95       	dec	r27
 7d6:	c9 f7       	brne	.-14     	; 0x7ca <__fixunssfsi+0x12>
 7d8:	12 c0       	rjmp	.+36     	; 0x7fe <__fixunssfsi+0x46>
 7da:	b1 30       	cpi	r27, 0x01	; 1
 7dc:	81 f0       	breq	.+32     	; 0x7fe <__fixunssfsi+0x46>
 7de:	9f d0       	rcall	.+318    	; 0x91e <__fp_zero>
 7e0:	b1 e0       	ldi	r27, 0x01	; 1
 7e2:	08 95       	ret
 7e4:	9c c0       	rjmp	.+312    	; 0x91e <__fp_zero>
 7e6:	67 2f       	mov	r22, r23
 7e8:	78 2f       	mov	r23, r24
 7ea:	88 27       	eor	r24, r24
 7ec:	b8 5f       	subi	r27, 0xF8	; 248
 7ee:	39 f0       	breq	.+14     	; 0x7fe <__fixunssfsi+0x46>
 7f0:	b9 3f       	cpi	r27, 0xF9	; 249
 7f2:	cc f3       	brlt	.-14     	; 0x7e6 <__fixunssfsi+0x2e>
 7f4:	86 95       	lsr	r24
 7f6:	77 95       	ror	r23
 7f8:	67 95       	ror	r22
 7fa:	b3 95       	inc	r27
 7fc:	d9 f7       	brne	.-10     	; 0x7f4 <__fixunssfsi+0x3c>
 7fe:	3e f4       	brtc	.+14     	; 0x80e <__fixunssfsi+0x56>
 800:	90 95       	com	r25
 802:	80 95       	com	r24
 804:	70 95       	com	r23
 806:	61 95       	neg	r22
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	08 95       	ret

00000810 <__floatunsisf>:
 810:	e8 94       	clt
 812:	09 c0       	rjmp	.+18     	; 0x826 <__floatsisf+0x12>

00000814 <__floatsisf>:
 814:	97 fb       	bst	r25, 7
 816:	3e f4       	brtc	.+14     	; 0x826 <__floatsisf+0x12>
 818:	90 95       	com	r25
 81a:	80 95       	com	r24
 81c:	70 95       	com	r23
 81e:	61 95       	neg	r22
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	99 23       	and	r25, r25
 828:	a9 f0       	breq	.+42     	; 0x854 <__floatsisf+0x40>
 82a:	f9 2f       	mov	r31, r25
 82c:	96 e9       	ldi	r25, 0x96	; 150
 82e:	bb 27       	eor	r27, r27
 830:	93 95       	inc	r25
 832:	f6 95       	lsr	r31
 834:	87 95       	ror	r24
 836:	77 95       	ror	r23
 838:	67 95       	ror	r22
 83a:	b7 95       	ror	r27
 83c:	f1 11       	cpse	r31, r1
 83e:	f8 cf       	rjmp	.-16     	; 0x830 <__floatsisf+0x1c>
 840:	fa f4       	brpl	.+62     	; 0x880 <__floatsisf+0x6c>
 842:	bb 0f       	add	r27, r27
 844:	11 f4       	brne	.+4      	; 0x84a <__floatsisf+0x36>
 846:	60 ff       	sbrs	r22, 0
 848:	1b c0       	rjmp	.+54     	; 0x880 <__floatsisf+0x6c>
 84a:	6f 5f       	subi	r22, 0xFF	; 255
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	16 c0       	rjmp	.+44     	; 0x880 <__floatsisf+0x6c>
 854:	88 23       	and	r24, r24
 856:	11 f0       	breq	.+4      	; 0x85c <__floatsisf+0x48>
 858:	96 e9       	ldi	r25, 0x96	; 150
 85a:	11 c0       	rjmp	.+34     	; 0x87e <__floatsisf+0x6a>
 85c:	77 23       	and	r23, r23
 85e:	21 f0       	breq	.+8      	; 0x868 <__floatsisf+0x54>
 860:	9e e8       	ldi	r25, 0x8E	; 142
 862:	87 2f       	mov	r24, r23
 864:	76 2f       	mov	r23, r22
 866:	05 c0       	rjmp	.+10     	; 0x872 <__floatsisf+0x5e>
 868:	66 23       	and	r22, r22
 86a:	71 f0       	breq	.+28     	; 0x888 <__floatsisf+0x74>
 86c:	96 e8       	ldi	r25, 0x86	; 134
 86e:	86 2f       	mov	r24, r22
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	2a f0       	brmi	.+10     	; 0x880 <__floatsisf+0x6c>
 876:	9a 95       	dec	r25
 878:	66 0f       	add	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	da f7       	brpl	.-10     	; 0x876 <__floatsisf+0x62>
 880:	88 0f       	add	r24, r24
 882:	96 95       	lsr	r25
 884:	87 95       	ror	r24
 886:	97 f9       	bld	r25, 7
 888:	08 95       	ret

0000088a <__fp_inf>:
 88a:	97 f9       	bld	r25, 7
 88c:	9f 67       	ori	r25, 0x7F	; 127
 88e:	80 e8       	ldi	r24, 0x80	; 128
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	08 95       	ret

00000896 <__fp_nan>:
 896:	9f ef       	ldi	r25, 0xFF	; 255
 898:	80 ec       	ldi	r24, 0xC0	; 192
 89a:	08 95       	ret

0000089c <__fp_pscA>:
 89c:	00 24       	eor	r0, r0
 89e:	0a 94       	dec	r0
 8a0:	16 16       	cp	r1, r22
 8a2:	17 06       	cpc	r1, r23
 8a4:	18 06       	cpc	r1, r24
 8a6:	09 06       	cpc	r0, r25
 8a8:	08 95       	ret

000008aa <__fp_pscB>:
 8aa:	00 24       	eor	r0, r0
 8ac:	0a 94       	dec	r0
 8ae:	12 16       	cp	r1, r18
 8b0:	13 06       	cpc	r1, r19
 8b2:	14 06       	cpc	r1, r20
 8b4:	05 06       	cpc	r0, r21
 8b6:	08 95       	ret

000008b8 <__fp_round>:
 8b8:	09 2e       	mov	r0, r25
 8ba:	03 94       	inc	r0
 8bc:	00 0c       	add	r0, r0
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__fp_round+0xc>
 8c0:	88 23       	and	r24, r24
 8c2:	52 f0       	brmi	.+20     	; 0x8d8 <__fp_round+0x20>
 8c4:	bb 0f       	add	r27, r27
 8c6:	40 f4       	brcc	.+16     	; 0x8d8 <__fp_round+0x20>
 8c8:	bf 2b       	or	r27, r31
 8ca:	11 f4       	brne	.+4      	; 0x8d0 <__fp_round+0x18>
 8cc:	60 ff       	sbrs	r22, 0
 8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <__fp_round+0x20>
 8d0:	6f 5f       	subi	r22, 0xFF	; 255
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	08 95       	ret

000008da <__fp_split3>:
 8da:	57 fd       	sbrc	r21, 7
 8dc:	90 58       	subi	r25, 0x80	; 128
 8de:	44 0f       	add	r20, r20
 8e0:	55 1f       	adc	r21, r21
 8e2:	59 f0       	breq	.+22     	; 0x8fa <__fp_splitA+0x10>
 8e4:	5f 3f       	cpi	r21, 0xFF	; 255
 8e6:	71 f0       	breq	.+28     	; 0x904 <__fp_splitA+0x1a>
 8e8:	47 95       	ror	r20

000008ea <__fp_splitA>:
 8ea:	88 0f       	add	r24, r24
 8ec:	97 fb       	bst	r25, 7
 8ee:	99 1f       	adc	r25, r25
 8f0:	61 f0       	breq	.+24     	; 0x90a <__fp_splitA+0x20>
 8f2:	9f 3f       	cpi	r25, 0xFF	; 255
 8f4:	79 f0       	breq	.+30     	; 0x914 <__fp_splitA+0x2a>
 8f6:	87 95       	ror	r24
 8f8:	08 95       	ret
 8fa:	12 16       	cp	r1, r18
 8fc:	13 06       	cpc	r1, r19
 8fe:	14 06       	cpc	r1, r20
 900:	55 1f       	adc	r21, r21
 902:	f2 cf       	rjmp	.-28     	; 0x8e8 <__fp_split3+0xe>
 904:	46 95       	lsr	r20
 906:	f1 df       	rcall	.-30     	; 0x8ea <__fp_splitA>
 908:	08 c0       	rjmp	.+16     	; 0x91a <__fp_splitA+0x30>
 90a:	16 16       	cp	r1, r22
 90c:	17 06       	cpc	r1, r23
 90e:	18 06       	cpc	r1, r24
 910:	99 1f       	adc	r25, r25
 912:	f1 cf       	rjmp	.-30     	; 0x8f6 <__fp_splitA+0xc>
 914:	86 95       	lsr	r24
 916:	71 05       	cpc	r23, r1
 918:	61 05       	cpc	r22, r1
 91a:	08 94       	sec
 91c:	08 95       	ret

0000091e <__fp_zero>:
 91e:	e8 94       	clt

00000920 <__fp_szero>:
 920:	bb 27       	eor	r27, r27
 922:	66 27       	eor	r22, r22
 924:	77 27       	eor	r23, r23
 926:	cb 01       	movw	r24, r22
 928:	97 f9       	bld	r25, 7
 92a:	08 95       	ret

0000092c <__mulsf3>:
 92c:	0b d0       	rcall	.+22     	; 0x944 <__mulsf3x>
 92e:	c4 cf       	rjmp	.-120    	; 0x8b8 <__fp_round>
 930:	b5 df       	rcall	.-150    	; 0x89c <__fp_pscA>
 932:	28 f0       	brcs	.+10     	; 0x93e <__mulsf3+0x12>
 934:	ba df       	rcall	.-140    	; 0x8aa <__fp_pscB>
 936:	18 f0       	brcs	.+6      	; 0x93e <__mulsf3+0x12>
 938:	95 23       	and	r25, r21
 93a:	09 f0       	breq	.+2      	; 0x93e <__mulsf3+0x12>
 93c:	a6 cf       	rjmp	.-180    	; 0x88a <__fp_inf>
 93e:	ab cf       	rjmp	.-170    	; 0x896 <__fp_nan>
 940:	11 24       	eor	r1, r1
 942:	ee cf       	rjmp	.-36     	; 0x920 <__fp_szero>

00000944 <__mulsf3x>:
 944:	ca df       	rcall	.-108    	; 0x8da <__fp_split3>
 946:	a0 f3       	brcs	.-24     	; 0x930 <__mulsf3+0x4>

00000948 <__mulsf3_pse>:
 948:	95 9f       	mul	r25, r21
 94a:	d1 f3       	breq	.-12     	; 0x940 <__mulsf3+0x14>
 94c:	95 0f       	add	r25, r21
 94e:	50 e0       	ldi	r21, 0x00	; 0
 950:	55 1f       	adc	r21, r21
 952:	62 9f       	mul	r22, r18
 954:	f0 01       	movw	r30, r0
 956:	72 9f       	mul	r23, r18
 958:	bb 27       	eor	r27, r27
 95a:	f0 0d       	add	r31, r0
 95c:	b1 1d       	adc	r27, r1
 95e:	63 9f       	mul	r22, r19
 960:	aa 27       	eor	r26, r26
 962:	f0 0d       	add	r31, r0
 964:	b1 1d       	adc	r27, r1
 966:	aa 1f       	adc	r26, r26
 968:	64 9f       	mul	r22, r20
 96a:	66 27       	eor	r22, r22
 96c:	b0 0d       	add	r27, r0
 96e:	a1 1d       	adc	r26, r1
 970:	66 1f       	adc	r22, r22
 972:	82 9f       	mul	r24, r18
 974:	22 27       	eor	r18, r18
 976:	b0 0d       	add	r27, r0
 978:	a1 1d       	adc	r26, r1
 97a:	62 1f       	adc	r22, r18
 97c:	73 9f       	mul	r23, r19
 97e:	b0 0d       	add	r27, r0
 980:	a1 1d       	adc	r26, r1
 982:	62 1f       	adc	r22, r18
 984:	83 9f       	mul	r24, r19
 986:	a0 0d       	add	r26, r0
 988:	61 1d       	adc	r22, r1
 98a:	22 1f       	adc	r18, r18
 98c:	74 9f       	mul	r23, r20
 98e:	33 27       	eor	r19, r19
 990:	a0 0d       	add	r26, r0
 992:	61 1d       	adc	r22, r1
 994:	23 1f       	adc	r18, r19
 996:	84 9f       	mul	r24, r20
 998:	60 0d       	add	r22, r0
 99a:	21 1d       	adc	r18, r1
 99c:	82 2f       	mov	r24, r18
 99e:	76 2f       	mov	r23, r22
 9a0:	6a 2f       	mov	r22, r26
 9a2:	11 24       	eor	r1, r1
 9a4:	9f 57       	subi	r25, 0x7F	; 127
 9a6:	50 40       	sbci	r21, 0x00	; 0
 9a8:	8a f0       	brmi	.+34     	; 0x9cc <__mulsf3_pse+0x84>
 9aa:	e1 f0       	breq	.+56     	; 0x9e4 <__mulsf3_pse+0x9c>
 9ac:	88 23       	and	r24, r24
 9ae:	4a f0       	brmi	.+18     	; 0x9c2 <__mulsf3_pse+0x7a>
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	bb 1f       	adc	r27, r27
 9b6:	66 1f       	adc	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	91 50       	subi	r25, 0x01	; 1
 9be:	50 40       	sbci	r21, 0x00	; 0
 9c0:	a9 f7       	brne	.-22     	; 0x9ac <__mulsf3_pse+0x64>
 9c2:	9e 3f       	cpi	r25, 0xFE	; 254
 9c4:	51 05       	cpc	r21, r1
 9c6:	70 f0       	brcs	.+28     	; 0x9e4 <__mulsf3_pse+0x9c>
 9c8:	60 cf       	rjmp	.-320    	; 0x88a <__fp_inf>
 9ca:	aa cf       	rjmp	.-172    	; 0x920 <__fp_szero>
 9cc:	5f 3f       	cpi	r21, 0xFF	; 255
 9ce:	ec f3       	brlt	.-6      	; 0x9ca <__mulsf3_pse+0x82>
 9d0:	98 3e       	cpi	r25, 0xE8	; 232
 9d2:	dc f3       	brlt	.-10     	; 0x9ca <__mulsf3_pse+0x82>
 9d4:	86 95       	lsr	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	b7 95       	ror	r27
 9dc:	f7 95       	ror	r31
 9de:	e7 95       	ror	r30
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	c1 f7       	brne	.-16     	; 0x9d4 <__mulsf3_pse+0x8c>
 9e4:	fe 2b       	or	r31, r30
 9e6:	88 0f       	add	r24, r24
 9e8:	91 1d       	adc	r25, r1
 9ea:	96 95       	lsr	r25
 9ec:	87 95       	ror	r24
 9ee:	97 f9       	bld	r25, 7
 9f0:	08 95       	ret

000009f2 <pow>:
 9f2:	fa 01       	movw	r30, r20
 9f4:	ee 0f       	add	r30, r30
 9f6:	ff 1f       	adc	r31, r31
 9f8:	30 96       	adiw	r30, 0x00	; 0
 9fa:	21 05       	cpc	r18, r1
 9fc:	31 05       	cpc	r19, r1
 9fe:	99 f1       	breq	.+102    	; 0xa66 <pow+0x74>
 a00:	61 15       	cp	r22, r1
 a02:	71 05       	cpc	r23, r1
 a04:	61 f4       	brne	.+24     	; 0xa1e <pow+0x2c>
 a06:	80 38       	cpi	r24, 0x80	; 128
 a08:	bf e3       	ldi	r27, 0x3F	; 63
 a0a:	9b 07       	cpc	r25, r27
 a0c:	49 f1       	breq	.+82     	; 0xa60 <pow+0x6e>
 a0e:	68 94       	set
 a10:	90 38       	cpi	r25, 0x80	; 128
 a12:	81 05       	cpc	r24, r1
 a14:	61 f0       	breq	.+24     	; 0xa2e <pow+0x3c>
 a16:	80 38       	cpi	r24, 0x80	; 128
 a18:	bf ef       	ldi	r27, 0xFF	; 255
 a1a:	9b 07       	cpc	r25, r27
 a1c:	41 f0       	breq	.+16     	; 0xa2e <pow+0x3c>
 a1e:	99 23       	and	r25, r25
 a20:	42 f5       	brpl	.+80     	; 0xa72 <pow+0x80>
 a22:	ff 3f       	cpi	r31, 0xFF	; 255
 a24:	e1 05       	cpc	r30, r1
 a26:	31 05       	cpc	r19, r1
 a28:	21 05       	cpc	r18, r1
 a2a:	11 f1       	breq	.+68     	; 0xa70 <pow+0x7e>
 a2c:	e8 94       	clt
 a2e:	08 94       	sec
 a30:	e7 95       	ror	r30
 a32:	d9 01       	movw	r26, r18
 a34:	aa 23       	and	r26, r26
 a36:	29 f4       	brne	.+10     	; 0xa42 <pow+0x50>
 a38:	ab 2f       	mov	r26, r27
 a3a:	be 2f       	mov	r27, r30
 a3c:	f8 5f       	subi	r31, 0xF8	; 248
 a3e:	d0 f3       	brcs	.-12     	; 0xa34 <pow+0x42>
 a40:	10 c0       	rjmp	.+32     	; 0xa62 <pow+0x70>
 a42:	ff 5f       	subi	r31, 0xFF	; 255
 a44:	70 f4       	brcc	.+28     	; 0xa62 <pow+0x70>
 a46:	a6 95       	lsr	r26
 a48:	e0 f7       	brcc	.-8      	; 0xa42 <pow+0x50>
 a4a:	f7 39       	cpi	r31, 0x97	; 151
 a4c:	50 f0       	brcs	.+20     	; 0xa62 <pow+0x70>
 a4e:	19 f0       	breq	.+6      	; 0xa56 <pow+0x64>
 a50:	ff 3a       	cpi	r31, 0xAF	; 175
 a52:	38 f4       	brcc	.+14     	; 0xa62 <pow+0x70>
 a54:	9f 77       	andi	r25, 0x7F	; 127
 a56:	9f 93       	push	r25
 a58:	0c d0       	rcall	.+24     	; 0xa72 <pow+0x80>
 a5a:	0f 90       	pop	r0
 a5c:	07 fc       	sbrc	r0, 7
 a5e:	90 58       	subi	r25, 0x80	; 128
 a60:	08 95       	ret
 a62:	3e f0       	brts	.+14     	; 0xa72 <pow+0x80>
 a64:	18 cf       	rjmp	.-464    	; 0x896 <__fp_nan>
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	80 e8       	ldi	r24, 0x80	; 128
 a6c:	9f e3       	ldi	r25, 0x3F	; 63
 a6e:	08 95       	ret
 a70:	4f e7       	ldi	r20, 0x7F	; 127
 a72:	9f 77       	andi	r25, 0x7F	; 127
 a74:	5f 93       	push	r21
 a76:	4f 93       	push	r20
 a78:	3f 93       	push	r19
 a7a:	2f 93       	push	r18
 a7c:	9e d0       	rcall	.+316    	; 0xbba <log>
 a7e:	2f 91       	pop	r18
 a80:	3f 91       	pop	r19
 a82:	4f 91       	pop	r20
 a84:	5f 91       	pop	r21
 a86:	52 df       	rcall	.-348    	; 0x92c <__mulsf3>
 a88:	05 c0       	rjmp	.+10     	; 0xa94 <exp>
 a8a:	19 f4       	brne	.+6      	; 0xa92 <pow+0xa0>
 a8c:	0e f0       	brts	.+2      	; 0xa90 <pow+0x9e>
 a8e:	fd ce       	rjmp	.-518    	; 0x88a <__fp_inf>
 a90:	46 cf       	rjmp	.-372    	; 0x91e <__fp_zero>
 a92:	01 cf       	rjmp	.-510    	; 0x896 <__fp_nan>

00000a94 <exp>:
 a94:	2a df       	rcall	.-428    	; 0x8ea <__fp_splitA>
 a96:	c8 f3       	brcs	.-14     	; 0xa8a <pow+0x98>
 a98:	96 38       	cpi	r25, 0x86	; 134
 a9a:	c0 f7       	brcc	.-16     	; 0xa8c <pow+0x9a>
 a9c:	07 f8       	bld	r0, 7
 a9e:	0f 92       	push	r0
 aa0:	e8 94       	clt
 aa2:	2b e3       	ldi	r18, 0x3B	; 59
 aa4:	3a ea       	ldi	r19, 0xAA	; 170
 aa6:	48 eb       	ldi	r20, 0xB8	; 184
 aa8:	5f e7       	ldi	r21, 0x7F	; 127
 aaa:	4e df       	rcall	.-356    	; 0x948 <__mulsf3_pse>
 aac:	0f 92       	push	r0
 aae:	0f 92       	push	r0
 ab0:	0f 92       	push	r0
 ab2:	4d b7       	in	r20, 0x3d	; 61
 ab4:	5e b7       	in	r21, 0x3e	; 62
 ab6:	0f 92       	push	r0
 ab8:	c0 d0       	rcall	.+384    	; 0xc3a <modf>
 aba:	ec e8       	ldi	r30, 0x8C	; 140
 abc:	f0 e0       	ldi	r31, 0x00	; 0
 abe:	16 d0       	rcall	.+44     	; 0xaec <__fp_powser>
 ac0:	4f 91       	pop	r20
 ac2:	5f 91       	pop	r21
 ac4:	ef 91       	pop	r30
 ac6:	ff 91       	pop	r31
 ac8:	e5 95       	asr	r30
 aca:	ee 1f       	adc	r30, r30
 acc:	ff 1f       	adc	r31, r31
 ace:	49 f0       	breq	.+18     	; 0xae2 <exp+0x4e>
 ad0:	fe 57       	subi	r31, 0x7E	; 126
 ad2:	e0 68       	ori	r30, 0x80	; 128
 ad4:	44 27       	eor	r20, r20
 ad6:	ee 0f       	add	r30, r30
 ad8:	44 1f       	adc	r20, r20
 ada:	fa 95       	dec	r31
 adc:	e1 f7       	brne	.-8      	; 0xad6 <exp+0x42>
 ade:	41 95       	neg	r20
 ae0:	55 0b       	sbc	r21, r21
 ae2:	32 d0       	rcall	.+100    	; 0xb48 <ldexp>
 ae4:	0f 90       	pop	r0
 ae6:	07 fe       	sbrs	r0, 7
 ae8:	26 c0       	rjmp	.+76     	; 0xb36 <inverse>
 aea:	08 95       	ret

00000aec <__fp_powser>:
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	1f 93       	push	r17
 af2:	0f 93       	push	r16
 af4:	ff 92       	push	r15
 af6:	ef 92       	push	r14
 af8:	df 92       	push	r13
 afa:	7b 01       	movw	r14, r22
 afc:	8c 01       	movw	r16, r24
 afe:	68 94       	set
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <__fp_powser+0x20>
 b02:	da 2e       	mov	r13, r26
 b04:	ef 01       	movw	r28, r30
 b06:	1e df       	rcall	.-452    	; 0x944 <__mulsf3x>
 b08:	fe 01       	movw	r30, r28
 b0a:	e8 94       	clt
 b0c:	a5 91       	lpm	r26, Z+
 b0e:	25 91       	lpm	r18, Z+
 b10:	35 91       	lpm	r19, Z+
 b12:	45 91       	lpm	r20, Z+
 b14:	55 91       	lpm	r21, Z+
 b16:	ae f3       	brts	.-22     	; 0xb02 <__fp_powser+0x16>
 b18:	ef 01       	movw	r28, r30
 b1a:	8e dd       	rcall	.-1252   	; 0x638 <__addsf3x>
 b1c:	fe 01       	movw	r30, r28
 b1e:	97 01       	movw	r18, r14
 b20:	a8 01       	movw	r20, r16
 b22:	da 94       	dec	r13
 b24:	79 f7       	brne	.-34     	; 0xb04 <__fp_powser+0x18>
 b26:	df 90       	pop	r13
 b28:	ef 90       	pop	r14
 b2a:	ff 90       	pop	r15
 b2c:	0f 91       	pop	r16
 b2e:	1f 91       	pop	r17
 b30:	cf 91       	pop	r28
 b32:	df 91       	pop	r29
 b34:	08 95       	ret

00000b36 <inverse>:
 b36:	9b 01       	movw	r18, r22
 b38:	ac 01       	movw	r20, r24
 b3a:	60 e0       	ldi	r22, 0x00	; 0
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	80 e8       	ldi	r24, 0x80	; 128
 b40:	9f e3       	ldi	r25, 0x3F	; 63
 b42:	cd cd       	rjmp	.-1126   	; 0x6de <__divsf3>
 b44:	a2 ce       	rjmp	.-700    	; 0x88a <__fp_inf>
 b46:	ac c0       	rjmp	.+344    	; 0xca0 <__fp_mpack>

00000b48 <ldexp>:
 b48:	d0 de       	rcall	.-608    	; 0x8ea <__fp_splitA>
 b4a:	e8 f3       	brcs	.-6      	; 0xb46 <inverse+0x10>
 b4c:	99 23       	and	r25, r25
 b4e:	d9 f3       	breq	.-10     	; 0xb46 <inverse+0x10>
 b50:	94 0f       	add	r25, r20
 b52:	51 1d       	adc	r21, r1
 b54:	bb f3       	brvs	.-18     	; 0xb44 <inverse+0xe>
 b56:	91 50       	subi	r25, 0x01	; 1
 b58:	50 40       	sbci	r21, 0x00	; 0
 b5a:	94 f0       	brlt	.+36     	; 0xb80 <ldexp+0x38>
 b5c:	59 f0       	breq	.+22     	; 0xb74 <ldexp+0x2c>
 b5e:	88 23       	and	r24, r24
 b60:	32 f0       	brmi	.+12     	; 0xb6e <ldexp+0x26>
 b62:	66 0f       	add	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	91 50       	subi	r25, 0x01	; 1
 b6a:	50 40       	sbci	r21, 0x00	; 0
 b6c:	c1 f7       	brne	.-16     	; 0xb5e <ldexp+0x16>
 b6e:	9e 3f       	cpi	r25, 0xFE	; 254
 b70:	51 05       	cpc	r21, r1
 b72:	44 f7       	brge	.-48     	; 0xb44 <inverse+0xe>
 b74:	88 0f       	add	r24, r24
 b76:	91 1d       	adc	r25, r1
 b78:	96 95       	lsr	r25
 b7a:	87 95       	ror	r24
 b7c:	97 f9       	bld	r25, 7
 b7e:	08 95       	ret
 b80:	5f 3f       	cpi	r21, 0xFF	; 255
 b82:	ac f0       	brlt	.+42     	; 0xbae <ldexp+0x66>
 b84:	98 3e       	cpi	r25, 0xE8	; 232
 b86:	9c f0       	brlt	.+38     	; 0xbae <ldexp+0x66>
 b88:	bb 27       	eor	r27, r27
 b8a:	86 95       	lsr	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	b7 95       	ror	r27
 b92:	08 f4       	brcc	.+2      	; 0xb96 <ldexp+0x4e>
 b94:	b1 60       	ori	r27, 0x01	; 1
 b96:	93 95       	inc	r25
 b98:	c1 f7       	brne	.-16     	; 0xb8a <ldexp+0x42>
 b9a:	bb 0f       	add	r27, r27
 b9c:	58 f7       	brcc	.-42     	; 0xb74 <ldexp+0x2c>
 b9e:	11 f4       	brne	.+4      	; 0xba4 <ldexp+0x5c>
 ba0:	60 ff       	sbrs	r22, 0
 ba2:	e8 cf       	rjmp	.-48     	; 0xb74 <ldexp+0x2c>
 ba4:	6f 5f       	subi	r22, 0xFF	; 255
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	8f 4f       	sbci	r24, 0xFF	; 255
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	e3 cf       	rjmp	.-58     	; 0xb74 <ldexp+0x2c>
 bae:	b8 ce       	rjmp	.-656    	; 0x920 <__fp_szero>
 bb0:	0e f0       	brts	.+2      	; 0xbb4 <ldexp+0x6c>
 bb2:	76 c0       	rjmp	.+236    	; 0xca0 <__fp_mpack>
 bb4:	70 ce       	rjmp	.-800    	; 0x896 <__fp_nan>
 bb6:	68 94       	set
 bb8:	68 ce       	rjmp	.-816    	; 0x88a <__fp_inf>

00000bba <log>:
 bba:	97 de       	rcall	.-722    	; 0x8ea <__fp_splitA>
 bbc:	c8 f3       	brcs	.-14     	; 0xbb0 <ldexp+0x68>
 bbe:	99 23       	and	r25, r25
 bc0:	d1 f3       	breq	.-12     	; 0xbb6 <ldexp+0x6e>
 bc2:	c6 f3       	brts	.-16     	; 0xbb4 <ldexp+0x6c>
 bc4:	df 93       	push	r29
 bc6:	cf 93       	push	r28
 bc8:	1f 93       	push	r17
 bca:	0f 93       	push	r16
 bcc:	ff 92       	push	r15
 bce:	c9 2f       	mov	r28, r25
 bd0:	dd 27       	eor	r29, r29
 bd2:	88 23       	and	r24, r24
 bd4:	2a f0       	brmi	.+10     	; 0xbe0 <log+0x26>
 bd6:	21 97       	sbiw	r28, 0x01	; 1
 bd8:	66 0f       	add	r22, r22
 bda:	77 1f       	adc	r23, r23
 bdc:	88 1f       	adc	r24, r24
 bde:	da f7       	brpl	.-10     	; 0xbd6 <log+0x1c>
 be0:	20 e0       	ldi	r18, 0x00	; 0
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	40 e8       	ldi	r20, 0x80	; 128
 be6:	5f eb       	ldi	r21, 0xBF	; 191
 be8:	9f e3       	ldi	r25, 0x3F	; 63
 bea:	88 39       	cpi	r24, 0x98	; 152
 bec:	20 f0       	brcs	.+8      	; 0xbf6 <log+0x3c>
 bee:	80 3e       	cpi	r24, 0xE0	; 224
 bf0:	30 f0       	brcs	.+12     	; 0xbfe <log+0x44>
 bf2:	21 96       	adiw	r28, 0x01	; 1
 bf4:	8f 77       	andi	r24, 0x7F	; 127
 bf6:	0f dd       	rcall	.-1506   	; 0x616 <__addsf3>
 bf8:	e4 eb       	ldi	r30, 0xB4	; 180
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	03 c0       	rjmp	.+6      	; 0xc04 <log+0x4a>
 bfe:	0b dd       	rcall	.-1514   	; 0x616 <__addsf3>
 c00:	e1 ee       	ldi	r30, 0xE1	; 225
 c02:	f0 e0       	ldi	r31, 0x00	; 0
 c04:	73 df       	rcall	.-282    	; 0xaec <__fp_powser>
 c06:	8b 01       	movw	r16, r22
 c08:	be 01       	movw	r22, r28
 c0a:	ec 01       	movw	r28, r24
 c0c:	fb 2e       	mov	r15, r27
 c0e:	6f 57       	subi	r22, 0x7F	; 127
 c10:	71 09       	sbc	r23, r1
 c12:	75 95       	asr	r23
 c14:	77 1f       	adc	r23, r23
 c16:	88 0b       	sbc	r24, r24
 c18:	99 0b       	sbc	r25, r25
 c1a:	fc dd       	rcall	.-1032   	; 0x814 <__floatsisf>
 c1c:	28 e1       	ldi	r18, 0x18	; 24
 c1e:	32 e7       	ldi	r19, 0x72	; 114
 c20:	41 e3       	ldi	r20, 0x31	; 49
 c22:	5f e3       	ldi	r21, 0x3F	; 63
 c24:	8f de       	rcall	.-738    	; 0x944 <__mulsf3x>
 c26:	af 2d       	mov	r26, r15
 c28:	98 01       	movw	r18, r16
 c2a:	ae 01       	movw	r20, r28
 c2c:	ff 90       	pop	r15
 c2e:	0f 91       	pop	r16
 c30:	1f 91       	pop	r17
 c32:	cf 91       	pop	r28
 c34:	df 91       	pop	r29
 c36:	00 dd       	rcall	.-1536   	; 0x638 <__addsf3x>
 c38:	3f ce       	rjmp	.-898    	; 0x8b8 <__fp_round>

00000c3a <modf>:
 c3a:	fa 01       	movw	r30, r20
 c3c:	dc 01       	movw	r26, r24
 c3e:	aa 0f       	add	r26, r26
 c40:	bb 1f       	adc	r27, r27
 c42:	9b 01       	movw	r18, r22
 c44:	ac 01       	movw	r20, r24
 c46:	bf 57       	subi	r27, 0x7F	; 127
 c48:	28 f4       	brcc	.+10     	; 0xc54 <modf+0x1a>
 c4a:	22 27       	eor	r18, r18
 c4c:	33 27       	eor	r19, r19
 c4e:	44 27       	eor	r20, r20
 c50:	50 78       	andi	r21, 0x80	; 128
 c52:	1f c0       	rjmp	.+62     	; 0xc92 <modf+0x58>
 c54:	b7 51       	subi	r27, 0x17	; 23
 c56:	88 f4       	brcc	.+34     	; 0xc7a <modf+0x40>
 c58:	ab 2f       	mov	r26, r27
 c5a:	00 24       	eor	r0, r0
 c5c:	46 95       	lsr	r20
 c5e:	37 95       	ror	r19
 c60:	27 95       	ror	r18
 c62:	01 1c       	adc	r0, r1
 c64:	a3 95       	inc	r26
 c66:	d2 f3       	brmi	.-12     	; 0xc5c <modf+0x22>
 c68:	00 20       	and	r0, r0
 c6a:	69 f0       	breq	.+26     	; 0xc86 <modf+0x4c>
 c6c:	22 0f       	add	r18, r18
 c6e:	33 1f       	adc	r19, r19
 c70:	44 1f       	adc	r20, r20
 c72:	b3 95       	inc	r27
 c74:	da f3       	brmi	.-10     	; 0xc6c <modf+0x32>
 c76:	0d d0       	rcall	.+26     	; 0xc92 <modf+0x58>
 c78:	cd cc       	rjmp	.-1638   	; 0x614 <__subsf3>
 c7a:	61 30       	cpi	r22, 0x01	; 1
 c7c:	71 05       	cpc	r23, r1
 c7e:	a0 e8       	ldi	r26, 0x80	; 128
 c80:	8a 07       	cpc	r24, r26
 c82:	b9 46       	sbci	r27, 0x69	; 105
 c84:	30 f4       	brcc	.+12     	; 0xc92 <modf+0x58>
 c86:	9b 01       	movw	r18, r22
 c88:	ac 01       	movw	r20, r24
 c8a:	66 27       	eor	r22, r22
 c8c:	77 27       	eor	r23, r23
 c8e:	88 27       	eor	r24, r24
 c90:	90 78       	andi	r25, 0x80	; 128
 c92:	30 96       	adiw	r30, 0x00	; 0
 c94:	21 f0       	breq	.+8      	; 0xc9e <modf+0x64>
 c96:	20 83       	st	Z, r18
 c98:	31 83       	std	Z+1, r19	; 0x01
 c9a:	42 83       	std	Z+2, r20	; 0x02
 c9c:	53 83       	std	Z+3, r21	; 0x03
 c9e:	08 95       	ret

00000ca0 <__fp_mpack>:
 ca0:	9f 3f       	cpi	r25, 0xFF	; 255
 ca2:	31 f0       	breq	.+12     	; 0xcb0 <__fp_mpack_finite+0xc>

00000ca4 <__fp_mpack_finite>:
 ca4:	91 50       	subi	r25, 0x01	; 1
 ca6:	20 f4       	brcc	.+8      	; 0xcb0 <__fp_mpack_finite+0xc>
 ca8:	87 95       	ror	r24
 caa:	77 95       	ror	r23
 cac:	67 95       	ror	r22
 cae:	b7 95       	ror	r27
 cb0:	88 0f       	add	r24, r24
 cb2:	91 1d       	adc	r25, r1
 cb4:	96 95       	lsr	r25
 cb6:	87 95       	ror	r24
 cb8:	97 f9       	bld	r25, 7
 cba:	08 95       	ret

00000cbc <__divmodhi4>:
 cbc:	97 fb       	bst	r25, 7
 cbe:	07 2e       	mov	r0, r23
 cc0:	16 f4       	brtc	.+4      	; 0xcc6 <__divmodhi4+0xa>
 cc2:	00 94       	com	r0
 cc4:	06 d0       	rcall	.+12     	; 0xcd2 <__divmodhi4_neg1>
 cc6:	77 fd       	sbrc	r23, 7
 cc8:	08 d0       	rcall	.+16     	; 0xcda <__divmodhi4_neg2>
 cca:	0b d0       	rcall	.+22     	; 0xce2 <__udivmodhi4>
 ccc:	07 fc       	sbrc	r0, 7
 cce:	05 d0       	rcall	.+10     	; 0xcda <__divmodhi4_neg2>
 cd0:	3e f4       	brtc	.+14     	; 0xce0 <__divmodhi4_exit>

00000cd2 <__divmodhi4_neg1>:
 cd2:	90 95       	com	r25
 cd4:	81 95       	neg	r24
 cd6:	9f 4f       	sbci	r25, 0xFF	; 255
 cd8:	08 95       	ret

00000cda <__divmodhi4_neg2>:
 cda:	70 95       	com	r23
 cdc:	61 95       	neg	r22
 cde:	7f 4f       	sbci	r23, 0xFF	; 255

00000ce0 <__divmodhi4_exit>:
 ce0:	08 95       	ret

00000ce2 <__udivmodhi4>:
 ce2:	aa 1b       	sub	r26, r26
 ce4:	bb 1b       	sub	r27, r27
 ce6:	51 e1       	ldi	r21, 0x11	; 17
 ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <__udivmodhi4_ep>

00000cea <__udivmodhi4_loop>:
 cea:	aa 1f       	adc	r26, r26
 cec:	bb 1f       	adc	r27, r27
 cee:	a6 17       	cp	r26, r22
 cf0:	b7 07       	cpc	r27, r23
 cf2:	10 f0       	brcs	.+4      	; 0xcf8 <__udivmodhi4_ep>
 cf4:	a6 1b       	sub	r26, r22
 cf6:	b7 0b       	sbc	r27, r23

00000cf8 <__udivmodhi4_ep>:
 cf8:	88 1f       	adc	r24, r24
 cfa:	99 1f       	adc	r25, r25
 cfc:	5a 95       	dec	r21
 cfe:	a9 f7       	brne	.-22     	; 0xcea <__udivmodhi4_loop>
 d00:	80 95       	com	r24
 d02:	90 95       	com	r25
 d04:	bc 01       	movw	r22, r24
 d06:	cd 01       	movw	r24, r26
 d08:	08 95       	ret

00000d0a <_exit>:
 d0a:	f8 94       	cli

00000d0c <__stop_program>:
 d0c:	ff cf       	rjmp	.-2      	; 0xd0c <__stop_program>
