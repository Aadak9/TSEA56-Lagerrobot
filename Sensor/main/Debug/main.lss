
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000c7e  00000d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800102  00800102  00000d14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c8  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a91  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070a  00000000  00000000  000029bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000030c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00003258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a4  00000000  00000000  0000378f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
   6:	00 00       	nop
   8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
   a:	00 00       	nop
   c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
   e:	00 00       	nop
  10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
  12:	00 00       	nop
  14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
  16:	00 00       	nop
  18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
  1e:	00 00       	nop
  20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
  22:	00 00       	nop
  24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
  26:	00 00       	nop
  28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
  36:	00 00       	nop
  38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
  3e:	00 00       	nop
  40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
  42:	00 00       	nop
  44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
  46:	00 00       	nop
  48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
  56:	00 00       	nop
  58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
  5e:	00 00       	nop
  60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
  62:	00 00       	nop
  64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
  66:	00 00       	nop
  68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
  72:	00 00       	nop
  74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
  76:	00 00       	nop
  78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
  7e:	00 00       	nop
  80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
  82:	00 00       	nop
  84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
  86:	00 00       	nop
  88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	07 63       	ori	r16, 0x37	; 55
  8e:	42 36       	cpi	r20, 0x62	; 98
  90:	b7 9b       	sbis	0x16, 7	; 22
  92:	d8 a7       	std	Y+40, r29	; 0x28
  94:	1a 39       	cpi	r17, 0x9A	; 154
  96:	68 56       	subi	r22, 0x68	; 104
  98:	18 ae       	std	Y+56, r1	; 0x38
  9a:	ba ab       	std	Y+50, r27	; 0x32
  9c:	55 8c       	ldd	r5, Z+29	; 0x1d
  9e:	1d 3c       	cpi	r17, 0xCD	; 205
  a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
  a2:	57 63       	ori	r21, 0x37	; 55
  a4:	bd 6d       	ori	r27, 0xDD	; 221
  a6:	ed fd       	.word	0xfded	; ????
  a8:	75 3e       	cpi	r23, 0xE5	; 229
  aa:	f6 17       	cp	r31, r22
  ac:	72 31       	cpi	r23, 0x12	; 18
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__mulsf3_pse+0x2>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d0 e4       	ldi	r29, 0x40	; 64
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	ee e7       	ldi	r30, 0x7E	; 126
 122:	fc e0       	ldi	r31, 0x0C	; 12
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	0b bf       	out	0x3b, r16	; 59
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
 12a:	07 90       	elpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	a2 30       	cpi	r26, 0x02	; 2
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	a2 e0       	ldi	r26, 0x02	; 2
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
 13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
 13e:	a6 33       	cpi	r26, 0x36	; 54
 140:	b2 07       	cpc	r27, r18
 142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
 144:	5f d1       	rcall	.+702    	; 0x404 <main>
 146:	99 c5       	rjmp	.+2866   	; 0xc7a <_exit>

00000148 <__bad_interrupt>:
 148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <AD_convert>:
volatile int volt_convert = 0;
volatile int distance = 0;
volatile int sum_t = 0;

uint8_t AD_convert(int is_MSB)
{
 14a:	9c 01       	movw	r18, r24
	ADCSRA |= (1 << ADSC);
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	90 81       	ld	r25, Z
 152:	90 64       	ori	r25, 0x40	; 64
 154:	90 83       	st	Z, r25
	
	while(ADCSRA & (1<<ADSC))
 156:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 15a:	96 fd       	sbrc	r25, 6
 15c:	fc cf       	rjmp	.-8      	; 0x156 <AD_convert+0xc>
	{
	}
	
	if (is_MSB){
 15e:	23 2b       	or	r18, r19
 160:	29 f0       	breq	.+10     	; 0x16c <AD_convert+0x22>
		return indata_t = ADCH;
 162:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	08 95       	ret
	} else {
		return indata_t = ADCL;
 16c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 174:	08 95       	ret

00000176 <digital_to_volt>:


float digital_to_volt(int digital_out)
{
	volt_convert = digital_out*5.1/1023;				// Kalibrera intern spänning
 176:	bc 01       	movw	r22, r24
 178:	99 0f       	add	r25, r25
 17a:	88 0b       	sbc	r24, r24
 17c:	99 0b       	sbc	r25, r25
 17e:	29 d3       	rcall	.+1618   	; 0x7d2 <__floatsisf>
 180:	23 e3       	ldi	r18, 0x33	; 51
 182:	33 e3       	ldi	r19, 0x33	; 51
 184:	43 ea       	ldi	r20, 0xA3	; 163
 186:	50 e4       	ldi	r21, 0x40	; 64
 188:	b0 d3       	rcall	.+1888   	; 0x8ea <__mulsf3>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 ec       	ldi	r19, 0xC0	; 192
 18e:	4f e7       	ldi	r20, 0x7F	; 127
 190:	54 e4       	ldi	r21, 0x44	; 68
 192:	84 d2       	rcall	.+1288   	; 0x69c <__divsf3>
 194:	eb d2       	rcall	.+1494   	; 0x76c <__fixsfsi>
 196:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <volt_convert+0x1>
 19a:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <volt_convert>
	return volt_convert;
 19e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <volt_convert>
 1a2:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <volt_convert+0x1>
 1a6:	07 2e       	mov	r0, r23
 1a8:	00 0c       	add	r0, r0
 1aa:	88 0b       	sbc	r24, r24
 1ac:	99 0b       	sbc	r25, r25
}
 1ae:	11 c3       	rjmp	.+1570   	; 0x7d2 <__floatsisf>

000001b0 <convert_uint8_t>:


int convert_uint8_t(uint8_t num)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	60 97       	sbiw	r28, 0x10	; 16
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
	// Konverterar en uint8_t variabel till int
	
	int array[8];
	for (int i = 0; i <8; i++ )
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	1a c0       	rjmp	.+52     	; 0x1fe <convert_uint8_t+0x4e>
	{
		array[i] = (num >>(7-i)) & 1;	
 1ca:	67 e0       	ldi	r22, 0x07	; 7
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	64 1b       	sub	r22, r20
 1d0:	75 0b       	sbc	r23, r21
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <convert_uint8_t+0x2c>
 1d8:	35 95       	asr	r19
 1da:	27 95       	ror	r18
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <convert_uint8_t+0x28>
 1e0:	21 70       	andi	r18, 0x01	; 1
 1e2:	33 27       	eor	r19, r19
 1e4:	fa 01       	movw	r30, r20
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	6c 0f       	add	r22, r28
 1f0:	7d 1f       	adc	r23, r29
 1f2:	e6 0f       	add	r30, r22
 1f4:	f7 1f       	adc	r31, r23
 1f6:	31 83       	std	Z+1, r19	; 0x01
 1f8:	20 83       	st	Z, r18
int convert_uint8_t(uint8_t num)
{
	// Konverterar en uint8_t variabel till int
	
	int array[8];
	for (int i = 0; i <8; i++ )
 1fa:	4f 5f       	subi	r20, 0xFF	; 255
 1fc:	5f 4f       	sbci	r21, 0xFF	; 255
 1fe:	48 30       	cpi	r20, 0x08	; 8
 200:	51 05       	cpc	r21, r1
 202:	1c f3       	brlt	.-58     	; 0x1ca <convert_uint8_t+0x1a>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	18 c0       	rjmp	.+48     	; 0x23e <convert_uint8_t+0x8e>
	
	int conversion = 0;
	
	for (int index = 0; index < 8; index++)
	{	
		conversion += array[index]*(1 << (7-index+2));
 20e:	f9 01       	movw	r30, r18
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	4c 0f       	add	r20, r28
 21a:	5d 1f       	adc	r21, r29
 21c:	e4 0f       	add	r30, r20
 21e:	f5 1f       	adc	r31, r21
 220:	40 81       	ld	r20, Z
 222:	51 81       	ldd	r21, Z+1	; 0x01
 224:	69 e0       	ldi	r22, 0x09	; 9
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	62 1b       	sub	r22, r18
 22a:	73 0b       	sbc	r23, r19
 22c:	02 c0       	rjmp	.+4      	; 0x232 <convert_uint8_t+0x82>
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <convert_uint8_t+0x7e>
 236:	84 0f       	add	r24, r20
 238:	95 1f       	adc	r25, r21
		array[i] = (num >>(7-i)) & 1;	
	}
	
	int conversion = 0;
	
	for (int index = 0; index < 8; index++)
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	28 30       	cpi	r18, 0x08	; 8
 240:	31 05       	cpc	r19, r1
 242:	2c f3       	brlt	.-54     	; 0x20e <convert_uint8_t+0x5e>
	{	
		conversion += array[index]*(1 << (7-index+2));
	}
	
	return conversion;
}
 244:	60 96       	adiw	r28, 0x10	; 16
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <convert_uint16_t>:


int convert_uint16_t(uint16_t num)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	a0 97       	sbiw	r28, 0x20	; 32
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	int array[16];
	for (int i = 0; i < 16; i++ )
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	1a c0       	rjmp	.+52     	; 0x2a4 <convert_uint16_t+0x4e>
	{
		array[i] = (num >>(15-i)) & 1;
 270:	4f e0       	ldi	r20, 0x0F	; 15
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	42 1b       	sub	r20, r18
 276:	53 0b       	sbc	r21, r19
 278:	bc 01       	movw	r22, r24
 27a:	02 c0       	rjmp	.+4      	; 0x280 <convert_uint16_t+0x2a>
 27c:	76 95       	lsr	r23
 27e:	67 95       	ror	r22
 280:	4a 95       	dec	r20
 282:	e2 f7       	brpl	.-8      	; 0x27c <convert_uint16_t+0x26>
 284:	ab 01       	movw	r20, r22
 286:	f9 01       	movw	r30, r18
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	6c 0f       	add	r22, r28
 292:	7d 1f       	adc	r23, r29
 294:	e6 0f       	add	r30, r22
 296:	f7 1f       	adc	r31, r23
 298:	41 70       	andi	r20, 0x01	; 1
 29a:	55 27       	eor	r21, r21
 29c:	51 83       	std	Z+1, r21	; 0x01
 29e:	40 83       	st	Z, r20


int convert_uint16_t(uint16_t num)
{
	int array[16];
	for (int i = 0; i < 16; i++ )
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	20 31       	cpi	r18, 0x10	; 16
 2a6:	31 05       	cpc	r19, r1
 2a8:	1c f3       	brlt	.-58     	; 0x270 <convert_uint16_t+0x1a>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	18 c0       	rjmp	.+48     	; 0x2e4 <convert_uint16_t+0x8e>
	
	int conversion = 0;
	
	for (int index = 0; index < 16; index++)
	{
		conversion += array[index]*(1 << (15-index+2));
 2b4:	f9 01       	movw	r30, r18
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	4c 0f       	add	r20, r28
 2c0:	5d 1f       	adc	r21, r29
 2c2:	e4 0f       	add	r30, r20
 2c4:	f5 1f       	adc	r31, r21
 2c6:	40 81       	ld	r20, Z
 2c8:	51 81       	ldd	r21, Z+1	; 0x01
 2ca:	61 e1       	ldi	r22, 0x11	; 17
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	62 1b       	sub	r22, r18
 2d0:	73 0b       	sbc	r23, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <convert_uint16_t+0x82>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <convert_uint16_t+0x7e>
 2dc:	84 0f       	add	r24, r20
 2de:	95 1f       	adc	r25, r21
		array[i] = (num >>(15-i)) & 1;
	}
	
	int conversion = 0;
	
	for (int index = 0; index < 16; index++)
 2e0:	2f 5f       	subi	r18, 0xFF	; 255
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	20 31       	cpi	r18, 0x10	; 16
 2e6:	31 05       	cpc	r19, r1
 2e8:	2c f3       	brlt	.-54     	; 0x2b4 <convert_uint16_t+0x5e>
	{
		conversion += array[index]*(1 << (15-index+2));
	}
	
	return conversion;
}
 2ea:	a0 96       	adiw	r28, 0x20	; 32
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <is_active_reflex>:


int is_active_reflex()
{
	indata_t = AD_convert(1);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	24 df       	rcall	.-440    	; 0x14a <AD_convert>
 302:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	indata_int = convert_uint8_t(indata_t);
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 30a:	52 df       	rcall	.-348    	; 0x1b0 <convert_uint8_t>
 30c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <indata_int+0x1>
 310:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <indata_int>
	indata_volt = digital_to_volt(indata_int);
 314:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <indata_int>
 318:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <indata_int+0x1>
 31c:	2c df       	rcall	.-424    	; 0x176 <digital_to_volt>
 31e:	26 d2       	rcall	.+1100   	; 0x76c <__fixsfsi>
 320:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <indata_volt+0x1>
 324:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <indata_volt>
	
	if (indata_volt > 2) {								// Ändra 2 till ett värde som kalibreras
 328:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <indata_volt>
 32c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <indata_volt+0x1>
 330:	03 97       	sbiw	r24, 0x03	; 3
 332:	1c f0       	brlt	.+6      	; 0x33a <is_active_reflex+0x3e>
		return 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	08 95       	ret
	} else {
		return 0;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 33e:	08 95       	ret

00000340 <volt_to_dist>:


int volt_to_dist(int digital_out)
{
	distance = 27/pow(digital_to_volt(digital_out),1.15);
 340:	1a df       	rcall	.-460    	; 0x176 <digital_to_volt>
 342:	23 e3       	ldi	r18, 0x33	; 51
 344:	33 e3       	ldi	r19, 0x33	; 51
 346:	43 e9       	ldi	r20, 0x93	; 147
 348:	5f e3       	ldi	r21, 0x3F	; 63
 34a:	32 d3       	rcall	.+1636   	; 0x9b0 <pow>
 34c:	9b 01       	movw	r18, r22
 34e:	ac 01       	movw	r20, r24
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	88 ed       	ldi	r24, 0xD8	; 216
 356:	91 e4       	ldi	r25, 0x41	; 65
 358:	a1 d1       	rcall	.+834    	; 0x69c <__divsf3>
 35a:	08 d2       	rcall	.+1040   	; 0x76c <__fixsfsi>
 35c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <distance+0x1>
 360:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <distance>
	return distance;
 364:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <distance>
 368:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <distance+0x1>
}
 36c:	08 95       	ret

0000036e <is_roadmark>:


int is_roadmark(int array[11])
{
	for (int index = 0; index < 11; index++)
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	13 c0       	rjmp	.+38     	; 0x39a <is_roadmark+0x2c>
	{
		sum_t += array[index];
 374:	f9 01       	movw	r30, r18
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	e8 0f       	add	r30, r24
 37c:	f9 1f       	adc	r31, r25
 37e:	60 81       	ld	r22, Z
 380:	71 81       	ldd	r23, Z+1	; 0x01
 382:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 386:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 38a:	46 0f       	add	r20, r22
 38c:	57 1f       	adc	r21, r23
 38e:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_end+0x1>
 392:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end>
}


int is_roadmark(int array[11])
{
	for (int index = 0; index < 11; index++)
 396:	2f 5f       	subi	r18, 0xFF	; 255
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	2b 30       	cpi	r18, 0x0B	; 11
 39c:	31 05       	cpc	r19, r1
 39e:	54 f3       	brlt	.-44     	; 0x374 <is_roadmark+0x6>
	{
		sum_t += array[index];
	}
	
	if (sum_t > 4) {									// Placeholder värde
 3a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3a4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 3a8:	05 97       	sbiw	r24, 0x05	; 5
 3aa:	1c f0       	brlt	.+6      	; 0x3b2 <is_roadmark+0x44>
		return 1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	08 95       	ret
		} else {
		return 0;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 3b6:	08 95       	ret

000003b8 <init_IR>:
#include <avr/interrupt.h>
#include "init.h"

void init_IR()
{
	ADMUX = (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(0<<MUX0);
 3b8:	86 e6       	ldi	r24, 0x66	; 102
 3ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3be:	87 e8       	ldi	r24, 0x87	; 135
 3c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3c4:	08 95       	ret

000003c6 <init_gyro>:
}


void init_gyro()
{
	ADMUX = (1<<REFS0)|(0<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 3c6:	87 e4       	ldi	r24, 0x47	; 71
 3c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3cc:	87 e8       	ldi	r24, 0x87	; 135
 3ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3d2:	08 95       	ret

000003d4 <init_reflex>:
}


void init_reflex()
{
	DDRA |= 0x1F;
 3d4:	81 b1       	in	r24, 0x01	; 1
 3d6:	8f 61       	ori	r24, 0x1F	; 31
 3d8:	81 b9       	out	0x01, r24	; 1
	ADMUX = (0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0); 
 3da:	85 e2       	ldi	r24, 0x25	; 37
 3dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3e0:	87 e8       	ldi	r24, 0x87	; 135
 3e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3e6:	08 95       	ret

000003e8 <init_interrupt>:
}


void init_interrupt()
{
	EICRA |=(1<<ISC01)|(1<<ISC00);
 3e8:	e9 e6       	ldi	r30, 0x69	; 105
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	83 60       	ori	r24, 0x03	; 3
 3f0:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 3f2:	8d b3       	in	r24, 0x1d	; 29
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	8d bb       	out	0x1d, r24	; 29
 3f8:	08 95       	ret

000003fa <SPI_init>:
}


void SPI_init()
{
	DDRB = (1 << DDB6);
 3fa:	80 e4       	ldi	r24, 0x40	; 64
 3fc:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE) | (1 << SPIE) | (0 << DORD) | (0 << CPOL) | (0 << CPHA); 
 3fe:	80 ec       	ldi	r24, 0xC0	; 192
 400:	8c bd       	out	0x2c, r24	; 44
 402:	08 95       	ret

00000404 <main>:
#include "convert.h"
#include "read.h"

int main()
{
	init_interrupt();
 404:	f1 df       	rcall	.-30     	; 0x3e8 <init_interrupt>
	SPI_init();
 406:	f9 df       	rcall	.-14     	; 0x3fa <SPI_init>
	sei();
	
	while (1)
	{
		init_IR();
 408:	78 94       	sei
		read_IR();
 40a:	d6 df       	rcall	.-84     	; 0x3b8 <init_IR>
		
		init_gyro();
 40c:	58 d0       	rcall	.+176    	; 0x4be <read_IR>
 40e:	db df       	rcall	.-74     	; 0x3c6 <init_gyro>
		read_gyro();
 410:	7a d0       	rcall	.+244    	; 0x506 <read_gyro>
 412:	e0 df       	rcall	.-64     	; 0x3d4 <init_reflex>
		
		init_reflex();
 414:	01 d0       	rcall	.+2      	; 0x418 <read_reflex>
 416:	f9 cf       	rjmp	.-14     	; 0x40a <main+0x6>

00000418 <read_reflex>:
		read_reflex();
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <indata+0x1>
uint8_t read_reflex()
{
	int i;
	uint8_t data;
	
	indata = 0;
 420:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <indata>
	sum = 0;
 424:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sum+0x1>
 428:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sum>
	
	for(i = 0; i < 11; i++)
 42c:	c0 e0       	ldi	r28, 0x00	; 0
 42e:	d0 e0       	ldi	r29, 0x00	; 0
 430:	2b c0       	rjmp	.+86     	; 0x488 <read_reflex+0x70>
	{
		PORTA &= 0xF0;									// Nollställer de fyra LSB bitarna i PORT A
 432:	82 b1       	in	r24, 0x02	; 2
 434:	80 7f       	andi	r24, 0xF0	; 240
 436:	82 b9       	out	0x02, r24	; 2
		PORTA |= i;										// Sätter Muxen till index i
 438:	82 b1       	in	r24, 0x02	; 2
 43a:	8c 2b       	or	r24, r28
 43c:	82 b9       	out	0x02, r24	; 2
		PORTA |= 0x10;									// Startar sensorn
 43e:	82 b1       	in	r24, 0x02	; 2
 440:	80 61       	ori	r24, 0x10	; 16
 442:	82 b9       	out	0x02, r24	; 2
		
		indata = is_active_reflex();
 444:	5b df       	rcall	.-330    	; 0x2fc <is_active_reflex>
 446:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <indata+0x1>
 44a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <indata>
		PORTA &= 0xEF;									// Stänger av sensorn
 44e:	82 b1       	in	r24, 0x02	; 2
 450:	8f 7e       	andi	r24, 0xEF	; 239
 452:	82 b9       	out	0x02, r24	; 2
		
		array[i] = indata;
 454:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <indata>
 458:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <indata+0x1>
 45c:	fe 01       	movw	r30, r28
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	e1 5e       	subi	r30, 0xE1	; 225
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	91 83       	std	Z+1, r25	; 0x01
 468:	80 83       	st	Z, r24
		sum += indata;
 46a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <indata>
 46e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <indata+0x1>
 472:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sum>
 476:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sum+0x1>
 47a:	82 0f       	add	r24, r18
 47c:	93 1f       	adc	r25, r19
 47e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <sum+0x1>
 482:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <sum>
	uint8_t data;
	
	indata = 0;
	sum = 0;
	
	for(i = 0; i < 11; i++)
 486:	21 96       	adiw	r28, 0x01	; 1
 488:	cb 30       	cpi	r28, 0x0B	; 11
 48a:	d1 05       	cpc	r29, r1
 48c:	94 f2       	brlt	.-92     	; 0x432 <read_reflex+0x1a>
		
		array[i] = indata;
		sum += indata;
	}
	
	roadmark = is_roadmark(array[11]);
 48e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <indata_MSB>
 492:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <__bss_end>
 496:	6b df       	rcall	.-298    	; 0x36e <is_roadmark>
 498:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <roadmark+0x1>
 49c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <roadmark>
	
	return data = (uint8_t)(roadmark*16 + sum);
 4a0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <roadmark>
 4a4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <roadmark+0x1>
 4a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sum>
 4ac:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sum+0x1>
}
 4b0:	40 e1       	ldi	r20, 0x10	; 16
 4b2:	24 9f       	mul	r18, r20
 4b4:	80 0d       	add	r24, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <read_IR>:

uint8_t read_IR()
{
	uint8_t data;
	
	indata_t = AD_convert(1);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	43 de       	rcall	.-890    	; 0x14a <AD_convert>
 4c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	indata = convert_uint8_t(indata_t);
 4c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	70 de       	rcall	.-800    	; 0x1b0 <convert_uint8_t>
 4d0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <indata+0x1>
 4d4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <indata>
	dist = volt_to_dist(indata);
 4d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <indata>
 4dc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <indata+0x1>
 4e0:	2f df       	rcall	.-418    	; 0x340 <volt_to_dist>
 4e2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <dist+0x1>
 4e6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <dist>
	
	if (dist > 250){									// Förhindrar integer overflow
 4ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <dist>
 4ee:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <dist+0x1>
 4f2:	8b 3f       	cpi	r24, 0xFB	; 251
 4f4:	91 05       	cpc	r25, r1
 4f6:	2c f4       	brge	.+10     	; 0x502 <read_IR+0x44>
		return data = 0xFF;
		} else {
		return data = (uint8_t)dist;
 4f8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <dist>
 4fc:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <dist+0x1>
 500:	08 95       	ret
	indata_t = AD_convert(1);
	indata = convert_uint8_t(indata_t);
	dist = volt_to_dist(indata);
	
	if (dist > 250){									// Förhindrar integer overflow
		return data = 0xFF;
 502:	8f ef       	ldi	r24, 0xFF	; 255
		} else {
		return data = (uint8_t)dist;
	}
}
 504:	08 95       	ret

00000506 <read_gyro>:


uint8_t read_gyro()
{
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
	indata_MSB = AD_convert(1);
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	1b de       	rcall	.-970    	; 0x14a <AD_convert>
 514:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <indata_MSB>
	indata_LSB = AD_convert(0);
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	16 de       	rcall	.-980    	; 0x14a <AD_convert>
 51e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <indata_LSB>
	indata16_t = ((uint16_t)indata_MSB << 8) | indata_LSB;
 522:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <indata_MSB>
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	98 2f       	mov	r25, r24
 52a:	88 27       	eor	r24, r24
 52c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <indata_LSB>
 530:	82 2b       	or	r24, r18
 532:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <indata16_t+0x1>
 536:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <indata16_t>
	
	indata = convert_uint16_t(indata16_t);
 53a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <indata16_t>
 53e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <indata16_t+0x1>
 542:	89 de       	rcall	.-750    	; 0x256 <convert_uint16_t>
 544:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <indata+0x1>
 548:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <indata>
	volt = digital_to_volt(indata);
 54c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <indata>
 550:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <indata+0x1>
 554:	10 de       	rcall	.-992    	; 0x176 <digital_to_volt>
 556:	bc 01       	movw	r22, r24
 558:	99 0f       	add	r25, r25
 55a:	88 0b       	sbc	r24, r24
 55c:	99 0b       	sbc	r25, r25
 55e:	39 d1       	rcall	.+626    	; 0x7d2 <__floatsisf>
 560:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <volt>
 564:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <volt+0x1>
 568:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <volt+0x2>
 56c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <volt+0x3>
	w = (volt - 2.5)/(2*volt) * 150;
 570:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <volt>
 574:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <volt+0x1>
 578:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <volt+0x2>
 57c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <volt+0x3>
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	40 e2       	ldi	r20, 0x20	; 32
 586:	50 e4       	ldi	r21, 0x40	; 64
 588:	24 d0       	rcall	.+72     	; 0x5d2 <__subsf3>
 58a:	6b 01       	movw	r12, r22
 58c:	7c 01       	movw	r14, r24
 58e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <volt>
 592:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <volt+0x1>
 596:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <volt+0x2>
 59a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <volt+0x3>
 59e:	9b 01       	movw	r18, r22
 5a0:	ac 01       	movw	r20, r24
 5a2:	18 d0       	rcall	.+48     	; 0x5d4 <__addsf3>
 5a4:	9b 01       	movw	r18, r22
 5a6:	ac 01       	movw	r20, r24
 5a8:	c7 01       	movw	r24, r14
 5aa:	b6 01       	movw	r22, r12
 5ac:	77 d0       	rcall	.+238    	; 0x69c <__divsf3>
 5ae:	20 e0       	ldi	r18, 0x00	; 0
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	46 e1       	ldi	r20, 0x16	; 22
 5b4:	53 e4       	ldi	r21, 0x43	; 67
 5b6:	99 d1       	rcall	.+818    	; 0x8ea <__mulsf3>
 5b8:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <w>
 5bc:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <w+0x1>
 5c0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <w+0x2>
 5c4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <w+0x3>
	
	
	// Skicka dist till bussen
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	cf 90       	pop	r12
 5d0:	08 95       	ret

000005d2 <__subsf3>:
 5d2:	50 58       	subi	r21, 0x80	; 128

000005d4 <__addsf3>:
 5d4:	bb 27       	eor	r27, r27
 5d6:	aa 27       	eor	r26, r26
 5d8:	0e d0       	rcall	.+28     	; 0x5f6 <__addsf3x>
 5da:	4d c1       	rjmp	.+666    	; 0x876 <__fp_round>
 5dc:	3e d1       	rcall	.+636    	; 0x85a <__fp_pscA>
 5de:	30 f0       	brcs	.+12     	; 0x5ec <__addsf3+0x18>
 5e0:	43 d1       	rcall	.+646    	; 0x868 <__fp_pscB>
 5e2:	20 f0       	brcs	.+8      	; 0x5ec <__addsf3+0x18>
 5e4:	31 f4       	brne	.+12     	; 0x5f2 <__addsf3+0x1e>
 5e6:	9f 3f       	cpi	r25, 0xFF	; 255
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__addsf3+0x1a>
 5ea:	1e f4       	brtc	.+6      	; 0x5f2 <__addsf3+0x1e>
 5ec:	33 c1       	rjmp	.+614    	; 0x854 <__fp_nan>
 5ee:	0e f4       	brtc	.+2      	; 0x5f2 <__addsf3+0x1e>
 5f0:	e0 95       	com	r30
 5f2:	e7 fb       	bst	r30, 7
 5f4:	29 c1       	rjmp	.+594    	; 0x848 <__fp_inf>

000005f6 <__addsf3x>:
 5f6:	e9 2f       	mov	r30, r25
 5f8:	4f d1       	rcall	.+670    	; 0x898 <__fp_split3>
 5fa:	80 f3       	brcs	.-32     	; 0x5dc <__addsf3+0x8>
 5fc:	ba 17       	cp	r27, r26
 5fe:	62 07       	cpc	r22, r18
 600:	73 07       	cpc	r23, r19
 602:	84 07       	cpc	r24, r20
 604:	95 07       	cpc	r25, r21
 606:	18 f0       	brcs	.+6      	; 0x60e <__addsf3x+0x18>
 608:	71 f4       	brne	.+28     	; 0x626 <__addsf3x+0x30>
 60a:	9e f5       	brtc	.+102    	; 0x672 <__addsf3x+0x7c>
 60c:	67 c1       	rjmp	.+718    	; 0x8dc <__fp_zero>
 60e:	0e f4       	brtc	.+2      	; 0x612 <__addsf3x+0x1c>
 610:	e0 95       	com	r30
 612:	0b 2e       	mov	r0, r27
 614:	ba 2f       	mov	r27, r26
 616:	a0 2d       	mov	r26, r0
 618:	0b 01       	movw	r0, r22
 61a:	b9 01       	movw	r22, r18
 61c:	90 01       	movw	r18, r0
 61e:	0c 01       	movw	r0, r24
 620:	ca 01       	movw	r24, r20
 622:	a0 01       	movw	r20, r0
 624:	11 24       	eor	r1, r1
 626:	ff 27       	eor	r31, r31
 628:	59 1b       	sub	r21, r25
 62a:	99 f0       	breq	.+38     	; 0x652 <__addsf3x+0x5c>
 62c:	59 3f       	cpi	r21, 0xF9	; 249
 62e:	50 f4       	brcc	.+20     	; 0x644 <__addsf3x+0x4e>
 630:	50 3e       	cpi	r21, 0xE0	; 224
 632:	68 f1       	brcs	.+90     	; 0x68e <__addsf3x+0x98>
 634:	1a 16       	cp	r1, r26
 636:	f0 40       	sbci	r31, 0x00	; 0
 638:	a2 2f       	mov	r26, r18
 63a:	23 2f       	mov	r18, r19
 63c:	34 2f       	mov	r19, r20
 63e:	44 27       	eor	r20, r20
 640:	58 5f       	subi	r21, 0xF8	; 248
 642:	f3 cf       	rjmp	.-26     	; 0x62a <__addsf3x+0x34>
 644:	46 95       	lsr	r20
 646:	37 95       	ror	r19
 648:	27 95       	ror	r18
 64a:	a7 95       	ror	r26
 64c:	f0 40       	sbci	r31, 0x00	; 0
 64e:	53 95       	inc	r21
 650:	c9 f7       	brne	.-14     	; 0x644 <__addsf3x+0x4e>
 652:	7e f4       	brtc	.+30     	; 0x672 <__addsf3x+0x7c>
 654:	1f 16       	cp	r1, r31
 656:	ba 0b       	sbc	r27, r26
 658:	62 0b       	sbc	r22, r18
 65a:	73 0b       	sbc	r23, r19
 65c:	84 0b       	sbc	r24, r20
 65e:	ba f0       	brmi	.+46     	; 0x68e <__addsf3x+0x98>
 660:	91 50       	subi	r25, 0x01	; 1
 662:	a1 f0       	breq	.+40     	; 0x68c <__addsf3x+0x96>
 664:	ff 0f       	add	r31, r31
 666:	bb 1f       	adc	r27, r27
 668:	66 1f       	adc	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	c2 f7       	brpl	.-16     	; 0x660 <__addsf3x+0x6a>
 670:	0e c0       	rjmp	.+28     	; 0x68e <__addsf3x+0x98>
 672:	ba 0f       	add	r27, r26
 674:	62 1f       	adc	r22, r18
 676:	73 1f       	adc	r23, r19
 678:	84 1f       	adc	r24, r20
 67a:	48 f4       	brcc	.+18     	; 0x68e <__addsf3x+0x98>
 67c:	87 95       	ror	r24
 67e:	77 95       	ror	r23
 680:	67 95       	ror	r22
 682:	b7 95       	ror	r27
 684:	f7 95       	ror	r31
 686:	9e 3f       	cpi	r25, 0xFE	; 254
 688:	08 f0       	brcs	.+2      	; 0x68c <__addsf3x+0x96>
 68a:	b3 cf       	rjmp	.-154    	; 0x5f2 <__addsf3+0x1e>
 68c:	93 95       	inc	r25
 68e:	88 0f       	add	r24, r24
 690:	08 f0       	brcs	.+2      	; 0x694 <__addsf3x+0x9e>
 692:	99 27       	eor	r25, r25
 694:	ee 0f       	add	r30, r30
 696:	97 95       	ror	r25
 698:	87 95       	ror	r24
 69a:	08 95       	ret

0000069c <__divsf3>:
 69c:	0c d0       	rcall	.+24     	; 0x6b6 <__divsf3x>
 69e:	eb c0       	rjmp	.+470    	; 0x876 <__fp_round>
 6a0:	e3 d0       	rcall	.+454    	; 0x868 <__fp_pscB>
 6a2:	40 f0       	brcs	.+16     	; 0x6b4 <__divsf3+0x18>
 6a4:	da d0       	rcall	.+436    	; 0x85a <__fp_pscA>
 6a6:	30 f0       	brcs	.+12     	; 0x6b4 <__divsf3+0x18>
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <__divsf3+0x16>
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <__divsf3+0x18>
 6ae:	cc c0       	rjmp	.+408    	; 0x848 <__fp_inf>
 6b0:	51 11       	cpse	r21, r1
 6b2:	15 c1       	rjmp	.+554    	; 0x8de <__fp_szero>
 6b4:	cf c0       	rjmp	.+414    	; 0x854 <__fp_nan>

000006b6 <__divsf3x>:
 6b6:	f0 d0       	rcall	.+480    	; 0x898 <__fp_split3>
 6b8:	98 f3       	brcs	.-26     	; 0x6a0 <__divsf3+0x4>

000006ba <__divsf3_pse>:
 6ba:	99 23       	and	r25, r25
 6bc:	c9 f3       	breq	.-14     	; 0x6b0 <__divsf3+0x14>
 6be:	55 23       	and	r21, r21
 6c0:	b1 f3       	breq	.-20     	; 0x6ae <__divsf3+0x12>
 6c2:	95 1b       	sub	r25, r21
 6c4:	55 0b       	sbc	r21, r21
 6c6:	bb 27       	eor	r27, r27
 6c8:	aa 27       	eor	r26, r26
 6ca:	62 17       	cp	r22, r18
 6cc:	73 07       	cpc	r23, r19
 6ce:	84 07       	cpc	r24, r20
 6d0:	38 f0       	brcs	.+14     	; 0x6e0 <__divsf3_pse+0x26>
 6d2:	9f 5f       	subi	r25, 0xFF	; 255
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255
 6d6:	22 0f       	add	r18, r18
 6d8:	33 1f       	adc	r19, r19
 6da:	44 1f       	adc	r20, r20
 6dc:	aa 1f       	adc	r26, r26
 6de:	a9 f3       	breq	.-22     	; 0x6ca <__divsf3_pse+0x10>
 6e0:	33 d0       	rcall	.+102    	; 0x748 <__divsf3_pse+0x8e>
 6e2:	0e 2e       	mov	r0, r30
 6e4:	3a f0       	brmi	.+14     	; 0x6f4 <__divsf3_pse+0x3a>
 6e6:	e0 e8       	ldi	r30, 0x80	; 128
 6e8:	30 d0       	rcall	.+96     	; 0x74a <__divsf3_pse+0x90>
 6ea:	91 50       	subi	r25, 0x01	; 1
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	e6 95       	lsr	r30
 6f0:	00 1c       	adc	r0, r0
 6f2:	ca f7       	brpl	.-14     	; 0x6e6 <__divsf3_pse+0x2c>
 6f4:	29 d0       	rcall	.+82     	; 0x748 <__divsf3_pse+0x8e>
 6f6:	fe 2f       	mov	r31, r30
 6f8:	27 d0       	rcall	.+78     	; 0x748 <__divsf3_pse+0x8e>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	88 1f       	adc	r24, r24
 700:	bb 1f       	adc	r27, r27
 702:	26 17       	cp	r18, r22
 704:	37 07       	cpc	r19, r23
 706:	48 07       	cpc	r20, r24
 708:	ab 07       	cpc	r26, r27
 70a:	b0 e8       	ldi	r27, 0x80	; 128
 70c:	09 f0       	breq	.+2      	; 0x710 <__divsf3_pse+0x56>
 70e:	bb 0b       	sbc	r27, r27
 710:	80 2d       	mov	r24, r0
 712:	bf 01       	movw	r22, r30
 714:	ff 27       	eor	r31, r31
 716:	93 58       	subi	r25, 0x83	; 131
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	2a f0       	brmi	.+10     	; 0x726 <__divsf3_pse+0x6c>
 71c:	9e 3f       	cpi	r25, 0xFE	; 254
 71e:	51 05       	cpc	r21, r1
 720:	68 f0       	brcs	.+26     	; 0x73c <__divsf3_pse+0x82>
 722:	92 c0       	rjmp	.+292    	; 0x848 <__fp_inf>
 724:	dc c0       	rjmp	.+440    	; 0x8de <__fp_szero>
 726:	5f 3f       	cpi	r21, 0xFF	; 255
 728:	ec f3       	brlt	.-6      	; 0x724 <__divsf3_pse+0x6a>
 72a:	98 3e       	cpi	r25, 0xE8	; 232
 72c:	dc f3       	brlt	.-10     	; 0x724 <__divsf3_pse+0x6a>
 72e:	86 95       	lsr	r24
 730:	77 95       	ror	r23
 732:	67 95       	ror	r22
 734:	b7 95       	ror	r27
 736:	f7 95       	ror	r31
 738:	9f 5f       	subi	r25, 0xFF	; 255
 73a:	c9 f7       	brne	.-14     	; 0x72e <__divsf3_pse+0x74>
 73c:	88 0f       	add	r24, r24
 73e:	91 1d       	adc	r25, r1
 740:	96 95       	lsr	r25
 742:	87 95       	ror	r24
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret
 748:	e1 e0       	ldi	r30, 0x01	; 1
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	88 1f       	adc	r24, r24
 750:	bb 1f       	adc	r27, r27
 752:	62 17       	cp	r22, r18
 754:	73 07       	cpc	r23, r19
 756:	84 07       	cpc	r24, r20
 758:	ba 07       	cpc	r27, r26
 75a:	20 f0       	brcs	.+8      	; 0x764 <__divsf3_pse+0xaa>
 75c:	62 1b       	sub	r22, r18
 75e:	73 0b       	sbc	r23, r19
 760:	84 0b       	sbc	r24, r20
 762:	ba 0b       	sbc	r27, r26
 764:	ee 1f       	adc	r30, r30
 766:	88 f7       	brcc	.-30     	; 0x74a <__divsf3_pse+0x90>
 768:	e0 95       	com	r30
 76a:	08 95       	ret

0000076c <__fixsfsi>:
 76c:	04 d0       	rcall	.+8      	; 0x776 <__fixunssfsi>
 76e:	68 94       	set
 770:	b1 11       	cpse	r27, r1
 772:	b5 c0       	rjmp	.+362    	; 0x8de <__fp_szero>
 774:	08 95       	ret

00000776 <__fixunssfsi>:
 776:	98 d0       	rcall	.+304    	; 0x8a8 <__fp_splitA>
 778:	88 f0       	brcs	.+34     	; 0x79c <__fixunssfsi+0x26>
 77a:	9f 57       	subi	r25, 0x7F	; 127
 77c:	90 f0       	brcs	.+36     	; 0x7a2 <__fixunssfsi+0x2c>
 77e:	b9 2f       	mov	r27, r25
 780:	99 27       	eor	r25, r25
 782:	b7 51       	subi	r27, 0x17	; 23
 784:	a0 f0       	brcs	.+40     	; 0x7ae <__fixunssfsi+0x38>
 786:	d1 f0       	breq	.+52     	; 0x7bc <__fixunssfsi+0x46>
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	1a f0       	brmi	.+6      	; 0x798 <__fixunssfsi+0x22>
 792:	ba 95       	dec	r27
 794:	c9 f7       	brne	.-14     	; 0x788 <__fixunssfsi+0x12>
 796:	12 c0       	rjmp	.+36     	; 0x7bc <__fixunssfsi+0x46>
 798:	b1 30       	cpi	r27, 0x01	; 1
 79a:	81 f0       	breq	.+32     	; 0x7bc <__fixunssfsi+0x46>
 79c:	9f d0       	rcall	.+318    	; 0x8dc <__fp_zero>
 79e:	b1 e0       	ldi	r27, 0x01	; 1
 7a0:	08 95       	ret
 7a2:	9c c0       	rjmp	.+312    	; 0x8dc <__fp_zero>
 7a4:	67 2f       	mov	r22, r23
 7a6:	78 2f       	mov	r23, r24
 7a8:	88 27       	eor	r24, r24
 7aa:	b8 5f       	subi	r27, 0xF8	; 248
 7ac:	39 f0       	breq	.+14     	; 0x7bc <__fixunssfsi+0x46>
 7ae:	b9 3f       	cpi	r27, 0xF9	; 249
 7b0:	cc f3       	brlt	.-14     	; 0x7a4 <__fixunssfsi+0x2e>
 7b2:	86 95       	lsr	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b3 95       	inc	r27
 7ba:	d9 f7       	brne	.-10     	; 0x7b2 <__fixunssfsi+0x3c>
 7bc:	3e f4       	brtc	.+14     	; 0x7cc <__fixunssfsi+0x56>
 7be:	90 95       	com	r25
 7c0:	80 95       	com	r24
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	08 95       	ret

000007ce <__floatunsisf>:
 7ce:	e8 94       	clt
 7d0:	09 c0       	rjmp	.+18     	; 0x7e4 <__floatsisf+0x12>

000007d2 <__floatsisf>:
 7d2:	97 fb       	bst	r25, 7
 7d4:	3e f4       	brtc	.+14     	; 0x7e4 <__floatsisf+0x12>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	99 23       	and	r25, r25
 7e6:	a9 f0       	breq	.+42     	; 0x812 <__floatsisf+0x40>
 7e8:	f9 2f       	mov	r31, r25
 7ea:	96 e9       	ldi	r25, 0x96	; 150
 7ec:	bb 27       	eor	r27, r27
 7ee:	93 95       	inc	r25
 7f0:	f6 95       	lsr	r31
 7f2:	87 95       	ror	r24
 7f4:	77 95       	ror	r23
 7f6:	67 95       	ror	r22
 7f8:	b7 95       	ror	r27
 7fa:	f1 11       	cpse	r31, r1
 7fc:	f8 cf       	rjmp	.-16     	; 0x7ee <__floatsisf+0x1c>
 7fe:	fa f4       	brpl	.+62     	; 0x83e <__floatsisf+0x6c>
 800:	bb 0f       	add	r27, r27
 802:	11 f4       	brne	.+4      	; 0x808 <__floatsisf+0x36>
 804:	60 ff       	sbrs	r22, 0
 806:	1b c0       	rjmp	.+54     	; 0x83e <__floatsisf+0x6c>
 808:	6f 5f       	subi	r22, 0xFF	; 255
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	16 c0       	rjmp	.+44     	; 0x83e <__floatsisf+0x6c>
 812:	88 23       	and	r24, r24
 814:	11 f0       	breq	.+4      	; 0x81a <__floatsisf+0x48>
 816:	96 e9       	ldi	r25, 0x96	; 150
 818:	11 c0       	rjmp	.+34     	; 0x83c <__floatsisf+0x6a>
 81a:	77 23       	and	r23, r23
 81c:	21 f0       	breq	.+8      	; 0x826 <__floatsisf+0x54>
 81e:	9e e8       	ldi	r25, 0x8E	; 142
 820:	87 2f       	mov	r24, r23
 822:	76 2f       	mov	r23, r22
 824:	05 c0       	rjmp	.+10     	; 0x830 <__floatsisf+0x5e>
 826:	66 23       	and	r22, r22
 828:	71 f0       	breq	.+28     	; 0x846 <__floatsisf+0x74>
 82a:	96 e8       	ldi	r25, 0x86	; 134
 82c:	86 2f       	mov	r24, r22
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	2a f0       	brmi	.+10     	; 0x83e <__floatsisf+0x6c>
 834:	9a 95       	dec	r25
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	da f7       	brpl	.-10     	; 0x834 <__floatsisf+0x62>
 83e:	88 0f       	add	r24, r24
 840:	96 95       	lsr	r25
 842:	87 95       	ror	r24
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <__fp_inf>:
 848:	97 f9       	bld	r25, 7
 84a:	9f 67       	ori	r25, 0x7F	; 127
 84c:	80 e8       	ldi	r24, 0x80	; 128
 84e:	70 e0       	ldi	r23, 0x00	; 0
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	08 95       	ret

00000854 <__fp_nan>:
 854:	9f ef       	ldi	r25, 0xFF	; 255
 856:	80 ec       	ldi	r24, 0xC0	; 192
 858:	08 95       	ret

0000085a <__fp_pscA>:
 85a:	00 24       	eor	r0, r0
 85c:	0a 94       	dec	r0
 85e:	16 16       	cp	r1, r22
 860:	17 06       	cpc	r1, r23
 862:	18 06       	cpc	r1, r24
 864:	09 06       	cpc	r0, r25
 866:	08 95       	ret

00000868 <__fp_pscB>:
 868:	00 24       	eor	r0, r0
 86a:	0a 94       	dec	r0
 86c:	12 16       	cp	r1, r18
 86e:	13 06       	cpc	r1, r19
 870:	14 06       	cpc	r1, r20
 872:	05 06       	cpc	r0, r21
 874:	08 95       	ret

00000876 <__fp_round>:
 876:	09 2e       	mov	r0, r25
 878:	03 94       	inc	r0
 87a:	00 0c       	add	r0, r0
 87c:	11 f4       	brne	.+4      	; 0x882 <__fp_round+0xc>
 87e:	88 23       	and	r24, r24
 880:	52 f0       	brmi	.+20     	; 0x896 <__fp_round+0x20>
 882:	bb 0f       	add	r27, r27
 884:	40 f4       	brcc	.+16     	; 0x896 <__fp_round+0x20>
 886:	bf 2b       	or	r27, r31
 888:	11 f4       	brne	.+4      	; 0x88e <__fp_round+0x18>
 88a:	60 ff       	sbrs	r22, 0
 88c:	04 c0       	rjmp	.+8      	; 0x896 <__fp_round+0x20>
 88e:	6f 5f       	subi	r22, 0xFF	; 255
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	8f 4f       	sbci	r24, 0xFF	; 255
 894:	9f 4f       	sbci	r25, 0xFF	; 255
 896:	08 95       	ret

00000898 <__fp_split3>:
 898:	57 fd       	sbrc	r21, 7
 89a:	90 58       	subi	r25, 0x80	; 128
 89c:	44 0f       	add	r20, r20
 89e:	55 1f       	adc	r21, r21
 8a0:	59 f0       	breq	.+22     	; 0x8b8 <__fp_splitA+0x10>
 8a2:	5f 3f       	cpi	r21, 0xFF	; 255
 8a4:	71 f0       	breq	.+28     	; 0x8c2 <__fp_splitA+0x1a>
 8a6:	47 95       	ror	r20

000008a8 <__fp_splitA>:
 8a8:	88 0f       	add	r24, r24
 8aa:	97 fb       	bst	r25, 7
 8ac:	99 1f       	adc	r25, r25
 8ae:	61 f0       	breq	.+24     	; 0x8c8 <__fp_splitA+0x20>
 8b0:	9f 3f       	cpi	r25, 0xFF	; 255
 8b2:	79 f0       	breq	.+30     	; 0x8d2 <__fp_splitA+0x2a>
 8b4:	87 95       	ror	r24
 8b6:	08 95       	ret
 8b8:	12 16       	cp	r1, r18
 8ba:	13 06       	cpc	r1, r19
 8bc:	14 06       	cpc	r1, r20
 8be:	55 1f       	adc	r21, r21
 8c0:	f2 cf       	rjmp	.-28     	; 0x8a6 <__fp_split3+0xe>
 8c2:	46 95       	lsr	r20
 8c4:	f1 df       	rcall	.-30     	; 0x8a8 <__fp_splitA>
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__fp_splitA+0x30>
 8c8:	16 16       	cp	r1, r22
 8ca:	17 06       	cpc	r1, r23
 8cc:	18 06       	cpc	r1, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	f1 cf       	rjmp	.-30     	; 0x8b4 <__fp_splitA+0xc>
 8d2:	86 95       	lsr	r24
 8d4:	71 05       	cpc	r23, r1
 8d6:	61 05       	cpc	r22, r1
 8d8:	08 94       	sec
 8da:	08 95       	ret

000008dc <__fp_zero>:
 8dc:	e8 94       	clt

000008de <__fp_szero>:
 8de:	bb 27       	eor	r27, r27
 8e0:	66 27       	eor	r22, r22
 8e2:	77 27       	eor	r23, r23
 8e4:	cb 01       	movw	r24, r22
 8e6:	97 f9       	bld	r25, 7
 8e8:	08 95       	ret

000008ea <__mulsf3>:
 8ea:	0b d0       	rcall	.+22     	; 0x902 <__mulsf3x>
 8ec:	c4 cf       	rjmp	.-120    	; 0x876 <__fp_round>
 8ee:	b5 df       	rcall	.-150    	; 0x85a <__fp_pscA>
 8f0:	28 f0       	brcs	.+10     	; 0x8fc <__mulsf3+0x12>
 8f2:	ba df       	rcall	.-140    	; 0x868 <__fp_pscB>
 8f4:	18 f0       	brcs	.+6      	; 0x8fc <__mulsf3+0x12>
 8f6:	95 23       	and	r25, r21
 8f8:	09 f0       	breq	.+2      	; 0x8fc <__mulsf3+0x12>
 8fa:	a6 cf       	rjmp	.-180    	; 0x848 <__fp_inf>
 8fc:	ab cf       	rjmp	.-170    	; 0x854 <__fp_nan>
 8fe:	11 24       	eor	r1, r1
 900:	ee cf       	rjmp	.-36     	; 0x8de <__fp_szero>

00000902 <__mulsf3x>:
 902:	ca df       	rcall	.-108    	; 0x898 <__fp_split3>
 904:	a0 f3       	brcs	.-24     	; 0x8ee <__mulsf3+0x4>

00000906 <__mulsf3_pse>:
 906:	95 9f       	mul	r25, r21
 908:	d1 f3       	breq	.-12     	; 0x8fe <__mulsf3+0x14>
 90a:	95 0f       	add	r25, r21
 90c:	50 e0       	ldi	r21, 0x00	; 0
 90e:	55 1f       	adc	r21, r21
 910:	62 9f       	mul	r22, r18
 912:	f0 01       	movw	r30, r0
 914:	72 9f       	mul	r23, r18
 916:	bb 27       	eor	r27, r27
 918:	f0 0d       	add	r31, r0
 91a:	b1 1d       	adc	r27, r1
 91c:	63 9f       	mul	r22, r19
 91e:	aa 27       	eor	r26, r26
 920:	f0 0d       	add	r31, r0
 922:	b1 1d       	adc	r27, r1
 924:	aa 1f       	adc	r26, r26
 926:	64 9f       	mul	r22, r20
 928:	66 27       	eor	r22, r22
 92a:	b0 0d       	add	r27, r0
 92c:	a1 1d       	adc	r26, r1
 92e:	66 1f       	adc	r22, r22
 930:	82 9f       	mul	r24, r18
 932:	22 27       	eor	r18, r18
 934:	b0 0d       	add	r27, r0
 936:	a1 1d       	adc	r26, r1
 938:	62 1f       	adc	r22, r18
 93a:	73 9f       	mul	r23, r19
 93c:	b0 0d       	add	r27, r0
 93e:	a1 1d       	adc	r26, r1
 940:	62 1f       	adc	r22, r18
 942:	83 9f       	mul	r24, r19
 944:	a0 0d       	add	r26, r0
 946:	61 1d       	adc	r22, r1
 948:	22 1f       	adc	r18, r18
 94a:	74 9f       	mul	r23, r20
 94c:	33 27       	eor	r19, r19
 94e:	a0 0d       	add	r26, r0
 950:	61 1d       	adc	r22, r1
 952:	23 1f       	adc	r18, r19
 954:	84 9f       	mul	r24, r20
 956:	60 0d       	add	r22, r0
 958:	21 1d       	adc	r18, r1
 95a:	82 2f       	mov	r24, r18
 95c:	76 2f       	mov	r23, r22
 95e:	6a 2f       	mov	r22, r26
 960:	11 24       	eor	r1, r1
 962:	9f 57       	subi	r25, 0x7F	; 127
 964:	50 40       	sbci	r21, 0x00	; 0
 966:	8a f0       	brmi	.+34     	; 0x98a <__mulsf3_pse+0x84>
 968:	e1 f0       	breq	.+56     	; 0x9a2 <__mulsf3_pse+0x9c>
 96a:	88 23       	and	r24, r24
 96c:	4a f0       	brmi	.+18     	; 0x980 <__mulsf3_pse+0x7a>
 96e:	ee 0f       	add	r30, r30
 970:	ff 1f       	adc	r31, r31
 972:	bb 1f       	adc	r27, r27
 974:	66 1f       	adc	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	91 50       	subi	r25, 0x01	; 1
 97c:	50 40       	sbci	r21, 0x00	; 0
 97e:	a9 f7       	brne	.-22     	; 0x96a <__mulsf3_pse+0x64>
 980:	9e 3f       	cpi	r25, 0xFE	; 254
 982:	51 05       	cpc	r21, r1
 984:	70 f0       	brcs	.+28     	; 0x9a2 <__mulsf3_pse+0x9c>
 986:	60 cf       	rjmp	.-320    	; 0x848 <__fp_inf>
 988:	aa cf       	rjmp	.-172    	; 0x8de <__fp_szero>
 98a:	5f 3f       	cpi	r21, 0xFF	; 255
 98c:	ec f3       	brlt	.-6      	; 0x988 <__mulsf3_pse+0x82>
 98e:	98 3e       	cpi	r25, 0xE8	; 232
 990:	dc f3       	brlt	.-10     	; 0x988 <__mulsf3_pse+0x82>
 992:	86 95       	lsr	r24
 994:	77 95       	ror	r23
 996:	67 95       	ror	r22
 998:	b7 95       	ror	r27
 99a:	f7 95       	ror	r31
 99c:	e7 95       	ror	r30
 99e:	9f 5f       	subi	r25, 0xFF	; 255
 9a0:	c1 f7       	brne	.-16     	; 0x992 <__mulsf3_pse+0x8c>
 9a2:	fe 2b       	or	r31, r30
 9a4:	88 0f       	add	r24, r24
 9a6:	91 1d       	adc	r25, r1
 9a8:	96 95       	lsr	r25
 9aa:	87 95       	ror	r24
 9ac:	97 f9       	bld	r25, 7
 9ae:	08 95       	ret

000009b0 <pow>:
 9b0:	fa 01       	movw	r30, r20
 9b2:	ee 0f       	add	r30, r30
 9b4:	ff 1f       	adc	r31, r31
 9b6:	30 96       	adiw	r30, 0x00	; 0
 9b8:	21 05       	cpc	r18, r1
 9ba:	31 05       	cpc	r19, r1
 9bc:	99 f1       	breq	.+102    	; 0xa24 <pow+0x74>
 9be:	61 15       	cp	r22, r1
 9c0:	71 05       	cpc	r23, r1
 9c2:	61 f4       	brne	.+24     	; 0x9dc <pow+0x2c>
 9c4:	80 38       	cpi	r24, 0x80	; 128
 9c6:	bf e3       	ldi	r27, 0x3F	; 63
 9c8:	9b 07       	cpc	r25, r27
 9ca:	49 f1       	breq	.+82     	; 0xa1e <pow+0x6e>
 9cc:	68 94       	set
 9ce:	90 38       	cpi	r25, 0x80	; 128
 9d0:	81 05       	cpc	r24, r1
 9d2:	61 f0       	breq	.+24     	; 0x9ec <pow+0x3c>
 9d4:	80 38       	cpi	r24, 0x80	; 128
 9d6:	bf ef       	ldi	r27, 0xFF	; 255
 9d8:	9b 07       	cpc	r25, r27
 9da:	41 f0       	breq	.+16     	; 0x9ec <pow+0x3c>
 9dc:	99 23       	and	r25, r25
 9de:	42 f5       	brpl	.+80     	; 0xa30 <pow+0x80>
 9e0:	ff 3f       	cpi	r31, 0xFF	; 255
 9e2:	e1 05       	cpc	r30, r1
 9e4:	31 05       	cpc	r19, r1
 9e6:	21 05       	cpc	r18, r1
 9e8:	11 f1       	breq	.+68     	; 0xa2e <pow+0x7e>
 9ea:	e8 94       	clt
 9ec:	08 94       	sec
 9ee:	e7 95       	ror	r30
 9f0:	d9 01       	movw	r26, r18
 9f2:	aa 23       	and	r26, r26
 9f4:	29 f4       	brne	.+10     	; 0xa00 <pow+0x50>
 9f6:	ab 2f       	mov	r26, r27
 9f8:	be 2f       	mov	r27, r30
 9fa:	f8 5f       	subi	r31, 0xF8	; 248
 9fc:	d0 f3       	brcs	.-12     	; 0x9f2 <pow+0x42>
 9fe:	10 c0       	rjmp	.+32     	; 0xa20 <pow+0x70>
 a00:	ff 5f       	subi	r31, 0xFF	; 255
 a02:	70 f4       	brcc	.+28     	; 0xa20 <pow+0x70>
 a04:	a6 95       	lsr	r26
 a06:	e0 f7       	brcc	.-8      	; 0xa00 <pow+0x50>
 a08:	f7 39       	cpi	r31, 0x97	; 151
 a0a:	50 f0       	brcs	.+20     	; 0xa20 <pow+0x70>
 a0c:	19 f0       	breq	.+6      	; 0xa14 <pow+0x64>
 a0e:	ff 3a       	cpi	r31, 0xAF	; 175
 a10:	38 f4       	brcc	.+14     	; 0xa20 <pow+0x70>
 a12:	9f 77       	andi	r25, 0x7F	; 127
 a14:	9f 93       	push	r25
 a16:	0c d0       	rcall	.+24     	; 0xa30 <pow+0x80>
 a18:	0f 90       	pop	r0
 a1a:	07 fc       	sbrc	r0, 7
 a1c:	90 58       	subi	r25, 0x80	; 128
 a1e:	08 95       	ret
 a20:	3e f0       	brts	.+14     	; 0xa30 <pow+0x80>
 a22:	18 cf       	rjmp	.-464    	; 0x854 <__fp_nan>
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	70 e0       	ldi	r23, 0x00	; 0
 a28:	80 e8       	ldi	r24, 0x80	; 128
 a2a:	9f e3       	ldi	r25, 0x3F	; 63
 a2c:	08 95       	ret
 a2e:	4f e7       	ldi	r20, 0x7F	; 127
 a30:	9f 77       	andi	r25, 0x7F	; 127
 a32:	5f 93       	push	r21
 a34:	4f 93       	push	r20
 a36:	3f 93       	push	r19
 a38:	2f 93       	push	r18
 a3a:	9e d0       	rcall	.+316    	; 0xb78 <log>
 a3c:	2f 91       	pop	r18
 a3e:	3f 91       	pop	r19
 a40:	4f 91       	pop	r20
 a42:	5f 91       	pop	r21
 a44:	52 df       	rcall	.-348    	; 0x8ea <__mulsf3>
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <exp>
 a48:	19 f4       	brne	.+6      	; 0xa50 <pow+0xa0>
 a4a:	0e f0       	brts	.+2      	; 0xa4e <pow+0x9e>
 a4c:	fd ce       	rjmp	.-518    	; 0x848 <__fp_inf>
 a4e:	46 cf       	rjmp	.-372    	; 0x8dc <__fp_zero>
 a50:	01 cf       	rjmp	.-510    	; 0x854 <__fp_nan>

00000a52 <exp>:
 a52:	2a df       	rcall	.-428    	; 0x8a8 <__fp_splitA>
 a54:	c8 f3       	brcs	.-14     	; 0xa48 <pow+0x98>
 a56:	96 38       	cpi	r25, 0x86	; 134
 a58:	c0 f7       	brcc	.-16     	; 0xa4a <pow+0x9a>
 a5a:	07 f8       	bld	r0, 7
 a5c:	0f 92       	push	r0
 a5e:	e8 94       	clt
 a60:	2b e3       	ldi	r18, 0x3B	; 59
 a62:	3a ea       	ldi	r19, 0xAA	; 170
 a64:	48 eb       	ldi	r20, 0xB8	; 184
 a66:	5f e7       	ldi	r21, 0x7F	; 127
 a68:	4e df       	rcall	.-356    	; 0x906 <__mulsf3_pse>
 a6a:	0f 92       	push	r0
 a6c:	0f 92       	push	r0
 a6e:	0f 92       	push	r0
 a70:	4d b7       	in	r20, 0x3d	; 61
 a72:	5e b7       	in	r21, 0x3e	; 62
 a74:	0f 92       	push	r0
 a76:	c0 d0       	rcall	.+384    	; 0xbf8 <modf>
 a78:	ec e8       	ldi	r30, 0x8C	; 140
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	16 d0       	rcall	.+44     	; 0xaaa <__fp_powser>
 a7e:	4f 91       	pop	r20
 a80:	5f 91       	pop	r21
 a82:	ef 91       	pop	r30
 a84:	ff 91       	pop	r31
 a86:	e5 95       	asr	r30
 a88:	ee 1f       	adc	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	49 f0       	breq	.+18     	; 0xaa0 <exp+0x4e>
 a8e:	fe 57       	subi	r31, 0x7E	; 126
 a90:	e0 68       	ori	r30, 0x80	; 128
 a92:	44 27       	eor	r20, r20
 a94:	ee 0f       	add	r30, r30
 a96:	44 1f       	adc	r20, r20
 a98:	fa 95       	dec	r31
 a9a:	e1 f7       	brne	.-8      	; 0xa94 <exp+0x42>
 a9c:	41 95       	neg	r20
 a9e:	55 0b       	sbc	r21, r21
 aa0:	32 d0       	rcall	.+100    	; 0xb06 <ldexp>
 aa2:	0f 90       	pop	r0
 aa4:	07 fe       	sbrs	r0, 7
 aa6:	26 c0       	rjmp	.+76     	; 0xaf4 <inverse>
 aa8:	08 95       	ret

00000aaa <__fp_powser>:
 aaa:	df 93       	push	r29
 aac:	cf 93       	push	r28
 aae:	1f 93       	push	r17
 ab0:	0f 93       	push	r16
 ab2:	ff 92       	push	r15
 ab4:	ef 92       	push	r14
 ab6:	df 92       	push	r13
 ab8:	7b 01       	movw	r14, r22
 aba:	8c 01       	movw	r16, r24
 abc:	68 94       	set
 abe:	05 c0       	rjmp	.+10     	; 0xaca <__fp_powser+0x20>
 ac0:	da 2e       	mov	r13, r26
 ac2:	ef 01       	movw	r28, r30
 ac4:	1e df       	rcall	.-452    	; 0x902 <__mulsf3x>
 ac6:	fe 01       	movw	r30, r28
 ac8:	e8 94       	clt
 aca:	a5 91       	lpm	r26, Z+
 acc:	25 91       	lpm	r18, Z+
 ace:	35 91       	lpm	r19, Z+
 ad0:	45 91       	lpm	r20, Z+
 ad2:	55 91       	lpm	r21, Z+
 ad4:	ae f3       	brts	.-22     	; 0xac0 <__fp_powser+0x16>
 ad6:	ef 01       	movw	r28, r30
 ad8:	8e dd       	rcall	.-1252   	; 0x5f6 <__addsf3x>
 ada:	fe 01       	movw	r30, r28
 adc:	97 01       	movw	r18, r14
 ade:	a8 01       	movw	r20, r16
 ae0:	da 94       	dec	r13
 ae2:	79 f7       	brne	.-34     	; 0xac2 <__fp_powser+0x18>
 ae4:	df 90       	pop	r13
 ae6:	ef 90       	pop	r14
 ae8:	ff 90       	pop	r15
 aea:	0f 91       	pop	r16
 aec:	1f 91       	pop	r17
 aee:	cf 91       	pop	r28
 af0:	df 91       	pop	r29
 af2:	08 95       	ret

00000af4 <inverse>:
 af4:	9b 01       	movw	r18, r22
 af6:	ac 01       	movw	r20, r24
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	80 e8       	ldi	r24, 0x80	; 128
 afe:	9f e3       	ldi	r25, 0x3F	; 63
 b00:	cd cd       	rjmp	.-1126   	; 0x69c <__divsf3>
 b02:	a2 ce       	rjmp	.-700    	; 0x848 <__fp_inf>
 b04:	ac c0       	rjmp	.+344    	; 0xc5e <__fp_mpack>

00000b06 <ldexp>:
 b06:	d0 de       	rcall	.-608    	; 0x8a8 <__fp_splitA>
 b08:	e8 f3       	brcs	.-6      	; 0xb04 <inverse+0x10>
 b0a:	99 23       	and	r25, r25
 b0c:	d9 f3       	breq	.-10     	; 0xb04 <inverse+0x10>
 b0e:	94 0f       	add	r25, r20
 b10:	51 1d       	adc	r21, r1
 b12:	bb f3       	brvs	.-18     	; 0xb02 <inverse+0xe>
 b14:	91 50       	subi	r25, 0x01	; 1
 b16:	50 40       	sbci	r21, 0x00	; 0
 b18:	94 f0       	brlt	.+36     	; 0xb3e <ldexp+0x38>
 b1a:	59 f0       	breq	.+22     	; 0xb32 <ldexp+0x2c>
 b1c:	88 23       	and	r24, r24
 b1e:	32 f0       	brmi	.+12     	; 0xb2c <ldexp+0x26>
 b20:	66 0f       	add	r22, r22
 b22:	77 1f       	adc	r23, r23
 b24:	88 1f       	adc	r24, r24
 b26:	91 50       	subi	r25, 0x01	; 1
 b28:	50 40       	sbci	r21, 0x00	; 0
 b2a:	c1 f7       	brne	.-16     	; 0xb1c <ldexp+0x16>
 b2c:	9e 3f       	cpi	r25, 0xFE	; 254
 b2e:	51 05       	cpc	r21, r1
 b30:	44 f7       	brge	.-48     	; 0xb02 <inverse+0xe>
 b32:	88 0f       	add	r24, r24
 b34:	91 1d       	adc	r25, r1
 b36:	96 95       	lsr	r25
 b38:	87 95       	ror	r24
 b3a:	97 f9       	bld	r25, 7
 b3c:	08 95       	ret
 b3e:	5f 3f       	cpi	r21, 0xFF	; 255
 b40:	ac f0       	brlt	.+42     	; 0xb6c <ldexp+0x66>
 b42:	98 3e       	cpi	r25, 0xE8	; 232
 b44:	9c f0       	brlt	.+38     	; 0xb6c <ldexp+0x66>
 b46:	bb 27       	eor	r27, r27
 b48:	86 95       	lsr	r24
 b4a:	77 95       	ror	r23
 b4c:	67 95       	ror	r22
 b4e:	b7 95       	ror	r27
 b50:	08 f4       	brcc	.+2      	; 0xb54 <ldexp+0x4e>
 b52:	b1 60       	ori	r27, 0x01	; 1
 b54:	93 95       	inc	r25
 b56:	c1 f7       	brne	.-16     	; 0xb48 <ldexp+0x42>
 b58:	bb 0f       	add	r27, r27
 b5a:	58 f7       	brcc	.-42     	; 0xb32 <ldexp+0x2c>
 b5c:	11 f4       	brne	.+4      	; 0xb62 <ldexp+0x5c>
 b5e:	60 ff       	sbrs	r22, 0
 b60:	e8 cf       	rjmp	.-48     	; 0xb32 <ldexp+0x2c>
 b62:	6f 5f       	subi	r22, 0xFF	; 255
 b64:	7f 4f       	sbci	r23, 0xFF	; 255
 b66:	8f 4f       	sbci	r24, 0xFF	; 255
 b68:	9f 4f       	sbci	r25, 0xFF	; 255
 b6a:	e3 cf       	rjmp	.-58     	; 0xb32 <ldexp+0x2c>
 b6c:	b8 ce       	rjmp	.-656    	; 0x8de <__fp_szero>
 b6e:	0e f0       	brts	.+2      	; 0xb72 <ldexp+0x6c>
 b70:	76 c0       	rjmp	.+236    	; 0xc5e <__fp_mpack>
 b72:	70 ce       	rjmp	.-800    	; 0x854 <__fp_nan>
 b74:	68 94       	set
 b76:	68 ce       	rjmp	.-816    	; 0x848 <__fp_inf>

00000b78 <log>:
 b78:	97 de       	rcall	.-722    	; 0x8a8 <__fp_splitA>
 b7a:	c8 f3       	brcs	.-14     	; 0xb6e <ldexp+0x68>
 b7c:	99 23       	and	r25, r25
 b7e:	d1 f3       	breq	.-12     	; 0xb74 <ldexp+0x6e>
 b80:	c6 f3       	brts	.-16     	; 0xb72 <ldexp+0x6c>
 b82:	df 93       	push	r29
 b84:	cf 93       	push	r28
 b86:	1f 93       	push	r17
 b88:	0f 93       	push	r16
 b8a:	ff 92       	push	r15
 b8c:	c9 2f       	mov	r28, r25
 b8e:	dd 27       	eor	r29, r29
 b90:	88 23       	and	r24, r24
 b92:	2a f0       	brmi	.+10     	; 0xb9e <log+0x26>
 b94:	21 97       	sbiw	r28, 0x01	; 1
 b96:	66 0f       	add	r22, r22
 b98:	77 1f       	adc	r23, r23
 b9a:	88 1f       	adc	r24, r24
 b9c:	da f7       	brpl	.-10     	; 0xb94 <log+0x1c>
 b9e:	20 e0       	ldi	r18, 0x00	; 0
 ba0:	30 e0       	ldi	r19, 0x00	; 0
 ba2:	40 e8       	ldi	r20, 0x80	; 128
 ba4:	5f eb       	ldi	r21, 0xBF	; 191
 ba6:	9f e3       	ldi	r25, 0x3F	; 63
 ba8:	88 39       	cpi	r24, 0x98	; 152
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <log+0x3c>
 bac:	80 3e       	cpi	r24, 0xE0	; 224
 bae:	30 f0       	brcs	.+12     	; 0xbbc <log+0x44>
 bb0:	21 96       	adiw	r28, 0x01	; 1
 bb2:	8f 77       	andi	r24, 0x7F	; 127
 bb4:	0f dd       	rcall	.-1506   	; 0x5d4 <__addsf3>
 bb6:	e4 eb       	ldi	r30, 0xB4	; 180
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	03 c0       	rjmp	.+6      	; 0xbc2 <log+0x4a>
 bbc:	0b dd       	rcall	.-1514   	; 0x5d4 <__addsf3>
 bbe:	e1 ee       	ldi	r30, 0xE1	; 225
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	73 df       	rcall	.-282    	; 0xaaa <__fp_powser>
 bc4:	8b 01       	movw	r16, r22
 bc6:	be 01       	movw	r22, r28
 bc8:	ec 01       	movw	r28, r24
 bca:	fb 2e       	mov	r15, r27
 bcc:	6f 57       	subi	r22, 0x7F	; 127
 bce:	71 09       	sbc	r23, r1
 bd0:	75 95       	asr	r23
 bd2:	77 1f       	adc	r23, r23
 bd4:	88 0b       	sbc	r24, r24
 bd6:	99 0b       	sbc	r25, r25
 bd8:	fc dd       	rcall	.-1032   	; 0x7d2 <__floatsisf>
 bda:	28 e1       	ldi	r18, 0x18	; 24
 bdc:	32 e7       	ldi	r19, 0x72	; 114
 bde:	41 e3       	ldi	r20, 0x31	; 49
 be0:	5f e3       	ldi	r21, 0x3F	; 63
 be2:	8f de       	rcall	.-738    	; 0x902 <__mulsf3x>
 be4:	af 2d       	mov	r26, r15
 be6:	98 01       	movw	r18, r16
 be8:	ae 01       	movw	r20, r28
 bea:	ff 90       	pop	r15
 bec:	0f 91       	pop	r16
 bee:	1f 91       	pop	r17
 bf0:	cf 91       	pop	r28
 bf2:	df 91       	pop	r29
 bf4:	00 dd       	rcall	.-1536   	; 0x5f6 <__addsf3x>
 bf6:	3f ce       	rjmp	.-898    	; 0x876 <__fp_round>

00000bf8 <modf>:
 bf8:	fa 01       	movw	r30, r20
 bfa:	dc 01       	movw	r26, r24
 bfc:	aa 0f       	add	r26, r26
 bfe:	bb 1f       	adc	r27, r27
 c00:	9b 01       	movw	r18, r22
 c02:	ac 01       	movw	r20, r24
 c04:	bf 57       	subi	r27, 0x7F	; 127
 c06:	28 f4       	brcc	.+10     	; 0xc12 <modf+0x1a>
 c08:	22 27       	eor	r18, r18
 c0a:	33 27       	eor	r19, r19
 c0c:	44 27       	eor	r20, r20
 c0e:	50 78       	andi	r21, 0x80	; 128
 c10:	1f c0       	rjmp	.+62     	; 0xc50 <modf+0x58>
 c12:	b7 51       	subi	r27, 0x17	; 23
 c14:	88 f4       	brcc	.+34     	; 0xc38 <modf+0x40>
 c16:	ab 2f       	mov	r26, r27
 c18:	00 24       	eor	r0, r0
 c1a:	46 95       	lsr	r20
 c1c:	37 95       	ror	r19
 c1e:	27 95       	ror	r18
 c20:	01 1c       	adc	r0, r1
 c22:	a3 95       	inc	r26
 c24:	d2 f3       	brmi	.-12     	; 0xc1a <modf+0x22>
 c26:	00 20       	and	r0, r0
 c28:	69 f0       	breq	.+26     	; 0xc44 <modf+0x4c>
 c2a:	22 0f       	add	r18, r18
 c2c:	33 1f       	adc	r19, r19
 c2e:	44 1f       	adc	r20, r20
 c30:	b3 95       	inc	r27
 c32:	da f3       	brmi	.-10     	; 0xc2a <modf+0x32>
 c34:	0d d0       	rcall	.+26     	; 0xc50 <modf+0x58>
 c36:	cd cc       	rjmp	.-1638   	; 0x5d2 <__subsf3>
 c38:	61 30       	cpi	r22, 0x01	; 1
 c3a:	71 05       	cpc	r23, r1
 c3c:	a0 e8       	ldi	r26, 0x80	; 128
 c3e:	8a 07       	cpc	r24, r26
 c40:	b9 46       	sbci	r27, 0x69	; 105
 c42:	30 f4       	brcc	.+12     	; 0xc50 <modf+0x58>
 c44:	9b 01       	movw	r18, r22
 c46:	ac 01       	movw	r20, r24
 c48:	66 27       	eor	r22, r22
 c4a:	77 27       	eor	r23, r23
 c4c:	88 27       	eor	r24, r24
 c4e:	90 78       	andi	r25, 0x80	; 128
 c50:	30 96       	adiw	r30, 0x00	; 0
 c52:	21 f0       	breq	.+8      	; 0xc5c <modf+0x64>
 c54:	20 83       	st	Z, r18
 c56:	31 83       	std	Z+1, r19	; 0x01
 c58:	42 83       	std	Z+2, r20	; 0x02
 c5a:	53 83       	std	Z+3, r21	; 0x03
 c5c:	08 95       	ret

00000c5e <__fp_mpack>:
 c5e:	9f 3f       	cpi	r25, 0xFF	; 255
 c60:	31 f0       	breq	.+12     	; 0xc6e <__fp_mpack_finite+0xc>

00000c62 <__fp_mpack_finite>:
 c62:	91 50       	subi	r25, 0x01	; 1
 c64:	20 f4       	brcc	.+8      	; 0xc6e <__fp_mpack_finite+0xc>
 c66:	87 95       	ror	r24
 c68:	77 95       	ror	r23
 c6a:	67 95       	ror	r22
 c6c:	b7 95       	ror	r27
 c6e:	88 0f       	add	r24, r24
 c70:	91 1d       	adc	r25, r1
 c72:	96 95       	lsr	r25
 c74:	87 95       	ror	r24
 c76:	97 f9       	bld	r25, 7
 c78:	08 95       	ret

00000c7a <_exit>:
 c7a:	f8 94       	cli

00000c7c <__stop_program>:
 c7c:	ff cf       	rjmp	.-2      	; 0xc7c <__stop_program>
