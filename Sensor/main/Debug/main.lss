
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9d  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  00000d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f2  00000000  00000000  000015ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047d  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000137  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 31       	cpi	r26, 0x18	; 24
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	47 d0       	rcall	.+142    	; 0x138 <main>
  aa:	52 c0       	rjmp	.+164    	; 0x150 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init_reflex>:
int volt_to_dist(int digital_out)
{
	float volt = digital_out*5.1/1023;
	int distance = 27/pow(volt,1.15);
	return distance;
}
  ae:	81 b1       	in	r24, 0x01	; 1
  b0:	8f 61       	ori	r24, 0x1F	; 31
  b2:	81 b9       	out	0x01, r24	; 1
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ba:	8f ea       	ldi	r24, 0xAF	; 175
  bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  c0:	08 95       	ret

000000c2 <init_interrupt>:
  c2:	e9 e6       	ldi	r30, 0x69	; 105
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	80 83       	st	Z, r24
  cc:	8d b3       	in	r24, 0x1d	; 29
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8d bb       	out	0x1d, r24	; 29
  d2:	08 95       	ret

000000d4 <AD_convert>:


uint8_t AD_convert()
{
	ADCSRA |= (1 << ADSC);
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC))
  de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  e2:	86 fd       	sbrc	r24, 6
  e4:	fc cf       	rjmp	.-8      	; 0xde <AD_convert+0xa>
	{
	}
	
	uint8_t indata = ADCH;
  e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return indata;
}
  ea:	08 95       	ret

000000ec <read_reflex>:
int test = 0;



void read_reflex()
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	int i;
	uint8_t indata_digital = 0;
	int indata = 0;
	
	for(i = 0; i < 11; i++)
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	1b c0       	rjmp	.+54     	; 0x12c <read_reflex+0x40>
	{
		
		PORTA &= 0xF0;									// Nollställer de fyra sista bitarna i PORT A 
  f6:	82 b1       	in	r24, 0x02	; 2
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	82 b9       	out	0x02, r24	; 2
		PORTA |= i;										// Sätter Muxen till index i
  fc:	82 b1       	in	r24, 0x02	; 2
  fe:	8c 2b       	or	r24, r28
 100:	82 b9       	out	0x02, r24	; 2
		PORTA |= 0x10;									// Startar sensorn
 102:	82 b1       	in	r24, 0x02	; 2
 104:	80 61       	ori	r24, 0x10	; 16
 106:	82 b9       	out	0x02, r24	; 2
		
		indata_digital = AD_convert();
 108:	e5 df       	rcall	.-54     	; 0xd4 <AD_convert>
		PORTA &= 0xEF;									// Stänger av sensorn
 10a:	82 b1       	in	r24, 0x02	; 2
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	82 b9       	out	0x02, r24	; 2
	//	indata = indata_digitaconvert_uint8_t(indata_digital);
		
		sensorValues[i] = indata;
 110:	fe 01       	movw	r30, r28
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 5f       	subi	r30, 0xFE	; 254
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	11 82       	std	Z+1, r1	; 0x01
 11c:	10 82       	st	Z, r1
		
		test =2;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
{
	int i;
	uint8_t indata_digital = 0;
	int indata = 0;
	
	for(i = 0; i < 11; i++)
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	cb 30       	cpi	r28, 0x0B	; 11
 12e:	d1 05       	cpc	r29, r1
 130:	14 f3       	brlt	.-60     	; 0xf6 <read_reflex+0xa>
		test =2;
		
	}
	
//	return sensorValues;
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <main>:

int main()
{
	init_interrupt();
 138:	c4 df       	rcall	.-120    	; 0xc2 <init_interrupt>
	
	DDRD |= 0x04;
 13a:	8a b1       	in	r24, 0x0a	; 10
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 1;
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	81 70       	andi	r24, 0x01	; 1
 144:	8b b9       	out	0x0b, r24	; 11
		
		//		init_gyro();
		// READ GYRO
		// SEND GYRO
		
		init_reflex();
 146:	78 94       	sei
		read_reflex();
 148:	b2 df       	rcall	.-156    	; 0xae <init_reflex>
 14a:	d0 df       	rcall	.-96     	; 0xec <read_reflex>
		read_reflex();
 14c:	cf df       	rcall	.-98     	; 0xec <read_reflex>
 14e:	fc cf       	rjmp	.-8      	; 0x148 <main+0x10>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
