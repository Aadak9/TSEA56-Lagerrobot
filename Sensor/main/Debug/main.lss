
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000cec  00000d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080015a  0080015a  00000dda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110d  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0a  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f1  00000000  00000000  00002b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000635  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000792  00000000  00000000  00003ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000465f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	2f c2       	rjmp	.+1118   	; 0x494 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c2       	rjmp	.+1178   	; 0x4e8 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 35       	cpi	r26, 0x5A	; 90
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e5       	ldi	r26, 0x5A	; 90
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 36       	cpi	r26, 0x68	; 104
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ab d1       	rcall	.+854    	; 0x41a <main>
  c4:	11 c6       	rjmp	.+3106   	; 0xce8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <AD_convert>:
#include <avr/interrupt.h>
#include <math.h>
#include "convert.h"

uint8_t AD_convert()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	cli();
  d2:	f8 94       	cli
	volatile uint8_t indata_t = 0;
  d4:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |= (1 << ADSC);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC))											// Wait until AD convert is done.
  e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  e4:	86 fd       	sbrc	r24, 6
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <AD_convert+0x18>
	{
	}
	
	sei();
  e8:	78 94       	sei
	return indata_t = ADCH;
  ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ee:	89 83       	std	Y+1, r24	; 0x01
}
  f0:	0f 90       	pop	r0
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <digital_to_volt>:


float digital_to_volt(int digital_out)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	00 d0       	rcall	.+0      	; 0xfe <digital_to_volt+0x6>
  fe:	00 d0       	rcall	.+0      	; 0x100 <digital_to_volt+0x8>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
	volatile float volt_convert = digital_out*5.1/255.0;				// 5.1 is measured voltage.
 104:	bc 01       	movw	r22, r24
 106:	99 0f       	add	r25, r25
 108:	88 0b       	sbc	r24, r24
 10a:	99 0b       	sbc	r25, r25
 10c:	af d4       	rcall	.+2398   	; 0xa6c <__floatsisf>
 10e:	23 e3       	ldi	r18, 0x33	; 51
 110:	33 e3       	ldi	r19, 0x33	; 51
 112:	43 ea       	ldi	r20, 0xA3	; 163
 114:	50 e4       	ldi	r21, 0x40	; 64
 116:	5e d5       	rcall	.+2748   	; 0xbd4 <__mulsf3>
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	4f e7       	ldi	r20, 0x7F	; 127
 11e:	53 e4       	ldi	r21, 0x43	; 67
 120:	0a d4       	rcall	.+2068   	; 0x936 <__divsf3>
 122:	69 83       	std	Y+1, r22	; 0x01
 124:	7a 83       	std	Y+2, r23	; 0x02
 126:	8b 83       	std	Y+3, r24	; 0x03
 128:	9c 83       	std	Y+4, r25	; 0x04
	return volt_convert;
 12a:	69 81       	ldd	r22, Y+1	; 0x01
 12c:	7a 81       	ldd	r23, Y+2	; 0x02
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	9c 81       	ldd	r25, Y+4	; 0x04
}
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <is_active_reflex>:


int is_active_reflex(int reflex_high)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	00 d0       	rcall	.+0      	; 0x14a <is_active_reflex+0xa>
 14a:	1f 92       	push	r1
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	8c 01       	movw	r16, r24
	volatile uint8_t indata_t = AD_convert();					
 152:	ba df       	rcall	.-140    	; 0xc8 <AD_convert>
 154:	89 83       	std	Y+1, r24	; 0x01
	volatile int indata_volt = digital_to_volt(indata_t);
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ce df       	rcall	.-100    	; 0xf8 <digital_to_volt>
 15c:	54 d4       	rcall	.+2216   	; 0xa06 <__fixsfsi>
 15e:	7b 83       	std	Y+3, r23	; 0x03
 160:	6a 83       	std	Y+2, r22	; 0x02
	
	if (indata_volt >= reflex_high) {									// If voltage from line sensor is  higher than reference value for tape => return 1.																
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	9b 81       	ldd	r25, Y+3	; 0x03
 166:	80 17       	cp	r24, r16
 168:	91 07       	cpc	r25, r17
 16a:	1c f0       	brlt	.+6      	; 0x172 <is_active_reflex+0x32>
		return 1;										
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <is_active_reflex+0x36>
	} else {
		return 0;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <linear_interpolation>:


int linear_interpolation(int indata)
{
 186:	2f 92       	push	r2
 188:	3f 92       	push	r3
 18a:	4f 92       	push	r4
 18c:	5f 92       	push	r5
 18e:	6f 92       	push	r6
 190:	7f 92       	push	r7
 192:	8f 92       	push	r8
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	ca 55       	subi	r28, 0x5A	; 90
 1b0:	d1 09       	sbc	r29, r1
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
	int distances[] = {10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80};									// Distance from data sheet.
 1bc:	2e e1       	ldi	r18, 0x1E	; 30
 1be:	e0 e0       	ldi	r30, 0x00	; 0
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	de 01       	movw	r26, r28
 1c4:	11 96       	adiw	r26, 0x01	; 1
 1c6:	01 90       	ld	r0, Z+
 1c8:	0d 92       	st	X+, r0
 1ca:	2a 95       	dec	r18
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <linear_interpolation+0x40>
	float voltages[] = {2.3, 1.65, 1.3, 0.98 , 0.9, 0.85, 0.73, 0.68, 0.6, 0.56, 0.5, 0.48, 0.45, 0.43, 0.4};		// Voltage from data sheet.
 1ce:	2c e3       	ldi	r18, 0x3C	; 60
 1d0:	ee e1       	ldi	r30, 0x1E	; 30
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	de 01       	movw	r26, r28
 1d6:	5f 96       	adiw	r26, 0x1f	; 31
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	2a 95       	dec	r18
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <linear_interpolation+0x52>
	
	float voltage = digital_to_volt(indata);
 1e0:	8b df       	rcall	.-234    	; 0xf8 <digital_to_volt>
 1e2:	4b 01       	movw	r8, r22
 1e4:	5c 01       	movw	r10, r24
	
	for (int i = 0; i < 14; i++)
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	73 c0       	rjmp	.+230    	; 0x2d2 <linear_interpolation+0x14c>
	{
		if (voltage <= voltages[i] && voltage >= voltages[i+1])
 1ec:	f8 01       	movw	r30, r16
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	8c 0f       	add	r24, r28
 1fc:	9d 1f       	adc	r25, r29
 1fe:	e8 0f       	add	r30, r24
 200:	f9 1f       	adc	r31, r25
 202:	c6 8c       	ldd	r12, Z+30	; 0x1e
 204:	d7 8c       	ldd	r13, Z+31	; 0x1f
 206:	e0 a0       	ldd	r14, Z+32	; 0x20
 208:	f1 a0       	ldd	r15, Z+33	; 0x21
 20a:	a7 01       	movw	r20, r14
 20c:	96 01       	movw	r18, r12
 20e:	c5 01       	movw	r24, r10
 210:	b4 01       	movw	r22, r8
 212:	8d d3       	rcall	.+1818   	; 0x92e <__cmpsf2>
 214:	18 16       	cp	r1, r24
 216:	0c f4       	brge	.+2      	; 0x21a <linear_interpolation+0x94>
 218:	5a c0       	rjmp	.+180    	; 0x2ce <linear_interpolation+0x148>
 21a:	18 01       	movw	r2, r16
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	29 1a       	sub	r2, r25
 220:	39 0a       	sbc	r3, r25
 222:	f1 01       	movw	r30, r2
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	8c 0f       	add	r24, r28
 232:	9d 1f       	adc	r25, r29
 234:	e8 0f       	add	r30, r24
 236:	f9 1f       	adc	r31, r25
 238:	46 8c       	ldd	r4, Z+30	; 0x1e
 23a:	57 8c       	ldd	r5, Z+31	; 0x1f
 23c:	60 a0       	ldd	r6, Z+32	; 0x20
 23e:	71 a0       	ldd	r7, Z+33	; 0x21
 240:	a3 01       	movw	r20, r6
 242:	92 01       	movw	r18, r4
 244:	c5 01       	movw	r24, r10
 246:	b4 01       	movw	r22, r8
 248:	c1 d4       	rcall	.+2434   	; 0xbcc <__gesf2>
 24a:	88 23       	and	r24, r24
 24c:	0c f4       	brge	.+2      	; 0x250 <linear_interpolation+0xca>
 24e:	3f c0       	rjmp	.+126    	; 0x2ce <linear_interpolation+0x148>
		{
			return distances[i] + (voltage - voltages[i]) * (distances[i+1] - distances[i]) / (voltages[i+1] - voltages[i]);
 250:	00 0f       	add	r16, r16
 252:	11 1f       	adc	r17, r17
 254:	e1 e0       	ldi	r30, 0x01	; 1
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	ec 0f       	add	r30, r28
 25a:	fd 1f       	adc	r31, r29
 25c:	e0 0f       	add	r30, r16
 25e:	f1 1f       	adc	r31, r17
 260:	00 81       	ld	r16, Z
 262:	11 81       	ldd	r17, Z+1	; 0x01
 264:	a7 01       	movw	r20, r14
 266:	96 01       	movw	r18, r12
 268:	c5 01       	movw	r24, r10
 26a:	b4 01       	movw	r22, r8
 26c:	fb d2       	rcall	.+1526   	; 0x864 <__subsf3>
 26e:	4b 01       	movw	r8, r22
 270:	5c 01       	movw	r10, r24
 272:	22 0c       	add	r2, r2
 274:	33 1c       	adc	r3, r3
 276:	e1 e0       	ldi	r30, 0x01	; 1
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	e2 0d       	add	r30, r2
 280:	f3 1d       	adc	r31, r3
 282:	60 81       	ld	r22, Z
 284:	71 81       	ldd	r23, Z+1	; 0x01
 286:	60 1b       	sub	r22, r16
 288:	71 0b       	sbc	r23, r17
 28a:	07 2e       	mov	r0, r23
 28c:	00 0c       	add	r0, r0
 28e:	88 0b       	sbc	r24, r24
 290:	99 0b       	sbc	r25, r25
 292:	ec d3       	rcall	.+2008   	; 0xa6c <__floatsisf>
 294:	a5 01       	movw	r20, r10
 296:	94 01       	movw	r18, r8
 298:	9d d4       	rcall	.+2362   	; 0xbd4 <__mulsf3>
 29a:	4b 01       	movw	r8, r22
 29c:	5c 01       	movw	r10, r24
 29e:	a7 01       	movw	r20, r14
 2a0:	96 01       	movw	r18, r12
 2a2:	c3 01       	movw	r24, r6
 2a4:	b2 01       	movw	r22, r4
 2a6:	de d2       	rcall	.+1468   	; 0x864 <__subsf3>
 2a8:	9b 01       	movw	r18, r22
 2aa:	ac 01       	movw	r20, r24
 2ac:	c5 01       	movw	r24, r10
 2ae:	b4 01       	movw	r22, r8
 2b0:	42 d3       	rcall	.+1668   	; 0x936 <__divsf3>
 2b2:	6b 01       	movw	r12, r22
 2b4:	7c 01       	movw	r14, r24
 2b6:	b8 01       	movw	r22, r16
 2b8:	11 0f       	add	r17, r17
 2ba:	88 0b       	sbc	r24, r24
 2bc:	99 0b       	sbc	r25, r25
 2be:	d6 d3       	rcall	.+1964   	; 0xa6c <__floatsisf>
 2c0:	a7 01       	movw	r20, r14
 2c2:	96 01       	movw	r18, r12
 2c4:	d0 d2       	rcall	.+1440   	; 0x866 <__addsf3>
 2c6:	9f d3       	rcall	.+1854   	; 0xa06 <__fixsfsi>
 2c8:	26 2f       	mov	r18, r22
 2ca:	97 2f       	mov	r25, r23
 2cc:	1e c0       	rjmp	.+60     	; 0x30a <linear_interpolation+0x184>
	int distances[] = {10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80};									// Distance from data sheet.
	float voltages[] = {2.3, 1.65, 1.3, 0.98 , 0.9, 0.85, 0.73, 0.68, 0.6, 0.56, 0.5, 0.48, 0.45, 0.43, 0.4};		// Voltage from data sheet.
	
	float voltage = digital_to_volt(indata);
	
	for (int i = 0; i < 14; i++)
 2ce:	0f 5f       	subi	r16, 0xFF	; 255
 2d0:	1f 4f       	sbci	r17, 0xFF	; 255
 2d2:	0e 30       	cpi	r16, 0x0E	; 14
 2d4:	11 05       	cpc	r17, r1
 2d6:	0c f4       	brge	.+2      	; 0x2da <linear_interpolation+0x154>
		if (voltage <= voltages[i] && voltage >= voltages[i+1])
		{
			return distances[i] + (voltage - voltages[i]) * (distances[i+1] - distances[i]) / (voltages[i+1] - voltages[i]);
		}
	}
	if (voltage > voltages[0])
 2d8:	89 cf       	rjmp	.-238    	; 0x1ec <linear_interpolation+0x66>
 2da:	23 e3       	ldi	r18, 0x33	; 51
 2dc:	33 e3       	ldi	r19, 0x33	; 51
 2de:	43 e1       	ldi	r20, 0x13	; 19
 2e0:	50 e4       	ldi	r21, 0x40	; 64
 2e2:	c5 01       	movw	r24, r10
 2e4:	b4 01       	movw	r22, r8
 2e6:	72 d4       	rcall	.+2276   	; 0xbcc <__gesf2>
 2e8:	18 16       	cp	r1, r24
	{
		return  distances[0];
	}
	if (voltage < voltages[14])
 2ea:	54 f0       	brlt	.+20     	; 0x300 <linear_interpolation+0x17a>
 2ec:	2d ec       	ldi	r18, 0xCD	; 205
 2ee:	3c ec       	ldi	r19, 0xCC	; 204
 2f0:	4c ec       	ldi	r20, 0xCC	; 204
 2f2:	5e e3       	ldi	r21, 0x3E	; 62
 2f4:	c5 01       	movw	r24, r10
 2f6:	b4 01       	movw	r22, r8
 2f8:	1a d3       	rcall	.+1588   	; 0x92e <__cmpsf2>
 2fa:	88 23       	and	r24, r24
 2fc:	24 f0       	brlt	.+8      	; 0x306 <linear_interpolation+0x180>
	{
		return distances[14];
	}	
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <linear_interpolation+0x186>
			return distances[i] + (voltage - voltages[i]) * (distances[i+1] - distances[i]) / (voltages[i+1] - voltages[i]);
		}
	}
	if (voltage > voltages[0])
	{
		return  distances[0];
 300:	2a e0       	ldi	r18, 0x0A	; 10
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <linear_interpolation+0x184>
	}
	if (voltage < voltages[14])
	{
		return distances[14];
 306:	20 e5       	ldi	r18, 0x50	; 80
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	82 2f       	mov	r24, r18
	}	
 30c:	c6 5a       	subi	r28, 0xA6	; 166
 30e:	df 4f       	sbci	r29, 0xFF	; 255
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	bf 90       	pop	r11
 32c:	af 90       	pop	r10
 32e:	9f 90       	pop	r9
 330:	8f 90       	pop	r8
 332:	7f 90       	pop	r7
 334:	6f 90       	pop	r6
 336:	5f 90       	pop	r5
 338:	4f 90       	pop	r4
 33a:	3f 90       	pop	r3
 33c:	2f 90       	pop	r2
 33e:	08 95       	ret

00000340 <init_IR>:


void init_interrupt()
{
	EICRA |=(1<<ISC01)|(1<<ISC00);																	// Interrupt on rising edge.
	EIMSK |= (1<<INT0);																				// ACtivate INT0.
 340:	86 e2       	ldi	r24, 0x26	; 38
 342:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 346:	87 e8       	ldi	r24, 0x87	; 135
 348:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 34c:	08 95       	ret

0000034e <init_gyro>:
 34e:	87 e2       	ldi	r24, 0x27	; 39
 350:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 354:	87 e8       	ldi	r24, 0x87	; 135
 356:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 35a:	08 95       	ret

0000035c <init_line_front>:
 35c:	81 b1       	in	r24, 0x01	; 1
 35e:	8f 60       	ori	r24, 0x0F	; 15
 360:	81 b9       	out	0x01, r24	; 1
 362:	8a b1       	in	r24, 0x0a	; 10
 364:	80 62       	ori	r24, 0x20	; 32
 366:	8a b9       	out	0x0a, r24	; 10
 368:	85 e2       	ldi	r24, 0x25	; 37
 36a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 36e:	87 e8       	ldi	r24, 0x87	; 135
 370:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 374:	08 95       	ret

00000376 <init_line_back>:
 376:	8a b1       	in	r24, 0x0a	; 10
 378:	8f 61       	ori	r24, 0x1F	; 31
 37a:	8a b9       	out	0x0a, r24	; 10
 37c:	84 e2       	ldi	r24, 0x24	; 36
 37e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 382:	87 e8       	ldi	r24, 0x87	; 135
 384:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 388:	08 95       	ret

0000038a <init_SPI>:


void init_SPI()
{
	
	DDRB = (1 << DDB6);																				// Pin 7 (MISO) to output.
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPIE) | (1 << SPE) | (0 << DORD) | (0 << CPOL) | (0 << CPHA);						// Activate SPI-buss.
 38e:	80 ec       	ldi	r24, 0xC0	; 192
 390:	8c bd       	out	0x2c, r24	; 44
 392:	08 95       	ret

00000394 <init_timer>:
}


void init_timer()
{
	TCCR1B = (1 << WGM12);		// CTC-mode.
 394:	88 e0       	ldi	r24, 0x08	; 8
 396:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1 << OCIE1A);		// Timer 1 Compare A match.
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0;					// Timer start on 0.
 3a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3a4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 2499;				// Interrupt when TCNT1 has counted up to OCR1A, 10ms.
 3a8:	83 ec       	ldi	r24, 0xC3	; 195
 3aa:	99 e0       	ldi	r25, 0x09	; 9
 3ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3b4:	08 95       	ret

000003b6 <init_reflex_calibrate>:
}


int init_reflex_calibrate()
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	PORTA &= 0xF0;									// Resets the four LSB bits in PORT A.
 3c0:	82 b1       	in	r24, 0x02	; 2
 3c2:	80 7f       	andi	r24, 0xF0	; 240
 3c4:	82 b9       	out	0x02, r24	; 2
	PORTA |= 2;										// Set multiplexer to index 2. 2 is arbitrary.
 3c6:	82 b1       	in	r24, 0x02	; 2
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	82 b9       	out	0x02, r24	; 2
	PORTA |= 0x10;									// Start sensor.
 3cc:	82 b1       	in	r24, 0x02	; 2
 3ce:	80 61       	ori	r24, 0x10	; 16
 3d0:	82 b9       	out	0x02, r24	; 2
	
	is_active_reflex(3);							// Read but throwaway result.
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	b4 de       	rcall	.-664    	; 0x140 <is_active_reflex>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	8a e6       	ldi	r24, 0x6A	; 106
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <init_reflex_calibrate+0x24>
	 _delay_us(20);									// First read gives faulty value.
	
	volatile uint8_t indata_t = AD_convert();
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <init_reflex_calibrate+0x2a>
 3e0:	73 de       	rcall	.-794    	; 0xc8 <AD_convert>
 3e2:	89 83       	std	Y+1, r24	; 0x01
	
	PORTA &= 0xEF;									// Turn off sensor.
 3e4:	82 b1       	in	r24, 0x02	; 2
 3e6:	8f 7e       	andi	r24, 0xEF	; 239
 3e8:	82 b9       	out	0x02, r24	; 2
	
	if (indata_t >= 200)							// Calibrate line sensor for what tape.
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	88 3c       	cpi	r24, 0xC8	; 200
 3ee:	48 f4       	brcc	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		return 4;
	}
	else if (indata_t >= 140)
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	8c 38       	cpi	r24, 0x8C	; 140
 3f4:	48 f4       	brcc	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		return 3;
	}
	else if (indata_t >= 100)
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	84 36       	cpi	r24, 0x64	; 100
 3fa:	48 f0       	brcs	.+18     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		return 2;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 c0       	rjmp	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	
	PORTA &= 0xEF;									// Turn off sensor.
	
	if (indata_t >= 200)							// Calibrate line sensor for what tape.
	{
		return 4;
 402:	84 e0       	ldi	r24, 0x04	; 4
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	05 c0       	rjmp	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	}
	else if (indata_t >= 140)
	{
		return 3;
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		return 2;
	}
	else
	{
		return 1;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
	}
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <main>:
volatile int reflex_high;


int main()
{
	IR_send = 0;
 41a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <IR_send>
	gyro_send = 0;
 41e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <gyro_send>
	line_front_send = 0;
 422:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <line_front_send>
	line_back_send = 0;
 426:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <line_back_send>
	line_front = 0;
 42a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <line_front>
	roadmark_send = 0;
 42e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
	reflex_high = 3;
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <reflex_high+0x1>
 43a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <reflex_high>
	TCCR1B &= ~(1 << CS11) | (1 << CS10);				// Turn off timer and gyro.		
 43e:	e1 e8       	ldi	r30, 0x81	; 129
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	8d 7f       	andi	r24, 0xFD	; 253
 446:	80 83       	st	Z, r24
	reset_w();
 448:	08 d2       	rcall	.+1040   	; 0x85a <reset_w>
	
//	init_interrupt();
	init_SPI();
 44a:	9f df       	rcall	.-194    	; 0x38a <init_SPI>
	init_timer();
 44c:	a3 df       	rcall	.-186    	; 0x394 <init_timer>
	
	sei();
 44e:	78 94       	sei
	
//	TCCR1B |= (1 << CS11) | (1 << CS10);
	
	while (1)
	{
		init_IR();
 450:	77 df       	rcall	.-274    	; 0x340 <init_IR>
		IR_send = read_IR();
 452:	a0 d1       	rcall	.+832    	; 0x794 <read_IR>
 454:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <IR_send>
 458:	81 df       	rcall	.-254    	; 0x35c <init_line_front>

		init_line_front();
 45a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <reflex_high>
		line_front = read_line_front(reflex_high);
 45e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <reflex_high+0x1>
 462:	b2 d0       	rcall	.+356    	; 0x5c8 <read_line_front>
 464:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <line_front>
 468:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <line_front>
		
		roadmark_send = line_front >> 6;					// Roadmark bits to the right.
 46c:	86 fb       	bst	r24, 6
 46e:	88 0f       	add	r24, r24
 470:	88 0b       	sbc	r24, r24
 472:	80 f9       	bld	r24, 0
 474:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 478:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <line_front>
		line_front_send = line_front & (0x3F);				// MSB to 0. 
 47c:	8f 73       	andi	r24, 0x3F	; 63
 47e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <line_front_send>

		init_line_back();
 482:	79 df       	rcall	.-270    	; 0x376 <init_line_back>
 484:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <reflex_high>
		line_back_send = read_line_back(reflex_high);
 488:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <reflex_high+0x1>
 48c:	21 d1       	rcall	.+578    	; 0x6d0 <read_line_back>
 48e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <line_back_send>
 492:	de cf       	rjmp	.-68     	; 0x450 <main+0x36>

00000494 <__vector_13>:
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
	}
}

// Interrupt for gyro when robot is turning.
ISR(TIMER1_COMPA_vect)
{
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	0b b6       	in	r0, 0x3b	; 59
 4a0:	0f 92       	push	r0
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
 4b2:	af 93       	push	r26
 4b4:	bf 93       	push	r27
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
	init_gyro();
 4ba:	49 df       	rcall	.-366    	; 0x34e <init_gyro>
	gyro_send = read_gyro();
 4bc:	80 d1       	rcall	.+768    	; 0x7be <read_gyro>
 4be:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <gyro_send>
 4c2:	ff 91       	pop	r31
}
 4c4:	ef 91       	pop	r30
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	0f 90       	pop	r0
 4dc:	0b be       	out	0x3b, r0	; 59
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <__vector_19>:
 4e8:	1f 92       	push	r1

// Interrupt for SPI-interrupt. Choose sensor comes from Raspberry PI.
ISR(SPI_STC_vect)
{
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	0b b6       	in	r0, 0x3b	; 59
 4f4:	0f 92       	push	r0
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	1f 92       	push	r1
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile choose_sensor = SPDR;
 518:	8e b5       	in	r24, 0x2e	; 46
 51a:	89 83       	std	Y+1, r24	; 0x01
	
	if(choose_sensor == 0) {
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	81 11       	cpse	r24, r1
 520:	04 c0       	rjmp	.+8      	; 0x52a <__vector_19+0x42>
		SPDR = IR_send;
 522:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <IR_send>
 526:	8e bd       	out	0x2e, r24	; 46
 528:	39 c0       	rjmp	.+114    	; 0x59c <__vector_19+0xb4>
	} 
	else if(choose_sensor == 1) 
 52a:	89 81       	ldd	r24, Y+1	; 0x01
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	21 f4       	brne	.+8      	; 0x538 <__vector_19+0x50>
	{
		SPDR = line_front_send;
 530:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <line_front_send>
 534:	8e bd       	out	0x2e, r24	; 46
 536:	32 c0       	rjmp	.+100    	; 0x59c <__vector_19+0xb4>
	}
	else if(choose_sensor == 2) 
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	82 30       	cpi	r24, 0x02	; 2
 53c:	21 f4       	brne	.+8      	; 0x546 <__vector_19+0x5e>
	{
		SPDR = line_back_send;
 53e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <line_back_send>
 542:	8e bd       	out	0x2e, r24	; 46
 544:	2b c0       	rjmp	.+86     	; 0x59c <__vector_19+0xb4>
	}
	else if(choose_sensor == 3) 
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	83 30       	cpi	r24, 0x03	; 3
 54a:	31 f4       	brne	.+12     	; 0x558 <__vector_19+0x70>
	{
		TCCR1B |= (1 << CS11) | (1 << CS10);			// Start timer and gyro.
 54c:	e1 e8       	ldi	r30, 0x81	; 129
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	83 60       	ori	r24, 0x03	; 3
 554:	80 83       	st	Z, r24
 556:	22 c0       	rjmp	.+68     	; 0x59c <__vector_19+0xb4>
	} 
	else if(choose_sensor == 4) 
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	84 30       	cpi	r24, 0x04	; 4
 55c:	49 f4       	brne	.+18     	; 0x570 <__vector_19+0x88>
	{
		cli();
 55e:	f8 94       	cli
		TCCR1B &= ~(1 << CS11) | (1 << CS10);			// Turn off timer and gyro.
 560:	e1 e8       	ldi	r30, 0x81	; 129
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	8d 7f       	andi	r24, 0xFD	; 253
 568:	80 83       	st	Z, r24
		reset_w();
 56a:	77 d1       	rcall	.+750    	; 0x85a <reset_w>
		sei();
 56c:	78 94       	sei
 56e:	16 c0       	rjmp	.+44     	; 0x59c <__vector_19+0xb4>
	} 
	else if(choose_sensor == 5)							// On the Raspberry PI, check for 80 which is 90 degrees or 160 which is 180 degrees.
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	85 30       	cpi	r24, 0x05	; 5
 574:	21 f4       	brne	.+8      	; 0x57e <__vector_19+0x96>
	{
		SPDR = gyro_send;
 576:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gyro_send>
 57a:	8e bd       	out	0x2e, r24	; 46
 57c:	0f c0       	rjmp	.+30     	; 0x59c <__vector_19+0xb4>
	} 
	else if(choose_sensor == 6) 
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	86 30       	cpi	r24, 0x06	; 6
 582:	21 f4       	brne	.+8      	; 0x58c <__vector_19+0xa4>
	{
		SPDR = roadmark_send;							// Roadmark is in the form of 0b000000LR. L = left, R = right.
 584:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
 588:	8e bd       	out	0x2e, r24	; 46
 58a:	08 c0       	rjmp	.+16     	; 0x59c <__vector_19+0xb4>
	}
	else if(choose_sensor == 7)
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	87 30       	cpi	r24, 0x07	; 7
	{
		reflex_high = init_reflex_calibrate();
 590:	29 f4       	brne	.+10     	; 0x59c <__vector_19+0xb4>
 592:	11 df       	rcall	.-478    	; 0x3b6 <init_reflex_calibrate>
 594:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <reflex_high+0x1>
 598:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <reflex_high>
	}
 59c:	0f 90       	pop	r0
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0b be       	out	0x3b, r0	; 59
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <read_line_front>:

volatile int w_int;
volatile int w_send;

int8_t read_line_front(int reflex_high)
{
 5c8:	ef 92       	push	r14
 5ca:	ff 92       	push	r15
 5cc:	0f 93       	push	r16
 5ce:	1f 93       	push	r17
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	2c 97       	sbiw	r28, 0x0c	; 12
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	f8 94       	cli
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	cd bf       	out	0x3d, r28	; 61
 5e4:	7c 01       	movw	r14, r24
	int i;
	volatile int8_t data;
	volatile uint8_t indata = 0;
 5e6:	1a 82       	std	Y+2, r1	; 0x02
	volatile int sum = 0;
 5e8:	1c 82       	std	Y+4, r1	; 0x04
 5ea:	1b 82       	std	Y+3, r1	; 0x03
	volatile int sum_index = 0;
 5ec:	1e 82       	std	Y+6, r1	; 0x06
 5ee:	1d 82       	std	Y+5, r1	; 0x05
	volatile int roadmarkLeft = 0;
 5f0:	18 86       	std	Y+8, r1	; 0x08
 5f2:	1f 82       	std	Y+7, r1	; 0x07
	volatile int roadmarkRight = 0;
 5f4:	1a 86       	std	Y+10, r1	; 0x0a
 5f6:	19 86       	std	Y+9, r1	; 0x09
	volatile int pivot = 0;	
 5f8:	1c 86       	std	Y+12, r1	; 0x0c
 5fa:	1b 86       	std	Y+11, r1	; 0x0b
	
	for(i = 1; i < 12; i++)
 5fc:	01 e0       	ldi	r16, 0x01	; 1
 5fe:	10 e0       	ldi	r17, 0x00	; 0
 600:	38 c0       	rjmp	.+112    	; 0x672 <read_line_front+0xaa>
	{
		PORTA &= 0xF0;														// Resets the 4 LSB bits in PORT A.
 602:	82 b1       	in	r24, 0x02	; 2
 604:	80 7f       	andi	r24, 0xF0	; 240
 606:	82 b9       	out	0x02, r24	; 2
		PORTA |= i;															// Set multiplexer to index i.
 608:	82 b1       	in	r24, 0x02	; 2
 60a:	80 2b       	or	r24, r16
 60c:	82 b9       	out	0x02, r24	; 2
		PORTD |= 0x20;														// Start sensor.
 60e:	8b b1       	in	r24, 0x0b	; 11
 610:	80 62       	ori	r24, 0x20	; 32
 612:	8b b9       	out	0x0b, r24	; 11
		

		indata = is_active_reflex(reflex_high);								// 1 if current sensor sees tape, 0 otherwise.
 614:	c7 01       	movw	r24, r14
 616:	94 dd       	rcall	.-1240   	; 0x140 <is_active_reflex>
 618:	8a 83       	std	Y+2, r24	; 0x02
		PORTD &= 0xDF;														// Turn off sensor.
 61a:	8b b1       	in	r24, 0x0b	; 11
 61c:	8f 7d       	andi	r24, 0xDF	; 223
 61e:	8b b9       	out	0x0b, r24	; 11
		
		sum += indata;									
 620:	2a 81       	ldd	r18, Y+2	; 0x02
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	9c 81       	ldd	r25, Y+4	; 0x04
 626:	82 0f       	add	r24, r18
 628:	91 1d       	adc	r25, r1
 62a:	9c 83       	std	Y+4, r25	; 0x04
 62c:	8b 83       	std	Y+3, r24	; 0x03
		sum_index += (i)*indata;
 62e:	8a 81       	ldd	r24, Y+2	; 0x02
 630:	80 9f       	mul	r24, r16
 632:	90 01       	movw	r18, r0
 634:	81 9f       	mul	r24, r17
 636:	30 0d       	add	r19, r0
 638:	11 24       	eor	r1, r1
 63a:	8d 81       	ldd	r24, Y+5	; 0x05
 63c:	9e 81       	ldd	r25, Y+6	; 0x06
 63e:	82 0f       	add	r24, r18
 640:	93 1f       	adc	r25, r19
 642:	9e 83       	std	Y+6, r25	; 0x06
 644:	8d 83       	std	Y+5, r24	; 0x05

		if ((i == 1) && (indata == 1)) {									// Sees left turn.
 646:	01 30       	cpi	r16, 0x01	; 1
 648:	11 05       	cpc	r17, r1
 64a:	39 f4       	brne	.+14     	; 0x65a <read_line_front+0x92>
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	21 f4       	brne	.+8      	; 0x65a <read_line_front+0x92>
			roadmarkLeft = 1;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	98 87       	std	Y+8, r25	; 0x08
 658:	8f 83       	std	Y+7, r24	; 0x07
		}
		if ((i == 11) && (indata == 1)) {									// Sees right turn.
 65a:	0b 30       	cpi	r16, 0x0B	; 11
 65c:	11 05       	cpc	r17, r1
 65e:	39 f4       	brne	.+14     	; 0x66e <read_line_front+0xa6>
 660:	8a 81       	ldd	r24, Y+2	; 0x02
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	21 f4       	brne	.+8      	; 0x66e <read_line_front+0xa6>
			roadmarkRight = 1;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	9a 87       	std	Y+10, r25	; 0x0a
 66c:	89 87       	std	Y+9, r24	; 0x09
	volatile int sum_index = 0;
	volatile int roadmarkLeft = 0;
	volatile int roadmarkRight = 0;
	volatile int pivot = 0;	
	
	for(i = 1; i < 12; i++)
 66e:	0f 5f       	subi	r16, 0xFF	; 255
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	0c 30       	cpi	r16, 0x0C	; 12
 674:	11 05       	cpc	r17, r1
 676:	2c f2       	brlt	.-118    	; 0x602 <read_line_front+0x3a>
		if ((i == 11) && (indata == 1)) {									// Sees right turn.
			roadmarkRight = 1;
		}
	}

	if (sum == 0)															// Sees no tape.
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	9c 81       	ldd	r25, Y+4	; 0x04
 67c:	89 2b       	or	r24, r25
 67e:	29 f4       	brne	.+10     	; 0x68a <read_line_front+0xc2>
	{
		pivot = 12;
 680:	8c e0       	ldi	r24, 0x0C	; 12
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	9c 87       	std	Y+12, r25	; 0x0c
 686:	8b 87       	std	Y+11, r24	; 0x0b
 688:	09 c0       	rjmp	.+18     	; 0x69c <read_line_front+0xd4>
	} else {
		pivot = (sum_index*2)/sum;											// Center of mass calculation, multiply with 2 to get decimals.
 68a:	8d 81       	ldd	r24, Y+5	; 0x05
 68c:	9e 81       	ldd	r25, Y+6	; 0x06
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	6b 81       	ldd	r22, Y+3	; 0x03
 694:	7c 81       	ldd	r23, Y+4	; 0x04
 696:	01 d3       	rcall	.+1538   	; 0xc9a <__divmodhi4>
 698:	7c 87       	std	Y+12, r23	; 0x0c
 69a:	6b 87       	std	Y+11, r22	; 0x0b
	}

	return data = (int8_t)(pivot + roadmarkLeft*128 + roadmarkRight*64);	// Center of mass calculation on bit 0-6, 7 bit for right turn, 8 bit for left turn.
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	29 85       	ldd	r18, Y+9	; 0x09
 6a2:	3a 85       	ldd	r19, Y+10	; 0x0a
 6a4:	4f 81       	ldd	r20, Y+7	; 0x07
 6a6:	58 85       	ldd	r21, Y+8	; 0x08
 6a8:	44 0f       	add	r20, r20
 6aa:	24 0f       	add	r18, r20
 6ac:	30 e4       	ldi	r19, 0x40	; 64
 6ae:	23 9f       	mul	r18, r19
 6b0:	80 0d       	add	r24, r0
 6b2:	11 24       	eor	r1, r1
 6b4:	89 83       	std	Y+1, r24	; 0x01
}
 6b6:	2c 96       	adiw	r28, 0x0c	; 12
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	08 95       	ret

000006d0 <read_line_back>:

int8_t read_line_back(int reflex_high)
{
 6d0:	ef 92       	push	r14
 6d2:	ff 92       	push	r15
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	28 97       	sbiw	r28, 0x08	; 8
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	7c 01       	movw	r14, r24
	int i;
	volatile int8_t data;
	volatile uint8_t indata = 0;
 6ee:	1a 82       	std	Y+2, r1	; 0x02
	volatile int sum = 0;
 6f0:	1c 82       	std	Y+4, r1	; 0x04
 6f2:	1b 82       	std	Y+3, r1	; 0x03
	volatile int sum_index = 0;
 6f4:	1e 82       	std	Y+6, r1	; 0x06
 6f6:	1d 82       	std	Y+5, r1	; 0x05
	volatile int pivot = 0;	
 6f8:	18 86       	std	Y+8, r1	; 0x08
 6fa:	1f 82       	std	Y+7, r1	; 0x07
	
	for(i = 1; i < 12; i++)
 6fc:	01 e0       	ldi	r16, 0x01	; 1
 6fe:	10 e0       	ldi	r17, 0x00	; 0
 700:	24 c0       	rjmp	.+72     	; 0x74a <read_line_back+0x7a>
	{
		PORTD &= 0xF0;														// Resets the 4 LSB bits in PORT A.
 702:	8b b1       	in	r24, 0x0b	; 11
 704:	80 7f       	andi	r24, 0xF0	; 240
 706:	8b b9       	out	0x0b, r24	; 11
		PORTD |= i;															// Set multiplexer to index i.
 708:	8b b1       	in	r24, 0x0b	; 11
 70a:	80 2b       	or	r24, r16
 70c:	8b b9       	out	0x0b, r24	; 11
		PORTD |= 0x10;														// Start sensor.
 70e:	8b b1       	in	r24, 0x0b	; 11
 710:	80 61       	ori	r24, 0x10	; 16
 712:	8b b9       	out	0x0b, r24	; 11
		

		indata = is_active_reflex(reflex_high);								// 1 if current sensor sees tape, 0 otherwise.
 714:	c7 01       	movw	r24, r14
 716:	14 dd       	rcall	.-1496   	; 0x140 <is_active_reflex>
 718:	8a 83       	std	Y+2, r24	; 0x02
		PORTD &= 0xEF;														// Turn off sensor.
 71a:	8b b1       	in	r24, 0x0b	; 11
 71c:	8f 7e       	andi	r24, 0xEF	; 239
 71e:	8b b9       	out	0x0b, r24	; 11
		
		sum += indata;									
 720:	2a 81       	ldd	r18, Y+2	; 0x02
 722:	8b 81       	ldd	r24, Y+3	; 0x03
 724:	9c 81       	ldd	r25, Y+4	; 0x04
 726:	82 0f       	add	r24, r18
 728:	91 1d       	adc	r25, r1
 72a:	9c 83       	std	Y+4, r25	; 0x04
 72c:	8b 83       	std	Y+3, r24	; 0x03
		sum_index += (i)*indata;
 72e:	8a 81       	ldd	r24, Y+2	; 0x02
 730:	80 9f       	mul	r24, r16
 732:	90 01       	movw	r18, r0
 734:	81 9f       	mul	r24, r17
 736:	30 0d       	add	r19, r0
 738:	11 24       	eor	r1, r1
 73a:	8d 81       	ldd	r24, Y+5	; 0x05
 73c:	9e 81       	ldd	r25, Y+6	; 0x06
 73e:	82 0f       	add	r24, r18
 740:	93 1f       	adc	r25, r19
 742:	9e 83       	std	Y+6, r25	; 0x06
 744:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint8_t indata = 0;
	volatile int sum = 0;
	volatile int sum_index = 0;
	volatile int pivot = 0;	
	
	for(i = 1; i < 12; i++)
 746:	0f 5f       	subi	r16, 0xFF	; 255
 748:	1f 4f       	sbci	r17, 0xFF	; 255
 74a:	0c 30       	cpi	r16, 0x0C	; 12
 74c:	11 05       	cpc	r17, r1
 74e:	cc f2       	brlt	.-78     	; 0x702 <read_line_back+0x32>
		
		sum += indata;									
		sum_index += (i)*indata;
	}

	if (sum == 0)															// Sees no tape.
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	9c 81       	ldd	r25, Y+4	; 0x04
 754:	89 2b       	or	r24, r25
 756:	29 f4       	brne	.+10     	; 0x762 <read_line_back+0x92>
	{
		pivot = 12;
 758:	8c e0       	ldi	r24, 0x0C	; 12
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	98 87       	std	Y+8, r25	; 0x08
 75e:	8f 83       	std	Y+7, r24	; 0x07
 760:	09 c0       	rjmp	.+18     	; 0x774 <read_line_back+0xa4>
	} else {
		pivot = (sum_index*2)/sum;											// Center of mass calculation, multiply with 2 to get decimals.
 762:	8d 81       	ldd	r24, Y+5	; 0x05
 764:	9e 81       	ldd	r25, Y+6	; 0x06
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	6b 81       	ldd	r22, Y+3	; 0x03
 76c:	7c 81       	ldd	r23, Y+4	; 0x04
 76e:	95 d2       	rcall	.+1322   	; 0xc9a <__divmodhi4>
 770:	78 87       	std	Y+8, r23	; 0x08
 772:	6f 83       	std	Y+7, r22	; 0x07
	}

	return data = (int8_t)(pivot);											// Center of mass calculation 
 774:	8f 81       	ldd	r24, Y+7	; 0x07
 776:	98 85       	ldd	r25, Y+8	; 0x08
 778:	89 83       	std	Y+1, r24	; 0x01
}
 77a:	28 96       	adiw	r28, 0x08	; 8
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	f8 94       	cli
 780:	de bf       	out	0x3e, r29	; 62
 782:	0f be       	out	0x3f, r0	; 63
 784:	cd bf       	out	0x3d, r28	; 61
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	ff 90       	pop	r15
 790:	ef 90       	pop	r14
 792:	08 95       	ret

00000794 <read_IR>:

uint8_t read_IR()
{	
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	00 d0       	rcall	.+0      	; 0x79a <read_IR+0x6>
 79a:	1f 92       	push	r1
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t indata_t = AD_convert();
 7a0:	93 dc       	rcall	.-1754   	; 0xc8 <AD_convert>
 7a2:	89 83       	std	Y+1, r24	; 0x01
	volatile int distance_cm = linear_interpolation(indata_t);
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	ee dc       	rcall	.-1572   	; 0x186 <linear_interpolation>
 7aa:	9b 83       	std	Y+3, r25	; 0x03
 7ac:	8a 83       	std	Y+2, r24	; 0x02
	return (uint8_t)distance_cm;
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	9b 81       	ldd	r25, Y+3	; 0x03
}
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	08 95       	ret

000007be <read_gyro>:


int8_t read_gyro()
{		
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	00 d0       	rcall	.+0      	; 0x7c4 <read_gyro+0x6>
 7c4:	00 d0       	rcall	.+0      	; 0x7c6 <read_gyro+0x8>
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
	volatile int8_t indata = AD_convert() - 124;							// 129 is digital voltage with 0 rotation.
 7ca:	7e dc       	rcall	.-1796   	; 0xc8 <AD_convert>
 7cc:	8c 57       	subi	r24, 0x7C	; 124
 7ce:	89 83       	std	Y+1, r24	; 0x01
	w_int += indata*9;														// Looses the two MSB, multiply with 4.
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	08 2e       	mov	r0, r24
 7d4:	00 0c       	add	r0, r0
 7d6:	99 0b       	sbc	r25, r25
 7d8:	9c 01       	movw	r18, r24
 7da:	22 0f       	add	r18, r18
 7dc:	33 1f       	adc	r19, r19
 7de:	22 0f       	add	r18, r18
 7e0:	33 1f       	adc	r19, r19
 7e2:	22 0f       	add	r18, r18
 7e4:	33 1f       	adc	r19, r19
 7e6:	82 0f       	add	r24, r18
 7e8:	93 1f       	adc	r25, r19
 7ea:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <w_int>
 7ee:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <w_int+0x1>
 7f2:	82 0f       	add	r24, r18
 7f4:	93 1f       	adc	r25, r19
 7f6:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <w_int+0x1>
 7fa:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <w_int>
	w_send = w_int/100;														// Absolute value to avoid negative numbers over bus, divide by 100 since the value is big.
 7fe:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <w_int>
 802:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <w_int+0x1>
 806:	64 e6       	ldi	r22, 0x64	; 100
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	47 d2       	rcall	.+1166   	; 0xc9a <__divmodhi4>
 80c:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <w_send+0x1>
 810:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <w_send>
 	
	 if (w_send >= 125){													// Prevents integer overflow.
 814:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <w_send>
 818:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <w_send+0x1>
 81c:	8d 37       	cpi	r24, 0x7D	; 125
 81e:	91 05       	cpc	r25, r1
 820:	24 f0       	brlt	.+8      	; 0x82a <read_gyro+0x6c>
		 volatile int8_t w = (int8_t)0x7F;
 822:	8f e7       	ldi	r24, 0x7F	; 127
 824:	8c 83       	std	Y+4, r24	; 0x04
		 return w;
 826:	8c 81       	ldd	r24, Y+4	; 0x04
 828:	11 c0       	rjmp	.+34     	; 0x84c <read_gyro+0x8e>
	 } else if (w_send <= -125) {
 82a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <w_send>
 82e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <w_send+0x1>
 832:	84 38       	cpi	r24, 0x84	; 132
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	24 f4       	brge	.+8      	; 0x840 <read_gyro+0x82>
		 volatile int8_t w = (int8_t)0x80;
 838:	80 e8       	ldi	r24, 0x80	; 128
 83a:	8b 83       	std	Y+3, r24	; 0x03
		 return w;
 83c:	8b 81       	ldd	r24, Y+3	; 0x03
 83e:	06 c0       	rjmp	.+12     	; 0x84c <read_gyro+0x8e>
	 } else {
		 volatile int8_t w = (int8_t)w_send;
 840:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <w_send>
 844:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <w_send+0x1>
 848:	8a 83       	std	Y+2, r24	; 0x02
		 return w;
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
	 }
}
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	08 95       	ret

0000085a <reset_w>:


void reset_w()
{
	w_int = 0;																// Resets w_int after gyro is done.
 85a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <w_int+0x1>
 85e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <w_int>
 862:	08 95       	ret

00000864 <__subsf3>:
 864:	50 58       	subi	r21, 0x80	; 128

00000866 <__addsf3>:
 866:	bb 27       	eor	r27, r27
 868:	aa 27       	eor	r26, r26
 86a:	0e d0       	rcall	.+28     	; 0x888 <__addsf3x>
 86c:	75 c1       	rjmp	.+746    	; 0xb58 <__fp_round>
 86e:	66 d1       	rcall	.+716    	; 0xb3c <__fp_pscA>
 870:	30 f0       	brcs	.+12     	; 0x87e <__addsf3+0x18>
 872:	6b d1       	rcall	.+726    	; 0xb4a <__fp_pscB>
 874:	20 f0       	brcs	.+8      	; 0x87e <__addsf3+0x18>
 876:	31 f4       	brne	.+12     	; 0x884 <__addsf3+0x1e>
 878:	9f 3f       	cpi	r25, 0xFF	; 255
 87a:	11 f4       	brne	.+4      	; 0x880 <__addsf3+0x1a>
 87c:	1e f4       	brtc	.+6      	; 0x884 <__addsf3+0x1e>
 87e:	5b c1       	rjmp	.+694    	; 0xb36 <__fp_nan>
 880:	0e f4       	brtc	.+2      	; 0x884 <__addsf3+0x1e>
 882:	e0 95       	com	r30
 884:	e7 fb       	bst	r30, 7
 886:	51 c1       	rjmp	.+674    	; 0xb2a <__fp_inf>

00000888 <__addsf3x>:
 888:	e9 2f       	mov	r30, r25
 88a:	77 d1       	rcall	.+750    	; 0xb7a <__fp_split3>
 88c:	80 f3       	brcs	.-32     	; 0x86e <__addsf3+0x8>
 88e:	ba 17       	cp	r27, r26
 890:	62 07       	cpc	r22, r18
 892:	73 07       	cpc	r23, r19
 894:	84 07       	cpc	r24, r20
 896:	95 07       	cpc	r25, r21
 898:	18 f0       	brcs	.+6      	; 0x8a0 <__addsf3x+0x18>
 89a:	71 f4       	brne	.+28     	; 0x8b8 <__addsf3x+0x30>
 89c:	9e f5       	brtc	.+102    	; 0x904 <__addsf3x+0x7c>
 89e:	8f c1       	rjmp	.+798    	; 0xbbe <__fp_zero>
 8a0:	0e f4       	brtc	.+2      	; 0x8a4 <__addsf3x+0x1c>
 8a2:	e0 95       	com	r30
 8a4:	0b 2e       	mov	r0, r27
 8a6:	ba 2f       	mov	r27, r26
 8a8:	a0 2d       	mov	r26, r0
 8aa:	0b 01       	movw	r0, r22
 8ac:	b9 01       	movw	r22, r18
 8ae:	90 01       	movw	r18, r0
 8b0:	0c 01       	movw	r0, r24
 8b2:	ca 01       	movw	r24, r20
 8b4:	a0 01       	movw	r20, r0
 8b6:	11 24       	eor	r1, r1
 8b8:	ff 27       	eor	r31, r31
 8ba:	59 1b       	sub	r21, r25
 8bc:	99 f0       	breq	.+38     	; 0x8e4 <__addsf3x+0x5c>
 8be:	59 3f       	cpi	r21, 0xF9	; 249
 8c0:	50 f4       	brcc	.+20     	; 0x8d6 <__addsf3x+0x4e>
 8c2:	50 3e       	cpi	r21, 0xE0	; 224
 8c4:	68 f1       	brcs	.+90     	; 0x920 <__addsf3x+0x98>
 8c6:	1a 16       	cp	r1, r26
 8c8:	f0 40       	sbci	r31, 0x00	; 0
 8ca:	a2 2f       	mov	r26, r18
 8cc:	23 2f       	mov	r18, r19
 8ce:	34 2f       	mov	r19, r20
 8d0:	44 27       	eor	r20, r20
 8d2:	58 5f       	subi	r21, 0xF8	; 248
 8d4:	f3 cf       	rjmp	.-26     	; 0x8bc <__addsf3x+0x34>
 8d6:	46 95       	lsr	r20
 8d8:	37 95       	ror	r19
 8da:	27 95       	ror	r18
 8dc:	a7 95       	ror	r26
 8de:	f0 40       	sbci	r31, 0x00	; 0
 8e0:	53 95       	inc	r21
 8e2:	c9 f7       	brne	.-14     	; 0x8d6 <__addsf3x+0x4e>
 8e4:	7e f4       	brtc	.+30     	; 0x904 <__addsf3x+0x7c>
 8e6:	1f 16       	cp	r1, r31
 8e8:	ba 0b       	sbc	r27, r26
 8ea:	62 0b       	sbc	r22, r18
 8ec:	73 0b       	sbc	r23, r19
 8ee:	84 0b       	sbc	r24, r20
 8f0:	ba f0       	brmi	.+46     	; 0x920 <__addsf3x+0x98>
 8f2:	91 50       	subi	r25, 0x01	; 1
 8f4:	a1 f0       	breq	.+40     	; 0x91e <__addsf3x+0x96>
 8f6:	ff 0f       	add	r31, r31
 8f8:	bb 1f       	adc	r27, r27
 8fa:	66 1f       	adc	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	c2 f7       	brpl	.-16     	; 0x8f2 <__addsf3x+0x6a>
 902:	0e c0       	rjmp	.+28     	; 0x920 <__addsf3x+0x98>
 904:	ba 0f       	add	r27, r26
 906:	62 1f       	adc	r22, r18
 908:	73 1f       	adc	r23, r19
 90a:	84 1f       	adc	r24, r20
 90c:	48 f4       	brcc	.+18     	; 0x920 <__addsf3x+0x98>
 90e:	87 95       	ror	r24
 910:	77 95       	ror	r23
 912:	67 95       	ror	r22
 914:	b7 95       	ror	r27
 916:	f7 95       	ror	r31
 918:	9e 3f       	cpi	r25, 0xFE	; 254
 91a:	08 f0       	brcs	.+2      	; 0x91e <__addsf3x+0x96>
 91c:	b3 cf       	rjmp	.-154    	; 0x884 <__addsf3+0x1e>
 91e:	93 95       	inc	r25
 920:	88 0f       	add	r24, r24
 922:	08 f0       	brcs	.+2      	; 0x926 <__addsf3x+0x9e>
 924:	99 27       	eor	r25, r25
 926:	ee 0f       	add	r30, r30
 928:	97 95       	ror	r25
 92a:	87 95       	ror	r24
 92c:	08 95       	ret

0000092e <__cmpsf2>:
 92e:	d9 d0       	rcall	.+434    	; 0xae2 <__fp_cmp>
 930:	08 f4       	brcc	.+2      	; 0x934 <__cmpsf2+0x6>
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	08 95       	ret

00000936 <__divsf3>:
 936:	0c d0       	rcall	.+24     	; 0x950 <__divsf3x>
 938:	0f c1       	rjmp	.+542    	; 0xb58 <__fp_round>
 93a:	07 d1       	rcall	.+526    	; 0xb4a <__fp_pscB>
 93c:	40 f0       	brcs	.+16     	; 0x94e <__divsf3+0x18>
 93e:	fe d0       	rcall	.+508    	; 0xb3c <__fp_pscA>
 940:	30 f0       	brcs	.+12     	; 0x94e <__divsf3+0x18>
 942:	21 f4       	brne	.+8      	; 0x94c <__divsf3+0x16>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	19 f0       	breq	.+6      	; 0x94e <__divsf3+0x18>
 948:	f0 c0       	rjmp	.+480    	; 0xb2a <__fp_inf>
 94a:	51 11       	cpse	r21, r1
 94c:	39 c1       	rjmp	.+626    	; 0xbc0 <__fp_szero>
 94e:	f3 c0       	rjmp	.+486    	; 0xb36 <__fp_nan>

00000950 <__divsf3x>:
 950:	14 d1       	rcall	.+552    	; 0xb7a <__fp_split3>
 952:	98 f3       	brcs	.-26     	; 0x93a <__divsf3+0x4>

00000954 <__divsf3_pse>:
 954:	99 23       	and	r25, r25
 956:	c9 f3       	breq	.-14     	; 0x94a <__divsf3+0x14>
 958:	55 23       	and	r21, r21
 95a:	b1 f3       	breq	.-20     	; 0x948 <__divsf3+0x12>
 95c:	95 1b       	sub	r25, r21
 95e:	55 0b       	sbc	r21, r21
 960:	bb 27       	eor	r27, r27
 962:	aa 27       	eor	r26, r26
 964:	62 17       	cp	r22, r18
 966:	73 07       	cpc	r23, r19
 968:	84 07       	cpc	r24, r20
 96a:	38 f0       	brcs	.+14     	; 0x97a <__divsf3_pse+0x26>
 96c:	9f 5f       	subi	r25, 0xFF	; 255
 96e:	5f 4f       	sbci	r21, 0xFF	; 255
 970:	22 0f       	add	r18, r18
 972:	33 1f       	adc	r19, r19
 974:	44 1f       	adc	r20, r20
 976:	aa 1f       	adc	r26, r26
 978:	a9 f3       	breq	.-22     	; 0x964 <__divsf3_pse+0x10>
 97a:	33 d0       	rcall	.+102    	; 0x9e2 <__divsf3_pse+0x8e>
 97c:	0e 2e       	mov	r0, r30
 97e:	3a f0       	brmi	.+14     	; 0x98e <__divsf3_pse+0x3a>
 980:	e0 e8       	ldi	r30, 0x80	; 128
 982:	30 d0       	rcall	.+96     	; 0x9e4 <__divsf3_pse+0x90>
 984:	91 50       	subi	r25, 0x01	; 1
 986:	50 40       	sbci	r21, 0x00	; 0
 988:	e6 95       	lsr	r30
 98a:	00 1c       	adc	r0, r0
 98c:	ca f7       	brpl	.-14     	; 0x980 <__divsf3_pse+0x2c>
 98e:	29 d0       	rcall	.+82     	; 0x9e2 <__divsf3_pse+0x8e>
 990:	fe 2f       	mov	r31, r30
 992:	27 d0       	rcall	.+78     	; 0x9e2 <__divsf3_pse+0x8e>
 994:	66 0f       	add	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	bb 1f       	adc	r27, r27
 99c:	26 17       	cp	r18, r22
 99e:	37 07       	cpc	r19, r23
 9a0:	48 07       	cpc	r20, r24
 9a2:	ab 07       	cpc	r26, r27
 9a4:	b0 e8       	ldi	r27, 0x80	; 128
 9a6:	09 f0       	breq	.+2      	; 0x9aa <__divsf3_pse+0x56>
 9a8:	bb 0b       	sbc	r27, r27
 9aa:	80 2d       	mov	r24, r0
 9ac:	bf 01       	movw	r22, r30
 9ae:	ff 27       	eor	r31, r31
 9b0:	93 58       	subi	r25, 0x83	; 131
 9b2:	5f 4f       	sbci	r21, 0xFF	; 255
 9b4:	2a f0       	brmi	.+10     	; 0x9c0 <__divsf3_pse+0x6c>
 9b6:	9e 3f       	cpi	r25, 0xFE	; 254
 9b8:	51 05       	cpc	r21, r1
 9ba:	68 f0       	brcs	.+26     	; 0x9d6 <__divsf3_pse+0x82>
 9bc:	b6 c0       	rjmp	.+364    	; 0xb2a <__fp_inf>
 9be:	00 c1       	rjmp	.+512    	; 0xbc0 <__fp_szero>
 9c0:	5f 3f       	cpi	r21, 0xFF	; 255
 9c2:	ec f3       	brlt	.-6      	; 0x9be <__divsf3_pse+0x6a>
 9c4:	98 3e       	cpi	r25, 0xE8	; 232
 9c6:	dc f3       	brlt	.-10     	; 0x9be <__divsf3_pse+0x6a>
 9c8:	86 95       	lsr	r24
 9ca:	77 95       	ror	r23
 9cc:	67 95       	ror	r22
 9ce:	b7 95       	ror	r27
 9d0:	f7 95       	ror	r31
 9d2:	9f 5f       	subi	r25, 0xFF	; 255
 9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__divsf3_pse+0x74>
 9d6:	88 0f       	add	r24, r24
 9d8:	91 1d       	adc	r25, r1
 9da:	96 95       	lsr	r25
 9dc:	87 95       	ror	r24
 9de:	97 f9       	bld	r25, 7
 9e0:	08 95       	ret
 9e2:	e1 e0       	ldi	r30, 0x01	; 1
 9e4:	66 0f       	add	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	bb 1f       	adc	r27, r27
 9ec:	62 17       	cp	r22, r18
 9ee:	73 07       	cpc	r23, r19
 9f0:	84 07       	cpc	r24, r20
 9f2:	ba 07       	cpc	r27, r26
 9f4:	20 f0       	brcs	.+8      	; 0x9fe <__divsf3_pse+0xaa>
 9f6:	62 1b       	sub	r22, r18
 9f8:	73 0b       	sbc	r23, r19
 9fa:	84 0b       	sbc	r24, r20
 9fc:	ba 0b       	sbc	r27, r26
 9fe:	ee 1f       	adc	r30, r30
 a00:	88 f7       	brcc	.-30     	; 0x9e4 <__divsf3_pse+0x90>
 a02:	e0 95       	com	r30
 a04:	08 95       	ret

00000a06 <__fixsfsi>:
 a06:	04 d0       	rcall	.+8      	; 0xa10 <__fixunssfsi>
 a08:	68 94       	set
 a0a:	b1 11       	cpse	r27, r1
 a0c:	d9 c0       	rjmp	.+434    	; 0xbc0 <__fp_szero>
 a0e:	08 95       	ret

00000a10 <__fixunssfsi>:
 a10:	bc d0       	rcall	.+376    	; 0xb8a <__fp_splitA>
 a12:	88 f0       	brcs	.+34     	; 0xa36 <__fixunssfsi+0x26>
 a14:	9f 57       	subi	r25, 0x7F	; 127
 a16:	90 f0       	brcs	.+36     	; 0xa3c <__fixunssfsi+0x2c>
 a18:	b9 2f       	mov	r27, r25
 a1a:	99 27       	eor	r25, r25
 a1c:	b7 51       	subi	r27, 0x17	; 23
 a1e:	a0 f0       	brcs	.+40     	; 0xa48 <__fixunssfsi+0x38>
 a20:	d1 f0       	breq	.+52     	; 0xa56 <__fixunssfsi+0x46>
 a22:	66 0f       	add	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	1a f0       	brmi	.+6      	; 0xa32 <__fixunssfsi+0x22>
 a2c:	ba 95       	dec	r27
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__fixunssfsi+0x12>
 a30:	12 c0       	rjmp	.+36     	; 0xa56 <__fixunssfsi+0x46>
 a32:	b1 30       	cpi	r27, 0x01	; 1
 a34:	81 f0       	breq	.+32     	; 0xa56 <__fixunssfsi+0x46>
 a36:	c3 d0       	rcall	.+390    	; 0xbbe <__fp_zero>
 a38:	b1 e0       	ldi	r27, 0x01	; 1
 a3a:	08 95       	ret
 a3c:	c0 c0       	rjmp	.+384    	; 0xbbe <__fp_zero>
 a3e:	67 2f       	mov	r22, r23
 a40:	78 2f       	mov	r23, r24
 a42:	88 27       	eor	r24, r24
 a44:	b8 5f       	subi	r27, 0xF8	; 248
 a46:	39 f0       	breq	.+14     	; 0xa56 <__fixunssfsi+0x46>
 a48:	b9 3f       	cpi	r27, 0xF9	; 249
 a4a:	cc f3       	brlt	.-14     	; 0xa3e <__fixunssfsi+0x2e>
 a4c:	86 95       	lsr	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	b3 95       	inc	r27
 a54:	d9 f7       	brne	.-10     	; 0xa4c <__fixunssfsi+0x3c>
 a56:	3e f4       	brtc	.+14     	; 0xa66 <__fixunssfsi+0x56>
 a58:	90 95       	com	r25
 a5a:	80 95       	com	r24
 a5c:	70 95       	com	r23
 a5e:	61 95       	neg	r22
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	08 95       	ret

00000a68 <__floatunsisf>:
 a68:	e8 94       	clt
 a6a:	09 c0       	rjmp	.+18     	; 0xa7e <__floatsisf+0x12>

00000a6c <__floatsisf>:
 a6c:	97 fb       	bst	r25, 7
 a6e:	3e f4       	brtc	.+14     	; 0xa7e <__floatsisf+0x12>
 a70:	90 95       	com	r25
 a72:	80 95       	com	r24
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	99 23       	and	r25, r25
 a80:	a9 f0       	breq	.+42     	; 0xaac <__floatsisf+0x40>
 a82:	f9 2f       	mov	r31, r25
 a84:	96 e9       	ldi	r25, 0x96	; 150
 a86:	bb 27       	eor	r27, r27
 a88:	93 95       	inc	r25
 a8a:	f6 95       	lsr	r31
 a8c:	87 95       	ror	r24
 a8e:	77 95       	ror	r23
 a90:	67 95       	ror	r22
 a92:	b7 95       	ror	r27
 a94:	f1 11       	cpse	r31, r1
 a96:	f8 cf       	rjmp	.-16     	; 0xa88 <__floatsisf+0x1c>
 a98:	fa f4       	brpl	.+62     	; 0xad8 <__floatsisf+0x6c>
 a9a:	bb 0f       	add	r27, r27
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <__floatsisf+0x36>
 a9e:	60 ff       	sbrs	r22, 0
 aa0:	1b c0       	rjmp	.+54     	; 0xad8 <__floatsisf+0x6c>
 aa2:	6f 5f       	subi	r22, 0xFF	; 255
 aa4:	7f 4f       	sbci	r23, 0xFF	; 255
 aa6:	8f 4f       	sbci	r24, 0xFF	; 255
 aa8:	9f 4f       	sbci	r25, 0xFF	; 255
 aaa:	16 c0       	rjmp	.+44     	; 0xad8 <__floatsisf+0x6c>
 aac:	88 23       	and	r24, r24
 aae:	11 f0       	breq	.+4      	; 0xab4 <__floatsisf+0x48>
 ab0:	96 e9       	ldi	r25, 0x96	; 150
 ab2:	11 c0       	rjmp	.+34     	; 0xad6 <__floatsisf+0x6a>
 ab4:	77 23       	and	r23, r23
 ab6:	21 f0       	breq	.+8      	; 0xac0 <__floatsisf+0x54>
 ab8:	9e e8       	ldi	r25, 0x8E	; 142
 aba:	87 2f       	mov	r24, r23
 abc:	76 2f       	mov	r23, r22
 abe:	05 c0       	rjmp	.+10     	; 0xaca <__floatsisf+0x5e>
 ac0:	66 23       	and	r22, r22
 ac2:	71 f0       	breq	.+28     	; 0xae0 <__floatsisf+0x74>
 ac4:	96 e8       	ldi	r25, 0x86	; 134
 ac6:	86 2f       	mov	r24, r22
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	60 e0       	ldi	r22, 0x00	; 0
 acc:	2a f0       	brmi	.+10     	; 0xad8 <__floatsisf+0x6c>
 ace:	9a 95       	dec	r25
 ad0:	66 0f       	add	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	da f7       	brpl	.-10     	; 0xace <__floatsisf+0x62>
 ad8:	88 0f       	add	r24, r24
 ada:	96 95       	lsr	r25
 adc:	87 95       	ror	r24
 ade:	97 f9       	bld	r25, 7
 ae0:	08 95       	ret

00000ae2 <__fp_cmp>:
 ae2:	99 0f       	add	r25, r25
 ae4:	00 08       	sbc	r0, r0
 ae6:	55 0f       	add	r21, r21
 ae8:	aa 0b       	sbc	r26, r26
 aea:	e0 e8       	ldi	r30, 0x80	; 128
 aec:	fe ef       	ldi	r31, 0xFE	; 254
 aee:	16 16       	cp	r1, r22
 af0:	17 06       	cpc	r1, r23
 af2:	e8 07       	cpc	r30, r24
 af4:	f9 07       	cpc	r31, r25
 af6:	c0 f0       	brcs	.+48     	; 0xb28 <__fp_cmp+0x46>
 af8:	12 16       	cp	r1, r18
 afa:	13 06       	cpc	r1, r19
 afc:	e4 07       	cpc	r30, r20
 afe:	f5 07       	cpc	r31, r21
 b00:	98 f0       	brcs	.+38     	; 0xb28 <__fp_cmp+0x46>
 b02:	62 1b       	sub	r22, r18
 b04:	73 0b       	sbc	r23, r19
 b06:	84 0b       	sbc	r24, r20
 b08:	95 0b       	sbc	r25, r21
 b0a:	39 f4       	brne	.+14     	; 0xb1a <__fp_cmp+0x38>
 b0c:	0a 26       	eor	r0, r26
 b0e:	61 f0       	breq	.+24     	; 0xb28 <__fp_cmp+0x46>
 b10:	23 2b       	or	r18, r19
 b12:	24 2b       	or	r18, r20
 b14:	25 2b       	or	r18, r21
 b16:	21 f4       	brne	.+8      	; 0xb20 <__fp_cmp+0x3e>
 b18:	08 95       	ret
 b1a:	0a 26       	eor	r0, r26
 b1c:	09 f4       	brne	.+2      	; 0xb20 <__fp_cmp+0x3e>
 b1e:	a1 40       	sbci	r26, 0x01	; 1
 b20:	a6 95       	lsr	r26
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	81 1d       	adc	r24, r1
 b26:	81 1d       	adc	r24, r1
 b28:	08 95       	ret

00000b2a <__fp_inf>:
 b2a:	97 f9       	bld	r25, 7
 b2c:	9f 67       	ori	r25, 0x7F	; 127
 b2e:	80 e8       	ldi	r24, 0x80	; 128
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	60 e0       	ldi	r22, 0x00	; 0
 b34:	08 95       	ret

00000b36 <__fp_nan>:
 b36:	9f ef       	ldi	r25, 0xFF	; 255
 b38:	80 ec       	ldi	r24, 0xC0	; 192
 b3a:	08 95       	ret

00000b3c <__fp_pscA>:
 b3c:	00 24       	eor	r0, r0
 b3e:	0a 94       	dec	r0
 b40:	16 16       	cp	r1, r22
 b42:	17 06       	cpc	r1, r23
 b44:	18 06       	cpc	r1, r24
 b46:	09 06       	cpc	r0, r25
 b48:	08 95       	ret

00000b4a <__fp_pscB>:
 b4a:	00 24       	eor	r0, r0
 b4c:	0a 94       	dec	r0
 b4e:	12 16       	cp	r1, r18
 b50:	13 06       	cpc	r1, r19
 b52:	14 06       	cpc	r1, r20
 b54:	05 06       	cpc	r0, r21
 b56:	08 95       	ret

00000b58 <__fp_round>:
 b58:	09 2e       	mov	r0, r25
 b5a:	03 94       	inc	r0
 b5c:	00 0c       	add	r0, r0
 b5e:	11 f4       	brne	.+4      	; 0xb64 <__fp_round+0xc>
 b60:	88 23       	and	r24, r24
 b62:	52 f0       	brmi	.+20     	; 0xb78 <__fp_round+0x20>
 b64:	bb 0f       	add	r27, r27
 b66:	40 f4       	brcc	.+16     	; 0xb78 <__fp_round+0x20>
 b68:	bf 2b       	or	r27, r31
 b6a:	11 f4       	brne	.+4      	; 0xb70 <__fp_round+0x18>
 b6c:	60 ff       	sbrs	r22, 0
 b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__fp_round+0x20>
 b70:	6f 5f       	subi	r22, 0xFF	; 255
 b72:	7f 4f       	sbci	r23, 0xFF	; 255
 b74:	8f 4f       	sbci	r24, 0xFF	; 255
 b76:	9f 4f       	sbci	r25, 0xFF	; 255
 b78:	08 95       	ret

00000b7a <__fp_split3>:
 b7a:	57 fd       	sbrc	r21, 7
 b7c:	90 58       	subi	r25, 0x80	; 128
 b7e:	44 0f       	add	r20, r20
 b80:	55 1f       	adc	r21, r21
 b82:	59 f0       	breq	.+22     	; 0xb9a <__fp_splitA+0x10>
 b84:	5f 3f       	cpi	r21, 0xFF	; 255
 b86:	71 f0       	breq	.+28     	; 0xba4 <__fp_splitA+0x1a>
 b88:	47 95       	ror	r20

00000b8a <__fp_splitA>:
 b8a:	88 0f       	add	r24, r24
 b8c:	97 fb       	bst	r25, 7
 b8e:	99 1f       	adc	r25, r25
 b90:	61 f0       	breq	.+24     	; 0xbaa <__fp_splitA+0x20>
 b92:	9f 3f       	cpi	r25, 0xFF	; 255
 b94:	79 f0       	breq	.+30     	; 0xbb4 <__fp_splitA+0x2a>
 b96:	87 95       	ror	r24
 b98:	08 95       	ret
 b9a:	12 16       	cp	r1, r18
 b9c:	13 06       	cpc	r1, r19
 b9e:	14 06       	cpc	r1, r20
 ba0:	55 1f       	adc	r21, r21
 ba2:	f2 cf       	rjmp	.-28     	; 0xb88 <__fp_split3+0xe>
 ba4:	46 95       	lsr	r20
 ba6:	f1 df       	rcall	.-30     	; 0xb8a <__fp_splitA>
 ba8:	08 c0       	rjmp	.+16     	; 0xbba <__fp_splitA+0x30>
 baa:	16 16       	cp	r1, r22
 bac:	17 06       	cpc	r1, r23
 bae:	18 06       	cpc	r1, r24
 bb0:	99 1f       	adc	r25, r25
 bb2:	f1 cf       	rjmp	.-30     	; 0xb96 <__fp_splitA+0xc>
 bb4:	86 95       	lsr	r24
 bb6:	71 05       	cpc	r23, r1
 bb8:	61 05       	cpc	r22, r1
 bba:	08 94       	sec
 bbc:	08 95       	ret

00000bbe <__fp_zero>:
 bbe:	e8 94       	clt

00000bc0 <__fp_szero>:
 bc0:	bb 27       	eor	r27, r27
 bc2:	66 27       	eor	r22, r22
 bc4:	77 27       	eor	r23, r23
 bc6:	cb 01       	movw	r24, r22
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__gesf2>:
 bcc:	8a df       	rcall	.-236    	; 0xae2 <__fp_cmp>
 bce:	08 f4       	brcc	.+2      	; 0xbd2 <__gesf2+0x6>
 bd0:	8f ef       	ldi	r24, 0xFF	; 255
 bd2:	08 95       	ret

00000bd4 <__mulsf3>:
 bd4:	0b d0       	rcall	.+22     	; 0xbec <__mulsf3x>
 bd6:	c0 cf       	rjmp	.-128    	; 0xb58 <__fp_round>
 bd8:	b1 df       	rcall	.-158    	; 0xb3c <__fp_pscA>
 bda:	28 f0       	brcs	.+10     	; 0xbe6 <__mulsf3+0x12>
 bdc:	b6 df       	rcall	.-148    	; 0xb4a <__fp_pscB>
 bde:	18 f0       	brcs	.+6      	; 0xbe6 <__mulsf3+0x12>
 be0:	95 23       	and	r25, r21
 be2:	09 f0       	breq	.+2      	; 0xbe6 <__mulsf3+0x12>
 be4:	a2 cf       	rjmp	.-188    	; 0xb2a <__fp_inf>
 be6:	a7 cf       	rjmp	.-178    	; 0xb36 <__fp_nan>
 be8:	11 24       	eor	r1, r1
 bea:	ea cf       	rjmp	.-44     	; 0xbc0 <__fp_szero>

00000bec <__mulsf3x>:
 bec:	c6 df       	rcall	.-116    	; 0xb7a <__fp_split3>
 bee:	a0 f3       	brcs	.-24     	; 0xbd8 <__mulsf3+0x4>

00000bf0 <__mulsf3_pse>:
 bf0:	95 9f       	mul	r25, r21
 bf2:	d1 f3       	breq	.-12     	; 0xbe8 <__mulsf3+0x14>
 bf4:	95 0f       	add	r25, r21
 bf6:	50 e0       	ldi	r21, 0x00	; 0
 bf8:	55 1f       	adc	r21, r21
 bfa:	62 9f       	mul	r22, r18
 bfc:	f0 01       	movw	r30, r0
 bfe:	72 9f       	mul	r23, r18
 c00:	bb 27       	eor	r27, r27
 c02:	f0 0d       	add	r31, r0
 c04:	b1 1d       	adc	r27, r1
 c06:	63 9f       	mul	r22, r19
 c08:	aa 27       	eor	r26, r26
 c0a:	f0 0d       	add	r31, r0
 c0c:	b1 1d       	adc	r27, r1
 c0e:	aa 1f       	adc	r26, r26
 c10:	64 9f       	mul	r22, r20
 c12:	66 27       	eor	r22, r22
 c14:	b0 0d       	add	r27, r0
 c16:	a1 1d       	adc	r26, r1
 c18:	66 1f       	adc	r22, r22
 c1a:	82 9f       	mul	r24, r18
 c1c:	22 27       	eor	r18, r18
 c1e:	b0 0d       	add	r27, r0
 c20:	a1 1d       	adc	r26, r1
 c22:	62 1f       	adc	r22, r18
 c24:	73 9f       	mul	r23, r19
 c26:	b0 0d       	add	r27, r0
 c28:	a1 1d       	adc	r26, r1
 c2a:	62 1f       	adc	r22, r18
 c2c:	83 9f       	mul	r24, r19
 c2e:	a0 0d       	add	r26, r0
 c30:	61 1d       	adc	r22, r1
 c32:	22 1f       	adc	r18, r18
 c34:	74 9f       	mul	r23, r20
 c36:	33 27       	eor	r19, r19
 c38:	a0 0d       	add	r26, r0
 c3a:	61 1d       	adc	r22, r1
 c3c:	23 1f       	adc	r18, r19
 c3e:	84 9f       	mul	r24, r20
 c40:	60 0d       	add	r22, r0
 c42:	21 1d       	adc	r18, r1
 c44:	82 2f       	mov	r24, r18
 c46:	76 2f       	mov	r23, r22
 c48:	6a 2f       	mov	r22, r26
 c4a:	11 24       	eor	r1, r1
 c4c:	9f 57       	subi	r25, 0x7F	; 127
 c4e:	50 40       	sbci	r21, 0x00	; 0
 c50:	8a f0       	brmi	.+34     	; 0xc74 <__mulsf3_pse+0x84>
 c52:	e1 f0       	breq	.+56     	; 0xc8c <__mulsf3_pse+0x9c>
 c54:	88 23       	and	r24, r24
 c56:	4a f0       	brmi	.+18     	; 0xc6a <__mulsf3_pse+0x7a>
 c58:	ee 0f       	add	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	bb 1f       	adc	r27, r27
 c5e:	66 1f       	adc	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	88 1f       	adc	r24, r24
 c64:	91 50       	subi	r25, 0x01	; 1
 c66:	50 40       	sbci	r21, 0x00	; 0
 c68:	a9 f7       	brne	.-22     	; 0xc54 <__mulsf3_pse+0x64>
 c6a:	9e 3f       	cpi	r25, 0xFE	; 254
 c6c:	51 05       	cpc	r21, r1
 c6e:	70 f0       	brcs	.+28     	; 0xc8c <__mulsf3_pse+0x9c>
 c70:	5c cf       	rjmp	.-328    	; 0xb2a <__fp_inf>
 c72:	a6 cf       	rjmp	.-180    	; 0xbc0 <__fp_szero>
 c74:	5f 3f       	cpi	r21, 0xFF	; 255
 c76:	ec f3       	brlt	.-6      	; 0xc72 <__mulsf3_pse+0x82>
 c78:	98 3e       	cpi	r25, 0xE8	; 232
 c7a:	dc f3       	brlt	.-10     	; 0xc72 <__mulsf3_pse+0x82>
 c7c:	86 95       	lsr	r24
 c7e:	77 95       	ror	r23
 c80:	67 95       	ror	r22
 c82:	b7 95       	ror	r27
 c84:	f7 95       	ror	r31
 c86:	e7 95       	ror	r30
 c88:	9f 5f       	subi	r25, 0xFF	; 255
 c8a:	c1 f7       	brne	.-16     	; 0xc7c <__mulsf3_pse+0x8c>
 c8c:	fe 2b       	or	r31, r30
 c8e:	88 0f       	add	r24, r24
 c90:	91 1d       	adc	r25, r1
 c92:	96 95       	lsr	r25
 c94:	87 95       	ror	r24
 c96:	97 f9       	bld	r25, 7
 c98:	08 95       	ret

00000c9a <__divmodhi4>:
 c9a:	97 fb       	bst	r25, 7
 c9c:	07 2e       	mov	r0, r23
 c9e:	16 f4       	brtc	.+4      	; 0xca4 <__divmodhi4+0xa>
 ca0:	00 94       	com	r0
 ca2:	06 d0       	rcall	.+12     	; 0xcb0 <__divmodhi4_neg1>
 ca4:	77 fd       	sbrc	r23, 7
 ca6:	08 d0       	rcall	.+16     	; 0xcb8 <__divmodhi4_neg2>
 ca8:	0b d0       	rcall	.+22     	; 0xcc0 <__udivmodhi4>
 caa:	07 fc       	sbrc	r0, 7
 cac:	05 d0       	rcall	.+10     	; 0xcb8 <__divmodhi4_neg2>
 cae:	3e f4       	brtc	.+14     	; 0xcbe <__divmodhi4_exit>

00000cb0 <__divmodhi4_neg1>:
 cb0:	90 95       	com	r25
 cb2:	81 95       	neg	r24
 cb4:	9f 4f       	sbci	r25, 0xFF	; 255
 cb6:	08 95       	ret

00000cb8 <__divmodhi4_neg2>:
 cb8:	70 95       	com	r23
 cba:	61 95       	neg	r22
 cbc:	7f 4f       	sbci	r23, 0xFF	; 255

00000cbe <__divmodhi4_exit>:
 cbe:	08 95       	ret

00000cc0 <__udivmodhi4>:
 cc0:	aa 1b       	sub	r26, r26
 cc2:	bb 1b       	sub	r27, r27
 cc4:	51 e1       	ldi	r21, 0x11	; 17
 cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <__udivmodhi4_ep>

00000cc8 <__udivmodhi4_loop>:
 cc8:	aa 1f       	adc	r26, r26
 cca:	bb 1f       	adc	r27, r27
 ccc:	a6 17       	cp	r26, r22
 cce:	b7 07       	cpc	r27, r23
 cd0:	10 f0       	brcs	.+4      	; 0xcd6 <__udivmodhi4_ep>
 cd2:	a6 1b       	sub	r26, r22
 cd4:	b7 0b       	sbc	r27, r23

00000cd6 <__udivmodhi4_ep>:
 cd6:	88 1f       	adc	r24, r24
 cd8:	99 1f       	adc	r25, r25
 cda:	5a 95       	dec	r21
 cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__udivmodhi4_loop>
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	bc 01       	movw	r22, r24
 ce4:	cd 01       	movw	r24, r26
 ce6:	08 95       	ret

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
