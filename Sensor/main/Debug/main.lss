
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000cb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000cb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f76  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a53  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000778  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053d  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d4  00000000  00000000  00003699  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003a6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	94 c0       	rjmp	.+296    	; 0x12e <__bad_interrupt>
   6:	00 00       	nop
   8:	92 c0       	rjmp	.+292    	; 0x12e <__bad_interrupt>
   a:	00 00       	nop
   c:	90 c0       	rjmp	.+288    	; 0x12e <__bad_interrupt>
   e:	00 00       	nop
  10:	8e c0       	rjmp	.+284    	; 0x12e <__bad_interrupt>
  12:	00 00       	nop
  14:	8c c0       	rjmp	.+280    	; 0x12e <__bad_interrupt>
  16:	00 00       	nop
  18:	8a c0       	rjmp	.+276    	; 0x12e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	88 c0       	rjmp	.+272    	; 0x12e <__bad_interrupt>
  1e:	00 00       	nop
  20:	86 c0       	rjmp	.+268    	; 0x12e <__bad_interrupt>
  22:	00 00       	nop
  24:	84 c0       	rjmp	.+264    	; 0x12e <__bad_interrupt>
  26:	00 00       	nop
  28:	82 c0       	rjmp	.+260    	; 0x12e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	80 c0       	rjmp	.+256    	; 0x12e <__bad_interrupt>
  2e:	00 00       	nop
  30:	7e c0       	rjmp	.+252    	; 0x12e <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__bad_interrupt>
  36:	00 00       	nop
  38:	7a c0       	rjmp	.+244    	; 0x12e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	78 c0       	rjmp	.+240    	; 0x12e <__bad_interrupt>
  3e:	00 00       	nop
  40:	76 c0       	rjmp	.+236    	; 0x12e <__bad_interrupt>
  42:	00 00       	nop
  44:	74 c0       	rjmp	.+232    	; 0x12e <__bad_interrupt>
  46:	00 00       	nop
  48:	72 c0       	rjmp	.+228    	; 0x12e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a6 c1       	rjmp	.+844    	; 0x39a <__vector_19>
  4e:	00 00       	nop
  50:	6e c0       	rjmp	.+220    	; 0x12e <__bad_interrupt>
  52:	00 00       	nop
  54:	6c c0       	rjmp	.+216    	; 0x12e <__bad_interrupt>
  56:	00 00       	nop
  58:	6a c0       	rjmp	.+212    	; 0x12e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	68 c0       	rjmp	.+208    	; 0x12e <__bad_interrupt>
  5e:	00 00       	nop
  60:	66 c0       	rjmp	.+204    	; 0x12e <__bad_interrupt>
  62:	00 00       	nop
  64:	64 c0       	rjmp	.+200    	; 0x12e <__bad_interrupt>
  66:	00 00       	nop
  68:	62 c0       	rjmp	.+196    	; 0x12e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	60 c0       	rjmp	.+192    	; 0x12e <__bad_interrupt>
  6e:	00 00       	nop
  70:	5e c0       	rjmp	.+188    	; 0x12e <__bad_interrupt>
  72:	00 00       	nop
  74:	5c c0       	rjmp	.+184    	; 0x12e <__bad_interrupt>
  76:	00 00       	nop
  78:	5a c0       	rjmp	.+180    	; 0x12e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	58 c0       	rjmp	.+176    	; 0x12e <__bad_interrupt>
  7e:	00 00       	nop
  80:	56 c0       	rjmp	.+172    	; 0x12e <__bad_interrupt>
  82:	00 00       	nop
  84:	54 c0       	rjmp	.+168    	; 0x12e <__bad_interrupt>
  86:	00 00       	nop
  88:	52 c0       	rjmp	.+164    	; 0x12e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	07 63       	ori	r16, 0x37	; 55
  8e:	42 36       	cpi	r20, 0x62	; 98
  90:	b7 9b       	sbis	0x16, 7	; 22
  92:	d8 a7       	std	Y+40, r29	; 0x28
  94:	1a 39       	cpi	r17, 0x9A	; 154
  96:	68 56       	subi	r22, 0x68	; 104
  98:	18 ae       	std	Y+56, r1	; 0x38
  9a:	ba ab       	std	Y+50, r27	; 0x32
  9c:	55 8c       	ldd	r5, Z+29	; 0x1d
  9e:	1d 3c       	cpi	r17, 0xCD	; 205
  a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
  a2:	57 63       	ori	r21, 0x37	; 55
  a4:	bd 6d       	ori	r27, 0xDD	; 221
  a6:	ed fd       	.word	0xfded	; ????
  a8:	75 3e       	cpi	r23, 0xE5	; 229
  aa:	f6 17       	cp	r31, r22
  ac:	72 31       	cpi	r23, 0x12	; 18
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__mulsf3_pse+0x90>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d0 e4       	ldi	r29, 0x40	; 64
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_clear_bss>:
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a3 30       	cpi	r26, 0x03	; 3
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	20 d1       	rcall	.+576    	; 0x36c <main>
 12c:	86 c5       	rjmp	.+2828   	; 0xc3a <_exit>

0000012e <__bad_interrupt>:
 12e:	68 cf       	rjmp	.-304    	; 0x0 <__vectors>

00000130 <AD_convert>:
#include <avr/interrupt.h>
#include <math.h>
#include "convert.h"

uint8_t AD_convert()
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	1f 92       	push	r1
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
//	cli();
	volatile uint8_t indata_t = 0;
 13a:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |= (1 << ADSC);
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC))
 146:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 14a:	86 fd       	sbrc	r24, 6
 14c:	fc cf       	rjmp	.-8      	; 0x146 <AD_convert+0x16>
	{
	}
	
//	sei();
	return indata_t = ADCH;
 14e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 152:	89 83       	std	Y+1, r24	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <digital_to_volt>:


float digital_to_volt(int digital_out)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <digital_to_volt+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <digital_to_volt+0x8>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	volatile float volt_convert = digital_out*5.0/1023.0;				// Kalibrera intern spänning
 168:	bc 01       	movw	r22, r24
 16a:	99 0f       	add	r25, r25
 16c:	88 0b       	sbc	r24, r24
 16e:	99 0b       	sbc	r25, r25
 170:	e9 d2       	rcall	.+1490   	; 0x744 <__floatsisf>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 ea       	ldi	r20, 0xA0	; 160
 178:	50 e4       	ldi	r21, 0x40	; 64
 17a:	70 d3       	rcall	.+1760   	; 0x85c <__mulsf3>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 ec       	ldi	r19, 0xC0	; 192
 180:	4f e7       	ldi	r20, 0x7F	; 127
 182:	54 e4       	ldi	r21, 0x44	; 68
 184:	44 d2       	rcall	.+1160   	; 0x60e <__divsf3>
 186:	69 83       	std	Y+1, r22	; 0x01
 188:	7a 83       	std	Y+2, r23	; 0x02
 18a:	8b 83       	std	Y+3, r24	; 0x03
 18c:	9c 83       	std	Y+4, r25	; 0x04
	return volt_convert;
 18e:	69 81       	ldd	r22, Y+1	; 0x01
 190:	7a 81       	ldd	r23, Y+2	; 0x02
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	9c 81       	ldd	r25, Y+4	; 0x04
}
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <convert_uint8_t>:


int convert_uint8_t(uint8_t num)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	60 97       	sbiw	r28, 0x10	; 16
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
	// Konverterar en uint8_t variabel till int
	
	int array[8];
	for (int i = 0; i <8; i++ )
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	1a c0       	rjmp	.+52     	; 0x1f2 <convert_uint8_t+0x4e>
	{
		array[i] = (num >>(7-i)) & 1;	
 1be:	67 e0       	ldi	r22, 0x07	; 7
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	64 1b       	sub	r22, r20
 1c4:	75 0b       	sbc	r23, r21
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <convert_uint8_t+0x2c>
 1cc:	35 95       	asr	r19
 1ce:	27 95       	ror	r18
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <convert_uint8_t+0x28>
 1d4:	21 70       	andi	r18, 0x01	; 1
 1d6:	33 27       	eor	r19, r19
 1d8:	fa 01       	movw	r30, r20
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	6c 0f       	add	r22, r28
 1e4:	7d 1f       	adc	r23, r29
 1e6:	e6 0f       	add	r30, r22
 1e8:	f7 1f       	adc	r31, r23
 1ea:	31 83       	std	Z+1, r19	; 0x01
 1ec:	20 83       	st	Z, r18
int convert_uint8_t(uint8_t num)
{
	// Konverterar en uint8_t variabel till int
	
	int array[8];
	for (int i = 0; i <8; i++ )
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
 1f2:	48 30       	cpi	r20, 0x08	; 8
 1f4:	51 05       	cpc	r21, r1
 1f6:	1c f3       	brlt	.-58     	; 0x1be <convert_uint8_t+0x1a>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	18 c0       	rjmp	.+48     	; 0x232 <convert_uint8_t+0x8e>
	
	int conversion = 0;
	
	for (int index = 0; index < 8; index++)
	{	
		conversion += array[index]*(1 << (7 - index + 2));
 202:	f9 01       	movw	r30, r18
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	4c 0f       	add	r20, r28
 20e:	5d 1f       	adc	r21, r29
 210:	e4 0f       	add	r30, r20
 212:	f5 1f       	adc	r31, r21
 214:	40 81       	ld	r20, Z
 216:	51 81       	ldd	r21, Z+1	; 0x01
 218:	69 e0       	ldi	r22, 0x09	; 9
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	62 1b       	sub	r22, r18
 21e:	73 0b       	sbc	r23, r19
 220:	02 c0       	rjmp	.+4      	; 0x226 <convert_uint8_t+0x82>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <convert_uint8_t+0x7e>
 22a:	84 0f       	add	r24, r20
 22c:	95 1f       	adc	r25, r21
		array[i] = (num >>(7-i)) & 1;	
	}
	
	int conversion = 0;
	
	for (int index = 0; index < 8; index++)
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	28 30       	cpi	r18, 0x08	; 8
 234:	31 05       	cpc	r19, r1
 236:	2c f3       	brlt	.-54     	; 0x202 <convert_uint8_t+0x5e>
	{	
		conversion += array[index]*(1 << (7 - index + 2));
	}
	
	return conversion;
}
 238:	60 96       	adiw	r28, 0x10	; 16
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <is_active_reflex>:


int is_active_reflex()
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	00 d0       	rcall	.+0      	; 0x250 <is_active_reflex+0x6>
 250:	00 d0       	rcall	.+0      	; 0x252 <is_active_reflex+0x8>
 252:	1f 92       	push	r1
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t indata_t = AD_convert();
 258:	6b df       	rcall	.-298    	; 0x130 <AD_convert>
 25a:	89 83       	std	Y+1, r24	; 0x01
	volatile int indata_int = convert_uint8_t(indata_t);
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	a2 df       	rcall	.-188    	; 0x1a4 <convert_uint8_t>
 260:	9b 83       	std	Y+3, r25	; 0x03
 262:	8a 83       	std	Y+2, r24	; 0x02
	volatile int indata_volt = digital_to_volt(indata_int);
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	9b 81       	ldd	r25, Y+3	; 0x03
 268:	79 df       	rcall	.-270    	; 0x15c <digital_to_volt>
 26a:	39 d2       	rcall	.+1138   	; 0x6de <__fixsfsi>
 26c:	7d 83       	std	Y+5, r23	; 0x05
 26e:	6c 83       	std	Y+4, r22	; 0x04
	
	if (indata_volt > 2) {								// Ändra 2 till ett värde som kalibreras
 270:	8c 81       	ldd	r24, Y+4	; 0x04
 272:	9d 81       	ldd	r25, Y+5	; 0x05
 274:	03 97       	sbiw	r24, 0x03	; 3
 276:	1c f0       	brlt	.+6      	; 0x27e <is_active_reflex+0x34>
		return 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <is_active_reflex+0x38>
	} else {
		return 0;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <volt_to_dist>:


int volt_to_dist(int indata)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	00 d0       	rcall	.+0      	; 0x298 <volt_to_dist+0x6>
 298:	00 d0       	rcall	.+0      	; 0x29a <volt_to_dist+0x8>
 29a:	00 d0       	rcall	.+0      	; 0x29c <volt_to_dist+0xa>
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
	volatile float volt_convert = digital_to_volt(indata);
 2a0:	5d df       	rcall	.-326    	; 0x15c <digital_to_volt>
 2a2:	69 83       	std	Y+1, r22	; 0x01
 2a4:	7a 83       	std	Y+2, r23	; 0x02
 2a6:	8b 83       	std	Y+3, r24	; 0x03
 2a8:	9c 83       	std	Y+4, r25	; 0x04
	volatile int distance = 27/(pow(volt_convert,1.15));
 2aa:	69 81       	ldd	r22, Y+1	; 0x01
 2ac:	7a 81       	ldd	r23, Y+2	; 0x02
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	9c 81       	ldd	r25, Y+4	; 0x04
 2b2:	23 e3       	ldi	r18, 0x33	; 51
 2b4:	33 e3       	ldi	r19, 0x33	; 51
 2b6:	43 e9       	ldi	r20, 0x93	; 147
 2b8:	5f e3       	ldi	r21, 0x3F	; 63
 2ba:	33 d3       	rcall	.+1638   	; 0x922 <pow>
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	88 ed       	ldi	r24, 0xD8	; 216
 2c6:	91 e4       	ldi	r25, 0x41	; 65
 2c8:	a2 d1       	rcall	.+836    	; 0x60e <__divsf3>
 2ca:	09 d2       	rcall	.+1042   	; 0x6de <__fixsfsi>
 2cc:	7e 83       	std	Y+6, r23	; 0x06
 2ce:	6d 83       	std	Y+5, r22	; 0x05
	return distance;
 2d0:	8d 81       	ldd	r24, Y+5	; 0x05
 2d2:	9e 81       	ldd	r25, Y+6	; 0x06
}
 2d4:	26 96       	adiw	r28, 0x06	; 6
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <is_roadmark>:


int is_roadmark(int sum)
{
	if (sum > 4) {									// Placeholder värde
 2e6:	05 97       	sbiw	r24, 0x05	; 5
 2e8:	1c f0       	brlt	.+6      	; 0x2f0 <is_roadmark+0xa>
		return 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret
		} else {
		return 0;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
	}
 2f4:	08 95       	ret

000002f6 <init_IR>:
#include <avr/interrupt.h>
#include "init.h"

void init_IR()
{
	ADMUX = (0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(0<<MUX0);
 2f6:	86 e2       	ldi	r24, 0x26	; 38
 2f8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2fc:	87 e8       	ldi	r24, 0x87	; 135
 2fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 302:	08 95       	ret

00000304 <init_gyro>:
}


void init_gyro()
{
	ADMUX = (0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 304:	87 e2       	ldi	r24, 0x27	; 39
 306:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 30a:	87 e8       	ldi	r24, 0x87	; 135
 30c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 310:	08 95       	ret

00000312 <init_reflex>:
}


void init_reflex()
{
	DDRA |= 0x1F;
 312:	81 b1       	in	r24, 0x01	; 1
 314:	8f 61       	ori	r24, 0x1F	; 31
 316:	81 b9       	out	0x01, r24	; 1
	ADMUX = (0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0); 
 318:	85 e2       	ldi	r24, 0x25	; 37
 31a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 31e:	87 e8       	ldi	r24, 0x87	; 135
 320:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 324:	08 95       	ret

00000326 <init_interrupt>:
}


void init_interrupt()
{
	EICRA |=(1<<ISC01)|(1<<ISC00);
 326:	e9 e6       	ldi	r30, 0x69	; 105
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	83 60       	ori	r24, 0x03	; 3
 32e:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 330:	8d b3       	in	r24, 0x1d	; 29
 332:	81 60       	ori	r24, 0x01	; 1
 334:	8d bb       	out	0x1d, r24	; 29
 336:	08 95       	ret

00000338 <init_timer>:
}

void init_timer()
{
	TCCR1B |= (1 << WGM12 );		// CTC-läge
 338:	e1 e8       	ldi	r30, 0x81	; 129
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	88 60       	ori	r24, 0x08	; 8
 340:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);		// Möjliggör output compare A
 342:	ef e6       	ldi	r30, 0x6F	; 111
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	82 60       	ori	r24, 0x02	; 2
 34a:	80 83       	st	Z, r24
	TCNT1 = 0;						// Klockan börjar på 0
 34c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 350:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	OCR1A = 2499;					// Avbrott på 10ms
 354:	83 ec       	ldi	r24, 0xC3	; 195
 356:	99 e0       	ldi	r25, 0x09	; 9
 358:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 35c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 360:	08 95       	ret

00000362 <init_SPI>:
}


void init_SPI()
{
	DDRB = (1 << DDB6);
 362:	80 e4       	ldi	r24, 0x40	; 64
 364:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE) | (1 << SPIE) | (0 << DORD) | (0 << CPOL) | (0 << CPHA); 
 366:	80 ec       	ldi	r24, 0xC0	; 192
 368:	8c bd       	out	0x2c, r24	; 44
 36a:	08 95       	ret

0000036c <main>:
volatile int8_t gyro_send;
volatile uint8_t reflex_send;


int main()
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <main+0x6>
 372:	1f 92       	push	r1
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t IR_send = 0;
 378:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t gyro_send = 0;
 37a:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t reflex_send = 0;
 37c:	1b 82       	std	Y+3, r1	; 0x03
	
	init_interrupt();
 37e:	d3 df       	rcall	.-90     	; 0x326 <init_interrupt>
	init_SPI();
 380:	f0 df       	rcall	.-32     	; 0x362 <init_SPI>
	init_timer();
 382:	da df       	rcall	.-76     	; 0x338 <init_timer>

	sei();
 384:	78 94       	sei
	
	while (1)
	{
		init_IR();
 386:	b7 df       	rcall	.-146    	; 0x2f6 <init_IR>
		IR_send = read_IR();
 388:	85 d0       	rcall	.+266    	; 0x494 <read_IR>
 38a:	89 83       	std	Y+1, r24	; 0x01

		init_reflex();
 38c:	c2 df       	rcall	.-124    	; 0x312 <init_reflex>
 38e:	1a d0       	rcall	.+52     	; 0x3c4 <read_reflex>
		reflex_send = read_reflex();
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	b8 df       	rcall	.-144    	; 0x304 <init_gyro>
 394:	a6 d0       	rcall	.+332    	; 0x4e2 <read_gyro>
		
		init_gyro();
 396:	8a 83       	std	Y+2, r24	; 0x02
 398:	f6 cf       	rjmp	.-20     	; 0x386 <main+0x1a>

0000039a <__vector_19>:
		gyro_send = read_gyro();
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
	}
}


ISR(SPI_STC_vect)
{
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
	SPDR = IR_send;
 3a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <IR_send>
 3aa:	8e bd       	out	0x2e, r24	; 46
	SPDR = gyro_send;
 3ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gyro_send>
 3b0:	8e bd       	out	0x2e, r24	; 46
	SPDR = reflex_send;
 3b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b6:	8e bd       	out	0x2e, r24	; 46
}
 3b8:	8f 91       	pop	r24
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <read_reflex>:
#include "read.h"
#include "convert.h"


uint8_t read_reflex()
{
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	2c 97       	sbiw	r28, 0x0c	; 12
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
	int i;
	volatile uint8_t data;
	volatile uint8_t indata = 0;
 3dc:	1a 82       	std	Y+2, r1	; 0x02
	volatile int sum = 0;
 3de:	1c 82       	std	Y+4, r1	; 0x04
 3e0:	1b 82       	std	Y+3, r1	; 0x03
	volatile int sum_index = 0;
 3e2:	1e 82       	std	Y+6, r1	; 0x06
 3e4:	1d 82       	std	Y+5, r1	; 0x05
	volatile int roadmark = 0;
 3e6:	18 86       	std	Y+8, r1	; 0x08
 3e8:	1f 82       	std	Y+7, r1	; 0x07
	volatile int pivot = 0;
 3ea:	1a 86       	std	Y+10, r1	; 0x0a
 3ec:	19 86       	std	Y+9, r1	; 0x09
	volatile int offset = 0;
 3ee:	1c 86       	std	Y+12, r1	; 0x0c
 3f0:	1b 86       	std	Y+11, r1	; 0x0b
	
	for(i = 0; i < 11; i++)
 3f2:	00 e0       	ldi	r16, 0x00	; 0
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	23 c0       	rjmp	.+70     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
		PORTA &= 0xF0;									// Nollställer de fyra LSB bitarna i PORT A
 3f8:	82 b1       	in	r24, 0x02	; 2
 3fa:	80 7f       	andi	r24, 0xF0	; 240
 3fc:	82 b9       	out	0x02, r24	; 2
		PORTA |= i;										// Sätter Muxen till index i
 3fe:	82 b1       	in	r24, 0x02	; 2
 400:	80 2b       	or	r24, r16
 402:	82 b9       	out	0x02, r24	; 2
		PORTA |= 0x10;									// Startar sensorn
 404:	82 b1       	in	r24, 0x02	; 2
 406:	80 61       	ori	r24, 0x10	; 16
 408:	82 b9       	out	0x02, r24	; 2
		
		indata = is_active_reflex();
 40a:	1f df       	rcall	.-450    	; 0x24a <is_active_reflex>
 40c:	8a 83       	std	Y+2, r24	; 0x02
		PORTA &= 0xEF;									// Stänger av sensorn
 40e:	82 b1       	in	r24, 0x02	; 2
 410:	8f 7e       	andi	r24, 0xEF	; 239
 412:	82 b9       	out	0x02, r24	; 2
		
		sum += indata;
 414:	2a 81       	ldd	r18, Y+2	; 0x02
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	9c 81       	ldd	r25, Y+4	; 0x04
 41a:	82 0f       	add	r24, r18
 41c:	91 1d       	adc	r25, r1
 41e:	9c 83       	std	Y+4, r25	; 0x04
 420:	8b 83       	std	Y+3, r24	; 0x03
		sum_index += i*indata;
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	80 9f       	mul	r24, r16
 426:	90 01       	movw	r18, r0
 428:	81 9f       	mul	r24, r17
 42a:	30 0d       	add	r19, r0
 42c:	11 24       	eor	r1, r1
 42e:	8d 81       	ldd	r24, Y+5	; 0x05
 430:	9e 81       	ldd	r25, Y+6	; 0x06
 432:	82 0f       	add	r24, r18
 434:	93 1f       	adc	r25, r19
 436:	9e 83       	std	Y+6, r25	; 0x06
 438:	8d 83       	std	Y+5, r24	; 0x05
	volatile int sum_index = 0;
	volatile int roadmark = 0;
	volatile int pivot = 0;
	volatile int offset = 0;
	
	for(i = 0; i < 11; i++)
 43a:	0f 5f       	subi	r16, 0xFF	; 255
 43c:	1f 4f       	sbci	r17, 0xFF	; 255
 43e:	0b 30       	cpi	r16, 0x0B	; 11
 440:	11 05       	cpc	r17, r1
 442:	d4 f2       	brlt	.-76     	; 0x3f8 <read_reflex+0x34>
		sum += indata;
		sum_index += i*indata;
		
	}
	
	roadmark = is_roadmark(sum);						
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	9c 81       	ldd	r25, Y+4	; 0x04
 448:	4e df       	rcall	.-356    	; 0x2e6 <is_roadmark>
 44a:	98 87       	std	Y+8, r25	; 0x08
 44c:	8f 83       	std	Y+7, r24	; 0x07
	
	pivot = sum_index/sum;
 44e:	8d 81       	ldd	r24, Y+5	; 0x05
 450:	9e 81       	ldd	r25, Y+6	; 0x06
 452:	6b 81       	ldd	r22, Y+3	; 0x03
 454:	7c 81       	ldd	r23, Y+4	; 0x04
 456:	ca d3       	rcall	.+1940   	; 0xbec <__divmodhi4>
 458:	7a 87       	std	Y+10, r23	; 0x0a
 45a:	69 87       	std	Y+9, r22	; 0x09
	offset = (6 - pivot);
 45c:	29 85       	ldd	r18, Y+9	; 0x09
 45e:	3a 85       	ldd	r19, Y+10	; 0x0a
 460:	86 e0       	ldi	r24, 0x06	; 6
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	82 1b       	sub	r24, r18
 466:	93 0b       	sbc	r25, r19
 468:	9c 87       	std	Y+12, r25	; 0x0c
 46a:	8b 87       	std	Y+11, r24	; 0x0b
								
	return data = (uint8_t)(roadmark*16 + offset);			//Dela upp i två array, offset negativt problem??
 46c:	2f 81       	ldd	r18, Y+7	; 0x07
 46e:	38 85       	ldd	r19, Y+8	; 0x08
 470:	8b 85       	ldd	r24, Y+11	; 0x0b
 472:	9c 85       	ldd	r25, Y+12	; 0x0c
 474:	40 e1       	ldi	r20, 0x10	; 16
 476:	24 9f       	mul	r18, r20
 478:	80 0d       	add	r24, r0
 47a:	11 24       	eor	r1, r1
 47c:	89 83       	std	Y+1, r24	; 0x01
}
 47e:	2c 96       	adiw	r28, 0x0c	; 12
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <read_IR>:


uint8_t read_IR()
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	00 d0       	rcall	.+0      	; 0x49a <read_IR+0x6>
 49a:	00 d0       	rcall	.+0      	; 0x49c <read_IR+0x8>
 49c:	00 d0       	rcall	.+0      	; 0x49e <read_IR+0xa>
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data;
	
	volatile uint8_t indata_t = AD_convert();
 4a2:	46 de       	rcall	.-884    	; 0x130 <AD_convert>
 4a4:	8a 83       	std	Y+2, r24	; 0x02
	volatile int indata = convert_uint8_t(indata_t);
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	7d de       	rcall	.-774    	; 0x1a4 <convert_uint8_t>
 4aa:	9c 83       	std	Y+4, r25	; 0x04
 4ac:	8b 83       	std	Y+3, r24	; 0x03
	volatile int dist = volt_to_dist(indata);
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	9c 81       	ldd	r25, Y+4	; 0x04
 4b2:	ef de       	rcall	.-546    	; 0x292 <volt_to_dist>
 4b4:	9e 83       	std	Y+6, r25	; 0x06
 4b6:	8d 83       	std	Y+5, r24	; 0x05
	
	if (dist > 250){									// Förhindrar integer overflow
 4b8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ba:	9e 81       	ldd	r25, Y+6	; 0x06
 4bc:	8b 3f       	cpi	r24, 0xFB	; 251
 4be:	91 05       	cpc	r25, r1
 4c0:	1c f0       	brlt	.+6      	; 0x4c8 <read_IR+0x34>
		return data = 0xFF;
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	89 83       	std	Y+1, r24	; 0x01
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <read_IR+0x3c>
		} else {
		return data = (uint8_t)dist;
 4c8:	2d 81       	ldd	r18, Y+5	; 0x05
 4ca:	3e 81       	ldd	r19, Y+6	; 0x06
 4cc:	82 2f       	mov	r24, r18
 4ce:	29 83       	std	Y+1, r18	; 0x01
	}
}
 4d0:	26 96       	adiw	r28, 0x06	; 6
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <read_gyro>:


int8_t read_gyro()
{		
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	28 97       	sbiw	r28, 0x08	; 8
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t indata_t = AD_convert();
 4f6:	1c de       	rcall	.-968    	; 0x130 <AD_convert>
 4f8:	89 83       	std	Y+1, r24	; 0x01
	volatile int indata = convert_uint8_t(indata_t);
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	53 de       	rcall	.-858    	; 0x1a4 <convert_uint8_t>
 4fe:	9b 83       	std	Y+3, r25	; 0x03
 500:	8a 83       	std	Y+2, r24	; 0x02
	volatile float volt = digital_to_volt(indata);
 502:	8a 81       	ldd	r24, Y+2	; 0x02
 504:	9b 81       	ldd	r25, Y+3	; 0x03
 506:	2a de       	rcall	.-940    	; 0x15c <digital_to_volt>
 508:	6c 83       	std	Y+4, r22	; 0x04
 50a:	7d 83       	std	Y+5, r23	; 0x05
 50c:	8e 83       	std	Y+6, r24	; 0x06
 50e:	9f 83       	std	Y+7, r25	; 0x07
	volatile int8_t w = (volt - 2.5)/0.033;
 510:	6c 81       	ldd	r22, Y+4	; 0x04
 512:	7d 81       	ldd	r23, Y+5	; 0x05
 514:	8e 81       	ldd	r24, Y+6	; 0x06
 516:	9f 81       	ldd	r25, Y+7	; 0x07
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e2       	ldi	r20, 0x20	; 32
 51e:	50 e4       	ldi	r21, 0x40	; 64
 520:	11 d0       	rcall	.+34     	; 0x544 <__subsf3>
 522:	22 e0       	ldi	r18, 0x02	; 2
 524:	3b e2       	ldi	r19, 0x2B	; 43
 526:	47 e0       	ldi	r20, 0x07	; 7
 528:	5d e3       	ldi	r21, 0x3D	; 61
 52a:	71 d0       	rcall	.+226    	; 0x60e <__divsf3>
 52c:	d8 d0       	rcall	.+432    	; 0x6de <__fixsfsi>
 52e:	68 87       	std	Y+8, r22	; 0x08
	return w;
 530:	88 85       	ldd	r24, Y+8	; 0x08
 532:	28 96       	adiw	r28, 0x08	; 8
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	de bf       	out	0x3e, r29	; 62
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	cd bf       	out	0x3d, r28	; 61
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <__subsf3>:
 544:	50 58       	subi	r21, 0x80	; 128

00000546 <__addsf3>:
 546:	bb 27       	eor	r27, r27
 548:	aa 27       	eor	r26, r26
 54a:	0e d0       	rcall	.+28     	; 0x568 <__addsf3x>
 54c:	4d c1       	rjmp	.+666    	; 0x7e8 <__fp_round>
 54e:	3e d1       	rcall	.+636    	; 0x7cc <__fp_pscA>
 550:	30 f0       	brcs	.+12     	; 0x55e <__addsf3+0x18>
 552:	43 d1       	rcall	.+646    	; 0x7da <__fp_pscB>
 554:	20 f0       	brcs	.+8      	; 0x55e <__addsf3+0x18>
 556:	31 f4       	brne	.+12     	; 0x564 <__addsf3+0x1e>
 558:	9f 3f       	cpi	r25, 0xFF	; 255
 55a:	11 f4       	brne	.+4      	; 0x560 <__addsf3+0x1a>
 55c:	1e f4       	brtc	.+6      	; 0x564 <__addsf3+0x1e>
 55e:	33 c1       	rjmp	.+614    	; 0x7c6 <__fp_nan>
 560:	0e f4       	brtc	.+2      	; 0x564 <__addsf3+0x1e>
 562:	e0 95       	com	r30
 564:	e7 fb       	bst	r30, 7
 566:	29 c1       	rjmp	.+594    	; 0x7ba <__fp_inf>

00000568 <__addsf3x>:
 568:	e9 2f       	mov	r30, r25
 56a:	4f d1       	rcall	.+670    	; 0x80a <__fp_split3>
 56c:	80 f3       	brcs	.-32     	; 0x54e <__addsf3+0x8>
 56e:	ba 17       	cp	r27, r26
 570:	62 07       	cpc	r22, r18
 572:	73 07       	cpc	r23, r19
 574:	84 07       	cpc	r24, r20
 576:	95 07       	cpc	r25, r21
 578:	18 f0       	brcs	.+6      	; 0x580 <__addsf3x+0x18>
 57a:	71 f4       	brne	.+28     	; 0x598 <__addsf3x+0x30>
 57c:	9e f5       	brtc	.+102    	; 0x5e4 <__addsf3x+0x7c>
 57e:	67 c1       	rjmp	.+718    	; 0x84e <__fp_zero>
 580:	0e f4       	brtc	.+2      	; 0x584 <__addsf3x+0x1c>
 582:	e0 95       	com	r30
 584:	0b 2e       	mov	r0, r27
 586:	ba 2f       	mov	r27, r26
 588:	a0 2d       	mov	r26, r0
 58a:	0b 01       	movw	r0, r22
 58c:	b9 01       	movw	r22, r18
 58e:	90 01       	movw	r18, r0
 590:	0c 01       	movw	r0, r24
 592:	ca 01       	movw	r24, r20
 594:	a0 01       	movw	r20, r0
 596:	11 24       	eor	r1, r1
 598:	ff 27       	eor	r31, r31
 59a:	59 1b       	sub	r21, r25
 59c:	99 f0       	breq	.+38     	; 0x5c4 <__addsf3x+0x5c>
 59e:	59 3f       	cpi	r21, 0xF9	; 249
 5a0:	50 f4       	brcc	.+20     	; 0x5b6 <__addsf3x+0x4e>
 5a2:	50 3e       	cpi	r21, 0xE0	; 224
 5a4:	68 f1       	brcs	.+90     	; 0x600 <__addsf3x+0x98>
 5a6:	1a 16       	cp	r1, r26
 5a8:	f0 40       	sbci	r31, 0x00	; 0
 5aa:	a2 2f       	mov	r26, r18
 5ac:	23 2f       	mov	r18, r19
 5ae:	34 2f       	mov	r19, r20
 5b0:	44 27       	eor	r20, r20
 5b2:	58 5f       	subi	r21, 0xF8	; 248
 5b4:	f3 cf       	rjmp	.-26     	; 0x59c <__addsf3x+0x34>
 5b6:	46 95       	lsr	r20
 5b8:	37 95       	ror	r19
 5ba:	27 95       	ror	r18
 5bc:	a7 95       	ror	r26
 5be:	f0 40       	sbci	r31, 0x00	; 0
 5c0:	53 95       	inc	r21
 5c2:	c9 f7       	brne	.-14     	; 0x5b6 <__addsf3x+0x4e>
 5c4:	7e f4       	brtc	.+30     	; 0x5e4 <__addsf3x+0x7c>
 5c6:	1f 16       	cp	r1, r31
 5c8:	ba 0b       	sbc	r27, r26
 5ca:	62 0b       	sbc	r22, r18
 5cc:	73 0b       	sbc	r23, r19
 5ce:	84 0b       	sbc	r24, r20
 5d0:	ba f0       	brmi	.+46     	; 0x600 <__addsf3x+0x98>
 5d2:	91 50       	subi	r25, 0x01	; 1
 5d4:	a1 f0       	breq	.+40     	; 0x5fe <__addsf3x+0x96>
 5d6:	ff 0f       	add	r31, r31
 5d8:	bb 1f       	adc	r27, r27
 5da:	66 1f       	adc	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	c2 f7       	brpl	.-16     	; 0x5d2 <__addsf3x+0x6a>
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <__addsf3x+0x98>
 5e4:	ba 0f       	add	r27, r26
 5e6:	62 1f       	adc	r22, r18
 5e8:	73 1f       	adc	r23, r19
 5ea:	84 1f       	adc	r24, r20
 5ec:	48 f4       	brcc	.+18     	; 0x600 <__addsf3x+0x98>
 5ee:	87 95       	ror	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b7 95       	ror	r27
 5f6:	f7 95       	ror	r31
 5f8:	9e 3f       	cpi	r25, 0xFE	; 254
 5fa:	08 f0       	brcs	.+2      	; 0x5fe <__addsf3x+0x96>
 5fc:	b3 cf       	rjmp	.-154    	; 0x564 <__addsf3+0x1e>
 5fe:	93 95       	inc	r25
 600:	88 0f       	add	r24, r24
 602:	08 f0       	brcs	.+2      	; 0x606 <__addsf3x+0x9e>
 604:	99 27       	eor	r25, r25
 606:	ee 0f       	add	r30, r30
 608:	97 95       	ror	r25
 60a:	87 95       	ror	r24
 60c:	08 95       	ret

0000060e <__divsf3>:
 60e:	0c d0       	rcall	.+24     	; 0x628 <__divsf3x>
 610:	eb c0       	rjmp	.+470    	; 0x7e8 <__fp_round>
 612:	e3 d0       	rcall	.+454    	; 0x7da <__fp_pscB>
 614:	40 f0       	brcs	.+16     	; 0x626 <__divsf3+0x18>
 616:	da d0       	rcall	.+436    	; 0x7cc <__fp_pscA>
 618:	30 f0       	brcs	.+12     	; 0x626 <__divsf3+0x18>
 61a:	21 f4       	brne	.+8      	; 0x624 <__divsf3+0x16>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	19 f0       	breq	.+6      	; 0x626 <__divsf3+0x18>
 620:	cc c0       	rjmp	.+408    	; 0x7ba <__fp_inf>
 622:	51 11       	cpse	r21, r1
 624:	15 c1       	rjmp	.+554    	; 0x850 <__fp_szero>
 626:	cf c0       	rjmp	.+414    	; 0x7c6 <__fp_nan>

00000628 <__divsf3x>:
 628:	f0 d0       	rcall	.+480    	; 0x80a <__fp_split3>
 62a:	98 f3       	brcs	.-26     	; 0x612 <__divsf3+0x4>

0000062c <__divsf3_pse>:
 62c:	99 23       	and	r25, r25
 62e:	c9 f3       	breq	.-14     	; 0x622 <__divsf3+0x14>
 630:	55 23       	and	r21, r21
 632:	b1 f3       	breq	.-20     	; 0x620 <__divsf3+0x12>
 634:	95 1b       	sub	r25, r21
 636:	55 0b       	sbc	r21, r21
 638:	bb 27       	eor	r27, r27
 63a:	aa 27       	eor	r26, r26
 63c:	62 17       	cp	r22, r18
 63e:	73 07       	cpc	r23, r19
 640:	84 07       	cpc	r24, r20
 642:	38 f0       	brcs	.+14     	; 0x652 <__divsf3_pse+0x26>
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	44 1f       	adc	r20, r20
 64e:	aa 1f       	adc	r26, r26
 650:	a9 f3       	breq	.-22     	; 0x63c <__divsf3_pse+0x10>
 652:	33 d0       	rcall	.+102    	; 0x6ba <__divsf3_pse+0x8e>
 654:	0e 2e       	mov	r0, r30
 656:	3a f0       	brmi	.+14     	; 0x666 <__divsf3_pse+0x3a>
 658:	e0 e8       	ldi	r30, 0x80	; 128
 65a:	30 d0       	rcall	.+96     	; 0x6bc <__divsf3_pse+0x90>
 65c:	91 50       	subi	r25, 0x01	; 1
 65e:	50 40       	sbci	r21, 0x00	; 0
 660:	e6 95       	lsr	r30
 662:	00 1c       	adc	r0, r0
 664:	ca f7       	brpl	.-14     	; 0x658 <__divsf3_pse+0x2c>
 666:	29 d0       	rcall	.+82     	; 0x6ba <__divsf3_pse+0x8e>
 668:	fe 2f       	mov	r31, r30
 66a:	27 d0       	rcall	.+78     	; 0x6ba <__divsf3_pse+0x8e>
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	bb 1f       	adc	r27, r27
 674:	26 17       	cp	r18, r22
 676:	37 07       	cpc	r19, r23
 678:	48 07       	cpc	r20, r24
 67a:	ab 07       	cpc	r26, r27
 67c:	b0 e8       	ldi	r27, 0x80	; 128
 67e:	09 f0       	breq	.+2      	; 0x682 <__divsf3_pse+0x56>
 680:	bb 0b       	sbc	r27, r27
 682:	80 2d       	mov	r24, r0
 684:	bf 01       	movw	r22, r30
 686:	ff 27       	eor	r31, r31
 688:	93 58       	subi	r25, 0x83	; 131
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	2a f0       	brmi	.+10     	; 0x698 <__divsf3_pse+0x6c>
 68e:	9e 3f       	cpi	r25, 0xFE	; 254
 690:	51 05       	cpc	r21, r1
 692:	68 f0       	brcs	.+26     	; 0x6ae <__divsf3_pse+0x82>
 694:	92 c0       	rjmp	.+292    	; 0x7ba <__fp_inf>
 696:	dc c0       	rjmp	.+440    	; 0x850 <__fp_szero>
 698:	5f 3f       	cpi	r21, 0xFF	; 255
 69a:	ec f3       	brlt	.-6      	; 0x696 <__divsf3_pse+0x6a>
 69c:	98 3e       	cpi	r25, 0xE8	; 232
 69e:	dc f3       	brlt	.-10     	; 0x696 <__divsf3_pse+0x6a>
 6a0:	86 95       	lsr	r24
 6a2:	77 95       	ror	r23
 6a4:	67 95       	ror	r22
 6a6:	b7 95       	ror	r27
 6a8:	f7 95       	ror	r31
 6aa:	9f 5f       	subi	r25, 0xFF	; 255
 6ac:	c9 f7       	brne	.-14     	; 0x6a0 <__divsf3_pse+0x74>
 6ae:	88 0f       	add	r24, r24
 6b0:	91 1d       	adc	r25, r1
 6b2:	96 95       	lsr	r25
 6b4:	87 95       	ror	r24
 6b6:	97 f9       	bld	r25, 7
 6b8:	08 95       	ret
 6ba:	e1 e0       	ldi	r30, 0x01	; 1
 6bc:	66 0f       	add	r22, r22
 6be:	77 1f       	adc	r23, r23
 6c0:	88 1f       	adc	r24, r24
 6c2:	bb 1f       	adc	r27, r27
 6c4:	62 17       	cp	r22, r18
 6c6:	73 07       	cpc	r23, r19
 6c8:	84 07       	cpc	r24, r20
 6ca:	ba 07       	cpc	r27, r26
 6cc:	20 f0       	brcs	.+8      	; 0x6d6 <__divsf3_pse+0xaa>
 6ce:	62 1b       	sub	r22, r18
 6d0:	73 0b       	sbc	r23, r19
 6d2:	84 0b       	sbc	r24, r20
 6d4:	ba 0b       	sbc	r27, r26
 6d6:	ee 1f       	adc	r30, r30
 6d8:	88 f7       	brcc	.-30     	; 0x6bc <__divsf3_pse+0x90>
 6da:	e0 95       	com	r30
 6dc:	08 95       	ret

000006de <__fixsfsi>:
 6de:	04 d0       	rcall	.+8      	; 0x6e8 <__fixunssfsi>
 6e0:	68 94       	set
 6e2:	b1 11       	cpse	r27, r1
 6e4:	b5 c0       	rjmp	.+362    	; 0x850 <__fp_szero>
 6e6:	08 95       	ret

000006e8 <__fixunssfsi>:
 6e8:	98 d0       	rcall	.+304    	; 0x81a <__fp_splitA>
 6ea:	88 f0       	brcs	.+34     	; 0x70e <__fixunssfsi+0x26>
 6ec:	9f 57       	subi	r25, 0x7F	; 127
 6ee:	90 f0       	brcs	.+36     	; 0x714 <__fixunssfsi+0x2c>
 6f0:	b9 2f       	mov	r27, r25
 6f2:	99 27       	eor	r25, r25
 6f4:	b7 51       	subi	r27, 0x17	; 23
 6f6:	a0 f0       	brcs	.+40     	; 0x720 <__fixunssfsi+0x38>
 6f8:	d1 f0       	breq	.+52     	; 0x72e <__fixunssfsi+0x46>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	88 1f       	adc	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	1a f0       	brmi	.+6      	; 0x70a <__fixunssfsi+0x22>
 704:	ba 95       	dec	r27
 706:	c9 f7       	brne	.-14     	; 0x6fa <__fixunssfsi+0x12>
 708:	12 c0       	rjmp	.+36     	; 0x72e <__fixunssfsi+0x46>
 70a:	b1 30       	cpi	r27, 0x01	; 1
 70c:	81 f0       	breq	.+32     	; 0x72e <__fixunssfsi+0x46>
 70e:	9f d0       	rcall	.+318    	; 0x84e <__fp_zero>
 710:	b1 e0       	ldi	r27, 0x01	; 1
 712:	08 95       	ret
 714:	9c c0       	rjmp	.+312    	; 0x84e <__fp_zero>
 716:	67 2f       	mov	r22, r23
 718:	78 2f       	mov	r23, r24
 71a:	88 27       	eor	r24, r24
 71c:	b8 5f       	subi	r27, 0xF8	; 248
 71e:	39 f0       	breq	.+14     	; 0x72e <__fixunssfsi+0x46>
 720:	b9 3f       	cpi	r27, 0xF9	; 249
 722:	cc f3       	brlt	.-14     	; 0x716 <__fixunssfsi+0x2e>
 724:	86 95       	lsr	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b3 95       	inc	r27
 72c:	d9 f7       	brne	.-10     	; 0x724 <__fixunssfsi+0x3c>
 72e:	3e f4       	brtc	.+14     	; 0x73e <__fixunssfsi+0x56>
 730:	90 95       	com	r25
 732:	80 95       	com	r24
 734:	70 95       	com	r23
 736:	61 95       	neg	r22
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	08 95       	ret

00000740 <__floatunsisf>:
 740:	e8 94       	clt
 742:	09 c0       	rjmp	.+18     	; 0x756 <__floatsisf+0x12>

00000744 <__floatsisf>:
 744:	97 fb       	bst	r25, 7
 746:	3e f4       	brtc	.+14     	; 0x756 <__floatsisf+0x12>
 748:	90 95       	com	r25
 74a:	80 95       	com	r24
 74c:	70 95       	com	r23
 74e:	61 95       	neg	r22
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	99 23       	and	r25, r25
 758:	a9 f0       	breq	.+42     	; 0x784 <__floatsisf+0x40>
 75a:	f9 2f       	mov	r31, r25
 75c:	96 e9       	ldi	r25, 0x96	; 150
 75e:	bb 27       	eor	r27, r27
 760:	93 95       	inc	r25
 762:	f6 95       	lsr	r31
 764:	87 95       	ror	r24
 766:	77 95       	ror	r23
 768:	67 95       	ror	r22
 76a:	b7 95       	ror	r27
 76c:	f1 11       	cpse	r31, r1
 76e:	f8 cf       	rjmp	.-16     	; 0x760 <__floatsisf+0x1c>
 770:	fa f4       	brpl	.+62     	; 0x7b0 <__floatsisf+0x6c>
 772:	bb 0f       	add	r27, r27
 774:	11 f4       	brne	.+4      	; 0x77a <__floatsisf+0x36>
 776:	60 ff       	sbrs	r22, 0
 778:	1b c0       	rjmp	.+54     	; 0x7b0 <__floatsisf+0x6c>
 77a:	6f 5f       	subi	r22, 0xFF	; 255
 77c:	7f 4f       	sbci	r23, 0xFF	; 255
 77e:	8f 4f       	sbci	r24, 0xFF	; 255
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	16 c0       	rjmp	.+44     	; 0x7b0 <__floatsisf+0x6c>
 784:	88 23       	and	r24, r24
 786:	11 f0       	breq	.+4      	; 0x78c <__floatsisf+0x48>
 788:	96 e9       	ldi	r25, 0x96	; 150
 78a:	11 c0       	rjmp	.+34     	; 0x7ae <__floatsisf+0x6a>
 78c:	77 23       	and	r23, r23
 78e:	21 f0       	breq	.+8      	; 0x798 <__floatsisf+0x54>
 790:	9e e8       	ldi	r25, 0x8E	; 142
 792:	87 2f       	mov	r24, r23
 794:	76 2f       	mov	r23, r22
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <__floatsisf+0x5e>
 798:	66 23       	and	r22, r22
 79a:	71 f0       	breq	.+28     	; 0x7b8 <__floatsisf+0x74>
 79c:	96 e8       	ldi	r25, 0x86	; 134
 79e:	86 2f       	mov	r24, r22
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	2a f0       	brmi	.+10     	; 0x7b0 <__floatsisf+0x6c>
 7a6:	9a 95       	dec	r25
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	da f7       	brpl	.-10     	; 0x7a6 <__floatsisf+0x62>
 7b0:	88 0f       	add	r24, r24
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret

000007ba <__fp_inf>:
 7ba:	97 f9       	bld	r25, 7
 7bc:	9f 67       	ori	r25, 0x7F	; 127
 7be:	80 e8       	ldi	r24, 0x80	; 128
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	08 95       	ret

000007c6 <__fp_nan>:
 7c6:	9f ef       	ldi	r25, 0xFF	; 255
 7c8:	80 ec       	ldi	r24, 0xC0	; 192
 7ca:	08 95       	ret

000007cc <__fp_pscA>:
 7cc:	00 24       	eor	r0, r0
 7ce:	0a 94       	dec	r0
 7d0:	16 16       	cp	r1, r22
 7d2:	17 06       	cpc	r1, r23
 7d4:	18 06       	cpc	r1, r24
 7d6:	09 06       	cpc	r0, r25
 7d8:	08 95       	ret

000007da <__fp_pscB>:
 7da:	00 24       	eor	r0, r0
 7dc:	0a 94       	dec	r0
 7de:	12 16       	cp	r1, r18
 7e0:	13 06       	cpc	r1, r19
 7e2:	14 06       	cpc	r1, r20
 7e4:	05 06       	cpc	r0, r21
 7e6:	08 95       	ret

000007e8 <__fp_round>:
 7e8:	09 2e       	mov	r0, r25
 7ea:	03 94       	inc	r0
 7ec:	00 0c       	add	r0, r0
 7ee:	11 f4       	brne	.+4      	; 0x7f4 <__fp_round+0xc>
 7f0:	88 23       	and	r24, r24
 7f2:	52 f0       	brmi	.+20     	; 0x808 <__fp_round+0x20>
 7f4:	bb 0f       	add	r27, r27
 7f6:	40 f4       	brcc	.+16     	; 0x808 <__fp_round+0x20>
 7f8:	bf 2b       	or	r27, r31
 7fa:	11 f4       	brne	.+4      	; 0x800 <__fp_round+0x18>
 7fc:	60 ff       	sbrs	r22, 0
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <__fp_round+0x20>
 800:	6f 5f       	subi	r22, 0xFF	; 255
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	8f 4f       	sbci	r24, 0xFF	; 255
 806:	9f 4f       	sbci	r25, 0xFF	; 255
 808:	08 95       	ret

0000080a <__fp_split3>:
 80a:	57 fd       	sbrc	r21, 7
 80c:	90 58       	subi	r25, 0x80	; 128
 80e:	44 0f       	add	r20, r20
 810:	55 1f       	adc	r21, r21
 812:	59 f0       	breq	.+22     	; 0x82a <__fp_splitA+0x10>
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	71 f0       	breq	.+28     	; 0x834 <__fp_splitA+0x1a>
 818:	47 95       	ror	r20

0000081a <__fp_splitA>:
 81a:	88 0f       	add	r24, r24
 81c:	97 fb       	bst	r25, 7
 81e:	99 1f       	adc	r25, r25
 820:	61 f0       	breq	.+24     	; 0x83a <__fp_splitA+0x20>
 822:	9f 3f       	cpi	r25, 0xFF	; 255
 824:	79 f0       	breq	.+30     	; 0x844 <__fp_splitA+0x2a>
 826:	87 95       	ror	r24
 828:	08 95       	ret
 82a:	12 16       	cp	r1, r18
 82c:	13 06       	cpc	r1, r19
 82e:	14 06       	cpc	r1, r20
 830:	55 1f       	adc	r21, r21
 832:	f2 cf       	rjmp	.-28     	; 0x818 <__fp_split3+0xe>
 834:	46 95       	lsr	r20
 836:	f1 df       	rcall	.-30     	; 0x81a <__fp_splitA>
 838:	08 c0       	rjmp	.+16     	; 0x84a <__fp_splitA+0x30>
 83a:	16 16       	cp	r1, r22
 83c:	17 06       	cpc	r1, r23
 83e:	18 06       	cpc	r1, r24
 840:	99 1f       	adc	r25, r25
 842:	f1 cf       	rjmp	.-30     	; 0x826 <__fp_splitA+0xc>
 844:	86 95       	lsr	r24
 846:	71 05       	cpc	r23, r1
 848:	61 05       	cpc	r22, r1
 84a:	08 94       	sec
 84c:	08 95       	ret

0000084e <__fp_zero>:
 84e:	e8 94       	clt

00000850 <__fp_szero>:
 850:	bb 27       	eor	r27, r27
 852:	66 27       	eor	r22, r22
 854:	77 27       	eor	r23, r23
 856:	cb 01       	movw	r24, r22
 858:	97 f9       	bld	r25, 7
 85a:	08 95       	ret

0000085c <__mulsf3>:
 85c:	0b d0       	rcall	.+22     	; 0x874 <__mulsf3x>
 85e:	c4 cf       	rjmp	.-120    	; 0x7e8 <__fp_round>
 860:	b5 df       	rcall	.-150    	; 0x7cc <__fp_pscA>
 862:	28 f0       	brcs	.+10     	; 0x86e <__mulsf3+0x12>
 864:	ba df       	rcall	.-140    	; 0x7da <__fp_pscB>
 866:	18 f0       	brcs	.+6      	; 0x86e <__mulsf3+0x12>
 868:	95 23       	and	r25, r21
 86a:	09 f0       	breq	.+2      	; 0x86e <__mulsf3+0x12>
 86c:	a6 cf       	rjmp	.-180    	; 0x7ba <__fp_inf>
 86e:	ab cf       	rjmp	.-170    	; 0x7c6 <__fp_nan>
 870:	11 24       	eor	r1, r1
 872:	ee cf       	rjmp	.-36     	; 0x850 <__fp_szero>

00000874 <__mulsf3x>:
 874:	ca df       	rcall	.-108    	; 0x80a <__fp_split3>
 876:	a0 f3       	brcs	.-24     	; 0x860 <__mulsf3+0x4>

00000878 <__mulsf3_pse>:
 878:	95 9f       	mul	r25, r21
 87a:	d1 f3       	breq	.-12     	; 0x870 <__mulsf3+0x14>
 87c:	95 0f       	add	r25, r21
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	55 1f       	adc	r21, r21
 882:	62 9f       	mul	r22, r18
 884:	f0 01       	movw	r30, r0
 886:	72 9f       	mul	r23, r18
 888:	bb 27       	eor	r27, r27
 88a:	f0 0d       	add	r31, r0
 88c:	b1 1d       	adc	r27, r1
 88e:	63 9f       	mul	r22, r19
 890:	aa 27       	eor	r26, r26
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	aa 1f       	adc	r26, r26
 898:	64 9f       	mul	r22, r20
 89a:	66 27       	eor	r22, r22
 89c:	b0 0d       	add	r27, r0
 89e:	a1 1d       	adc	r26, r1
 8a0:	66 1f       	adc	r22, r22
 8a2:	82 9f       	mul	r24, r18
 8a4:	22 27       	eor	r18, r18
 8a6:	b0 0d       	add	r27, r0
 8a8:	a1 1d       	adc	r26, r1
 8aa:	62 1f       	adc	r22, r18
 8ac:	73 9f       	mul	r23, r19
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	83 9f       	mul	r24, r19
 8b6:	a0 0d       	add	r26, r0
 8b8:	61 1d       	adc	r22, r1
 8ba:	22 1f       	adc	r18, r18
 8bc:	74 9f       	mul	r23, r20
 8be:	33 27       	eor	r19, r19
 8c0:	a0 0d       	add	r26, r0
 8c2:	61 1d       	adc	r22, r1
 8c4:	23 1f       	adc	r18, r19
 8c6:	84 9f       	mul	r24, r20
 8c8:	60 0d       	add	r22, r0
 8ca:	21 1d       	adc	r18, r1
 8cc:	82 2f       	mov	r24, r18
 8ce:	76 2f       	mov	r23, r22
 8d0:	6a 2f       	mov	r22, r26
 8d2:	11 24       	eor	r1, r1
 8d4:	9f 57       	subi	r25, 0x7F	; 127
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	8a f0       	brmi	.+34     	; 0x8fc <__mulsf3_pse+0x84>
 8da:	e1 f0       	breq	.+56     	; 0x914 <__mulsf3_pse+0x9c>
 8dc:	88 23       	and	r24, r24
 8de:	4a f0       	brmi	.+18     	; 0x8f2 <__mulsf3_pse+0x7a>
 8e0:	ee 0f       	add	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	bb 1f       	adc	r27, r27
 8e6:	66 1f       	adc	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	91 50       	subi	r25, 0x01	; 1
 8ee:	50 40       	sbci	r21, 0x00	; 0
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__mulsf3_pse+0x64>
 8f2:	9e 3f       	cpi	r25, 0xFE	; 254
 8f4:	51 05       	cpc	r21, r1
 8f6:	70 f0       	brcs	.+28     	; 0x914 <__mulsf3_pse+0x9c>
 8f8:	60 cf       	rjmp	.-320    	; 0x7ba <__fp_inf>
 8fa:	aa cf       	rjmp	.-172    	; 0x850 <__fp_szero>
 8fc:	5f 3f       	cpi	r21, 0xFF	; 255
 8fe:	ec f3       	brlt	.-6      	; 0x8fa <__mulsf3_pse+0x82>
 900:	98 3e       	cpi	r25, 0xE8	; 232
 902:	dc f3       	brlt	.-10     	; 0x8fa <__mulsf3_pse+0x82>
 904:	86 95       	lsr	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b7 95       	ror	r27
 90c:	f7 95       	ror	r31
 90e:	e7 95       	ror	r30
 910:	9f 5f       	subi	r25, 0xFF	; 255
 912:	c1 f7       	brne	.-16     	; 0x904 <__mulsf3_pse+0x8c>
 914:	fe 2b       	or	r31, r30
 916:	88 0f       	add	r24, r24
 918:	91 1d       	adc	r25, r1
 91a:	96 95       	lsr	r25
 91c:	87 95       	ror	r24
 91e:	97 f9       	bld	r25, 7
 920:	08 95       	ret

00000922 <pow>:
 922:	fa 01       	movw	r30, r20
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	30 96       	adiw	r30, 0x00	; 0
 92a:	21 05       	cpc	r18, r1
 92c:	31 05       	cpc	r19, r1
 92e:	99 f1       	breq	.+102    	; 0x996 <pow+0x74>
 930:	61 15       	cp	r22, r1
 932:	71 05       	cpc	r23, r1
 934:	61 f4       	brne	.+24     	; 0x94e <pow+0x2c>
 936:	80 38       	cpi	r24, 0x80	; 128
 938:	bf e3       	ldi	r27, 0x3F	; 63
 93a:	9b 07       	cpc	r25, r27
 93c:	49 f1       	breq	.+82     	; 0x990 <pow+0x6e>
 93e:	68 94       	set
 940:	90 38       	cpi	r25, 0x80	; 128
 942:	81 05       	cpc	r24, r1
 944:	61 f0       	breq	.+24     	; 0x95e <pow+0x3c>
 946:	80 38       	cpi	r24, 0x80	; 128
 948:	bf ef       	ldi	r27, 0xFF	; 255
 94a:	9b 07       	cpc	r25, r27
 94c:	41 f0       	breq	.+16     	; 0x95e <pow+0x3c>
 94e:	99 23       	and	r25, r25
 950:	42 f5       	brpl	.+80     	; 0x9a2 <pow+0x80>
 952:	ff 3f       	cpi	r31, 0xFF	; 255
 954:	e1 05       	cpc	r30, r1
 956:	31 05       	cpc	r19, r1
 958:	21 05       	cpc	r18, r1
 95a:	11 f1       	breq	.+68     	; 0x9a0 <pow+0x7e>
 95c:	e8 94       	clt
 95e:	08 94       	sec
 960:	e7 95       	ror	r30
 962:	d9 01       	movw	r26, r18
 964:	aa 23       	and	r26, r26
 966:	29 f4       	brne	.+10     	; 0x972 <pow+0x50>
 968:	ab 2f       	mov	r26, r27
 96a:	be 2f       	mov	r27, r30
 96c:	f8 5f       	subi	r31, 0xF8	; 248
 96e:	d0 f3       	brcs	.-12     	; 0x964 <pow+0x42>
 970:	10 c0       	rjmp	.+32     	; 0x992 <pow+0x70>
 972:	ff 5f       	subi	r31, 0xFF	; 255
 974:	70 f4       	brcc	.+28     	; 0x992 <pow+0x70>
 976:	a6 95       	lsr	r26
 978:	e0 f7       	brcc	.-8      	; 0x972 <pow+0x50>
 97a:	f7 39       	cpi	r31, 0x97	; 151
 97c:	50 f0       	brcs	.+20     	; 0x992 <pow+0x70>
 97e:	19 f0       	breq	.+6      	; 0x986 <pow+0x64>
 980:	ff 3a       	cpi	r31, 0xAF	; 175
 982:	38 f4       	brcc	.+14     	; 0x992 <pow+0x70>
 984:	9f 77       	andi	r25, 0x7F	; 127
 986:	9f 93       	push	r25
 988:	0c d0       	rcall	.+24     	; 0x9a2 <pow+0x80>
 98a:	0f 90       	pop	r0
 98c:	07 fc       	sbrc	r0, 7
 98e:	90 58       	subi	r25, 0x80	; 128
 990:	08 95       	ret
 992:	3e f0       	brts	.+14     	; 0x9a2 <pow+0x80>
 994:	18 cf       	rjmp	.-464    	; 0x7c6 <__fp_nan>
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	80 e8       	ldi	r24, 0x80	; 128
 99c:	9f e3       	ldi	r25, 0x3F	; 63
 99e:	08 95       	ret
 9a0:	4f e7       	ldi	r20, 0x7F	; 127
 9a2:	9f 77       	andi	r25, 0x7F	; 127
 9a4:	5f 93       	push	r21
 9a6:	4f 93       	push	r20
 9a8:	3f 93       	push	r19
 9aa:	2f 93       	push	r18
 9ac:	9e d0       	rcall	.+316    	; 0xaea <log>
 9ae:	2f 91       	pop	r18
 9b0:	3f 91       	pop	r19
 9b2:	4f 91       	pop	r20
 9b4:	5f 91       	pop	r21
 9b6:	52 df       	rcall	.-348    	; 0x85c <__mulsf3>
 9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <exp>
 9ba:	19 f4       	brne	.+6      	; 0x9c2 <pow+0xa0>
 9bc:	0e f0       	brts	.+2      	; 0x9c0 <pow+0x9e>
 9be:	fd ce       	rjmp	.-518    	; 0x7ba <__fp_inf>
 9c0:	46 cf       	rjmp	.-372    	; 0x84e <__fp_zero>
 9c2:	01 cf       	rjmp	.-510    	; 0x7c6 <__fp_nan>

000009c4 <exp>:
 9c4:	2a df       	rcall	.-428    	; 0x81a <__fp_splitA>
 9c6:	c8 f3       	brcs	.-14     	; 0x9ba <pow+0x98>
 9c8:	96 38       	cpi	r25, 0x86	; 134
 9ca:	c0 f7       	brcc	.-16     	; 0x9bc <pow+0x9a>
 9cc:	07 f8       	bld	r0, 7
 9ce:	0f 92       	push	r0
 9d0:	e8 94       	clt
 9d2:	2b e3       	ldi	r18, 0x3B	; 59
 9d4:	3a ea       	ldi	r19, 0xAA	; 170
 9d6:	48 eb       	ldi	r20, 0xB8	; 184
 9d8:	5f e7       	ldi	r21, 0x7F	; 127
 9da:	4e df       	rcall	.-356    	; 0x878 <__mulsf3_pse>
 9dc:	0f 92       	push	r0
 9de:	0f 92       	push	r0
 9e0:	0f 92       	push	r0
 9e2:	4d b7       	in	r20, 0x3d	; 61
 9e4:	5e b7       	in	r21, 0x3e	; 62
 9e6:	0f 92       	push	r0
 9e8:	c0 d0       	rcall	.+384    	; 0xb6a <modf>
 9ea:	ec e8       	ldi	r30, 0x8C	; 140
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	16 d0       	rcall	.+44     	; 0xa1c <__fp_powser>
 9f0:	4f 91       	pop	r20
 9f2:	5f 91       	pop	r21
 9f4:	ef 91       	pop	r30
 9f6:	ff 91       	pop	r31
 9f8:	e5 95       	asr	r30
 9fa:	ee 1f       	adc	r30, r30
 9fc:	ff 1f       	adc	r31, r31
 9fe:	49 f0       	breq	.+18     	; 0xa12 <exp+0x4e>
 a00:	fe 57       	subi	r31, 0x7E	; 126
 a02:	e0 68       	ori	r30, 0x80	; 128
 a04:	44 27       	eor	r20, r20
 a06:	ee 0f       	add	r30, r30
 a08:	44 1f       	adc	r20, r20
 a0a:	fa 95       	dec	r31
 a0c:	e1 f7       	brne	.-8      	; 0xa06 <exp+0x42>
 a0e:	41 95       	neg	r20
 a10:	55 0b       	sbc	r21, r21
 a12:	32 d0       	rcall	.+100    	; 0xa78 <ldexp>
 a14:	0f 90       	pop	r0
 a16:	07 fe       	sbrs	r0, 7
 a18:	26 c0       	rjmp	.+76     	; 0xa66 <inverse>
 a1a:	08 95       	ret

00000a1c <__fp_powser>:
 a1c:	df 93       	push	r29
 a1e:	cf 93       	push	r28
 a20:	1f 93       	push	r17
 a22:	0f 93       	push	r16
 a24:	ff 92       	push	r15
 a26:	ef 92       	push	r14
 a28:	df 92       	push	r13
 a2a:	7b 01       	movw	r14, r22
 a2c:	8c 01       	movw	r16, r24
 a2e:	68 94       	set
 a30:	05 c0       	rjmp	.+10     	; 0xa3c <__fp_powser+0x20>
 a32:	da 2e       	mov	r13, r26
 a34:	ef 01       	movw	r28, r30
 a36:	1e df       	rcall	.-452    	; 0x874 <__mulsf3x>
 a38:	fe 01       	movw	r30, r28
 a3a:	e8 94       	clt
 a3c:	a5 91       	lpm	r26, Z+
 a3e:	25 91       	lpm	r18, Z+
 a40:	35 91       	lpm	r19, Z+
 a42:	45 91       	lpm	r20, Z+
 a44:	55 91       	lpm	r21, Z+
 a46:	ae f3       	brts	.-22     	; 0xa32 <__fp_powser+0x16>
 a48:	ef 01       	movw	r28, r30
 a4a:	8e dd       	rcall	.-1252   	; 0x568 <__addsf3x>
 a4c:	fe 01       	movw	r30, r28
 a4e:	97 01       	movw	r18, r14
 a50:	a8 01       	movw	r20, r16
 a52:	da 94       	dec	r13
 a54:	79 f7       	brne	.-34     	; 0xa34 <__fp_powser+0x18>
 a56:	df 90       	pop	r13
 a58:	ef 90       	pop	r14
 a5a:	ff 90       	pop	r15
 a5c:	0f 91       	pop	r16
 a5e:	1f 91       	pop	r17
 a60:	cf 91       	pop	r28
 a62:	df 91       	pop	r29
 a64:	08 95       	ret

00000a66 <inverse>:
 a66:	9b 01       	movw	r18, r22
 a68:	ac 01       	movw	r20, r24
 a6a:	60 e0       	ldi	r22, 0x00	; 0
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	80 e8       	ldi	r24, 0x80	; 128
 a70:	9f e3       	ldi	r25, 0x3F	; 63
 a72:	cd cd       	rjmp	.-1126   	; 0x60e <__divsf3>
 a74:	a2 ce       	rjmp	.-700    	; 0x7ba <__fp_inf>
 a76:	ac c0       	rjmp	.+344    	; 0xbd0 <__fp_mpack>

00000a78 <ldexp>:
 a78:	d0 de       	rcall	.-608    	; 0x81a <__fp_splitA>
 a7a:	e8 f3       	brcs	.-6      	; 0xa76 <inverse+0x10>
 a7c:	99 23       	and	r25, r25
 a7e:	d9 f3       	breq	.-10     	; 0xa76 <inverse+0x10>
 a80:	94 0f       	add	r25, r20
 a82:	51 1d       	adc	r21, r1
 a84:	bb f3       	brvs	.-18     	; 0xa74 <inverse+0xe>
 a86:	91 50       	subi	r25, 0x01	; 1
 a88:	50 40       	sbci	r21, 0x00	; 0
 a8a:	94 f0       	brlt	.+36     	; 0xab0 <ldexp+0x38>
 a8c:	59 f0       	breq	.+22     	; 0xaa4 <ldexp+0x2c>
 a8e:	88 23       	and	r24, r24
 a90:	32 f0       	brmi	.+12     	; 0xa9e <ldexp+0x26>
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	88 1f       	adc	r24, r24
 a98:	91 50       	subi	r25, 0x01	; 1
 a9a:	50 40       	sbci	r21, 0x00	; 0
 a9c:	c1 f7       	brne	.-16     	; 0xa8e <ldexp+0x16>
 a9e:	9e 3f       	cpi	r25, 0xFE	; 254
 aa0:	51 05       	cpc	r21, r1
 aa2:	44 f7       	brge	.-48     	; 0xa74 <inverse+0xe>
 aa4:	88 0f       	add	r24, r24
 aa6:	91 1d       	adc	r25, r1
 aa8:	96 95       	lsr	r25
 aaa:	87 95       	ror	r24
 aac:	97 f9       	bld	r25, 7
 aae:	08 95       	ret
 ab0:	5f 3f       	cpi	r21, 0xFF	; 255
 ab2:	ac f0       	brlt	.+42     	; 0xade <ldexp+0x66>
 ab4:	98 3e       	cpi	r25, 0xE8	; 232
 ab6:	9c f0       	brlt	.+38     	; 0xade <ldexp+0x66>
 ab8:	bb 27       	eor	r27, r27
 aba:	86 95       	lsr	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b7 95       	ror	r27
 ac2:	08 f4       	brcc	.+2      	; 0xac6 <ldexp+0x4e>
 ac4:	b1 60       	ori	r27, 0x01	; 1
 ac6:	93 95       	inc	r25
 ac8:	c1 f7       	brne	.-16     	; 0xaba <ldexp+0x42>
 aca:	bb 0f       	add	r27, r27
 acc:	58 f7       	brcc	.-42     	; 0xaa4 <ldexp+0x2c>
 ace:	11 f4       	brne	.+4      	; 0xad4 <ldexp+0x5c>
 ad0:	60 ff       	sbrs	r22, 0
 ad2:	e8 cf       	rjmp	.-48     	; 0xaa4 <ldexp+0x2c>
 ad4:	6f 5f       	subi	r22, 0xFF	; 255
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	e3 cf       	rjmp	.-58     	; 0xaa4 <ldexp+0x2c>
 ade:	b8 ce       	rjmp	.-656    	; 0x850 <__fp_szero>
 ae0:	0e f0       	brts	.+2      	; 0xae4 <ldexp+0x6c>
 ae2:	76 c0       	rjmp	.+236    	; 0xbd0 <__fp_mpack>
 ae4:	70 ce       	rjmp	.-800    	; 0x7c6 <__fp_nan>
 ae6:	68 94       	set
 ae8:	68 ce       	rjmp	.-816    	; 0x7ba <__fp_inf>

00000aea <log>:
 aea:	97 de       	rcall	.-722    	; 0x81a <__fp_splitA>
 aec:	c8 f3       	brcs	.-14     	; 0xae0 <ldexp+0x68>
 aee:	99 23       	and	r25, r25
 af0:	d1 f3       	breq	.-12     	; 0xae6 <ldexp+0x6e>
 af2:	c6 f3       	brts	.-16     	; 0xae4 <ldexp+0x6c>
 af4:	df 93       	push	r29
 af6:	cf 93       	push	r28
 af8:	1f 93       	push	r17
 afa:	0f 93       	push	r16
 afc:	ff 92       	push	r15
 afe:	c9 2f       	mov	r28, r25
 b00:	dd 27       	eor	r29, r29
 b02:	88 23       	and	r24, r24
 b04:	2a f0       	brmi	.+10     	; 0xb10 <log+0x26>
 b06:	21 97       	sbiw	r28, 0x01	; 1
 b08:	66 0f       	add	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	88 1f       	adc	r24, r24
 b0e:	da f7       	brpl	.-10     	; 0xb06 <log+0x1c>
 b10:	20 e0       	ldi	r18, 0x00	; 0
 b12:	30 e0       	ldi	r19, 0x00	; 0
 b14:	40 e8       	ldi	r20, 0x80	; 128
 b16:	5f eb       	ldi	r21, 0xBF	; 191
 b18:	9f e3       	ldi	r25, 0x3F	; 63
 b1a:	88 39       	cpi	r24, 0x98	; 152
 b1c:	20 f0       	brcs	.+8      	; 0xb26 <log+0x3c>
 b1e:	80 3e       	cpi	r24, 0xE0	; 224
 b20:	30 f0       	brcs	.+12     	; 0xb2e <log+0x44>
 b22:	21 96       	adiw	r28, 0x01	; 1
 b24:	8f 77       	andi	r24, 0x7F	; 127
 b26:	0f dd       	rcall	.-1506   	; 0x546 <__addsf3>
 b28:	e4 eb       	ldi	r30, 0xB4	; 180
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <log+0x4a>
 b2e:	0b dd       	rcall	.-1514   	; 0x546 <__addsf3>
 b30:	e1 ee       	ldi	r30, 0xE1	; 225
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	73 df       	rcall	.-282    	; 0xa1c <__fp_powser>
 b36:	8b 01       	movw	r16, r22
 b38:	be 01       	movw	r22, r28
 b3a:	ec 01       	movw	r28, r24
 b3c:	fb 2e       	mov	r15, r27
 b3e:	6f 57       	subi	r22, 0x7F	; 127
 b40:	71 09       	sbc	r23, r1
 b42:	75 95       	asr	r23
 b44:	77 1f       	adc	r23, r23
 b46:	88 0b       	sbc	r24, r24
 b48:	99 0b       	sbc	r25, r25
 b4a:	fc dd       	rcall	.-1032   	; 0x744 <__floatsisf>
 b4c:	28 e1       	ldi	r18, 0x18	; 24
 b4e:	32 e7       	ldi	r19, 0x72	; 114
 b50:	41 e3       	ldi	r20, 0x31	; 49
 b52:	5f e3       	ldi	r21, 0x3F	; 63
 b54:	8f de       	rcall	.-738    	; 0x874 <__mulsf3x>
 b56:	af 2d       	mov	r26, r15
 b58:	98 01       	movw	r18, r16
 b5a:	ae 01       	movw	r20, r28
 b5c:	ff 90       	pop	r15
 b5e:	0f 91       	pop	r16
 b60:	1f 91       	pop	r17
 b62:	cf 91       	pop	r28
 b64:	df 91       	pop	r29
 b66:	00 dd       	rcall	.-1536   	; 0x568 <__addsf3x>
 b68:	3f ce       	rjmp	.-898    	; 0x7e8 <__fp_round>

00000b6a <modf>:
 b6a:	fa 01       	movw	r30, r20
 b6c:	dc 01       	movw	r26, r24
 b6e:	aa 0f       	add	r26, r26
 b70:	bb 1f       	adc	r27, r27
 b72:	9b 01       	movw	r18, r22
 b74:	ac 01       	movw	r20, r24
 b76:	bf 57       	subi	r27, 0x7F	; 127
 b78:	28 f4       	brcc	.+10     	; 0xb84 <modf+0x1a>
 b7a:	22 27       	eor	r18, r18
 b7c:	33 27       	eor	r19, r19
 b7e:	44 27       	eor	r20, r20
 b80:	50 78       	andi	r21, 0x80	; 128
 b82:	1f c0       	rjmp	.+62     	; 0xbc2 <modf+0x58>
 b84:	b7 51       	subi	r27, 0x17	; 23
 b86:	88 f4       	brcc	.+34     	; 0xbaa <modf+0x40>
 b88:	ab 2f       	mov	r26, r27
 b8a:	00 24       	eor	r0, r0
 b8c:	46 95       	lsr	r20
 b8e:	37 95       	ror	r19
 b90:	27 95       	ror	r18
 b92:	01 1c       	adc	r0, r1
 b94:	a3 95       	inc	r26
 b96:	d2 f3       	brmi	.-12     	; 0xb8c <modf+0x22>
 b98:	00 20       	and	r0, r0
 b9a:	69 f0       	breq	.+26     	; 0xbb6 <modf+0x4c>
 b9c:	22 0f       	add	r18, r18
 b9e:	33 1f       	adc	r19, r19
 ba0:	44 1f       	adc	r20, r20
 ba2:	b3 95       	inc	r27
 ba4:	da f3       	brmi	.-10     	; 0xb9c <modf+0x32>
 ba6:	0d d0       	rcall	.+26     	; 0xbc2 <modf+0x58>
 ba8:	cd cc       	rjmp	.-1638   	; 0x544 <__subsf3>
 baa:	61 30       	cpi	r22, 0x01	; 1
 bac:	71 05       	cpc	r23, r1
 bae:	a0 e8       	ldi	r26, 0x80	; 128
 bb0:	8a 07       	cpc	r24, r26
 bb2:	b9 46       	sbci	r27, 0x69	; 105
 bb4:	30 f4       	brcc	.+12     	; 0xbc2 <modf+0x58>
 bb6:	9b 01       	movw	r18, r22
 bb8:	ac 01       	movw	r20, r24
 bba:	66 27       	eor	r22, r22
 bbc:	77 27       	eor	r23, r23
 bbe:	88 27       	eor	r24, r24
 bc0:	90 78       	andi	r25, 0x80	; 128
 bc2:	30 96       	adiw	r30, 0x00	; 0
 bc4:	21 f0       	breq	.+8      	; 0xbce <modf+0x64>
 bc6:	20 83       	st	Z, r18
 bc8:	31 83       	std	Z+1, r19	; 0x01
 bca:	42 83       	std	Z+2, r20	; 0x02
 bcc:	53 83       	std	Z+3, r21	; 0x03
 bce:	08 95       	ret

00000bd0 <__fp_mpack>:
 bd0:	9f 3f       	cpi	r25, 0xFF	; 255
 bd2:	31 f0       	breq	.+12     	; 0xbe0 <__fp_mpack_finite+0xc>

00000bd4 <__fp_mpack_finite>:
 bd4:	91 50       	subi	r25, 0x01	; 1
 bd6:	20 f4       	brcc	.+8      	; 0xbe0 <__fp_mpack_finite+0xc>
 bd8:	87 95       	ror	r24
 bda:	77 95       	ror	r23
 bdc:	67 95       	ror	r22
 bde:	b7 95       	ror	r27
 be0:	88 0f       	add	r24, r24
 be2:	91 1d       	adc	r25, r1
 be4:	96 95       	lsr	r25
 be6:	87 95       	ror	r24
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret

00000bec <__divmodhi4>:
 bec:	97 fb       	bst	r25, 7
 bee:	07 2e       	mov	r0, r23
 bf0:	16 f4       	brtc	.+4      	; 0xbf6 <__divmodhi4+0xa>
 bf2:	00 94       	com	r0
 bf4:	06 d0       	rcall	.+12     	; 0xc02 <__divmodhi4_neg1>
 bf6:	77 fd       	sbrc	r23, 7
 bf8:	08 d0       	rcall	.+16     	; 0xc0a <__divmodhi4_neg2>
 bfa:	0b d0       	rcall	.+22     	; 0xc12 <__udivmodhi4>
 bfc:	07 fc       	sbrc	r0, 7
 bfe:	05 d0       	rcall	.+10     	; 0xc0a <__divmodhi4_neg2>
 c00:	3e f4       	brtc	.+14     	; 0xc10 <__divmodhi4_exit>

00000c02 <__divmodhi4_neg1>:
 c02:	90 95       	com	r25
 c04:	81 95       	neg	r24
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	08 95       	ret

00000c0a <__divmodhi4_neg2>:
 c0a:	70 95       	com	r23
 c0c:	61 95       	neg	r22
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c10 <__divmodhi4_exit>:
 c10:	08 95       	ret

00000c12 <__udivmodhi4>:
 c12:	aa 1b       	sub	r26, r26
 c14:	bb 1b       	sub	r27, r27
 c16:	51 e1       	ldi	r21, 0x11	; 17
 c18:	07 c0       	rjmp	.+14     	; 0xc28 <__udivmodhi4_ep>

00000c1a <__udivmodhi4_loop>:
 c1a:	aa 1f       	adc	r26, r26
 c1c:	bb 1f       	adc	r27, r27
 c1e:	a6 17       	cp	r26, r22
 c20:	b7 07       	cpc	r27, r23
 c22:	10 f0       	brcs	.+4      	; 0xc28 <__udivmodhi4_ep>
 c24:	a6 1b       	sub	r26, r22
 c26:	b7 0b       	sbc	r27, r23

00000c28 <__udivmodhi4_ep>:
 c28:	88 1f       	adc	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	5a 95       	dec	r21
 c2e:	a9 f7       	brne	.-22     	; 0xc1a <__udivmodhi4_loop>
 c30:	80 95       	com	r24
 c32:	90 95       	com	r25
 c34:	bc 01       	movw	r22, r24
 c36:	cd 01       	movw	r24, r26
 c38:	08 95       	ret

00000c3a <_exit>:
 c3a:	f8 94       	cli

00000c3c <__stop_program>:
 c3c:	ff cf       	rjmp	.-2      	; 0xc3c <__stop_program>
