
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000ca0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f54  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a64  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000768  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fd  00000000  00000000  00003643  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	94 c0       	rjmp	.+296    	; 0x12e <__bad_interrupt>
   6:	00 00       	nop
   8:	92 c0       	rjmp	.+292    	; 0x12e <__bad_interrupt>
   a:	00 00       	nop
   c:	90 c0       	rjmp	.+288    	; 0x12e <__bad_interrupt>
   e:	00 00       	nop
  10:	8e c0       	rjmp	.+284    	; 0x12e <__bad_interrupt>
  12:	00 00       	nop
  14:	8c c0       	rjmp	.+280    	; 0x12e <__bad_interrupt>
  16:	00 00       	nop
  18:	8a c0       	rjmp	.+276    	; 0x12e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	88 c0       	rjmp	.+272    	; 0x12e <__bad_interrupt>
  1e:	00 00       	nop
  20:	86 c0       	rjmp	.+268    	; 0x12e <__bad_interrupt>
  22:	00 00       	nop
  24:	84 c0       	rjmp	.+264    	; 0x12e <__bad_interrupt>
  26:	00 00       	nop
  28:	82 c0       	rjmp	.+260    	; 0x12e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	80 c0       	rjmp	.+256    	; 0x12e <__bad_interrupt>
  2e:	00 00       	nop
  30:	7e c0       	rjmp	.+252    	; 0x12e <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__bad_interrupt>
  36:	00 00       	nop
  38:	7a c0       	rjmp	.+244    	; 0x12e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	78 c0       	rjmp	.+240    	; 0x12e <__bad_interrupt>
  3e:	00 00       	nop
  40:	76 c0       	rjmp	.+236    	; 0x12e <__bad_interrupt>
  42:	00 00       	nop
  44:	74 c0       	rjmp	.+232    	; 0x12e <__bad_interrupt>
  46:	00 00       	nop
  48:	72 c0       	rjmp	.+228    	; 0x12e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	94 c1       	rjmp	.+808    	; 0x376 <__vector_19>
  4e:	00 00       	nop
  50:	6e c0       	rjmp	.+220    	; 0x12e <__bad_interrupt>
  52:	00 00       	nop
  54:	6c c0       	rjmp	.+216    	; 0x12e <__bad_interrupt>
  56:	00 00       	nop
  58:	6a c0       	rjmp	.+212    	; 0x12e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	68 c0       	rjmp	.+208    	; 0x12e <__bad_interrupt>
  5e:	00 00       	nop
  60:	66 c0       	rjmp	.+204    	; 0x12e <__bad_interrupt>
  62:	00 00       	nop
  64:	64 c0       	rjmp	.+200    	; 0x12e <__bad_interrupt>
  66:	00 00       	nop
  68:	62 c0       	rjmp	.+196    	; 0x12e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	60 c0       	rjmp	.+192    	; 0x12e <__bad_interrupt>
  6e:	00 00       	nop
  70:	5e c0       	rjmp	.+188    	; 0x12e <__bad_interrupt>
  72:	00 00       	nop
  74:	5c c0       	rjmp	.+184    	; 0x12e <__bad_interrupt>
  76:	00 00       	nop
  78:	5a c0       	rjmp	.+180    	; 0x12e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	58 c0       	rjmp	.+176    	; 0x12e <__bad_interrupt>
  7e:	00 00       	nop
  80:	56 c0       	rjmp	.+172    	; 0x12e <__bad_interrupt>
  82:	00 00       	nop
  84:	54 c0       	rjmp	.+168    	; 0x12e <__bad_interrupt>
  86:	00 00       	nop
  88:	52 c0       	rjmp	.+164    	; 0x12e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	07 63       	ori	r16, 0x37	; 55
  8e:	42 36       	cpi	r20, 0x62	; 98
  90:	b7 9b       	sbis	0x16, 7	; 22
  92:	d8 a7       	std	Y+40, r29	; 0x28
  94:	1a 39       	cpi	r17, 0x9A	; 154
  96:	68 56       	subi	r22, 0x68	; 104
  98:	18 ae       	std	Y+56, r1	; 0x38
  9a:	ba ab       	std	Y+50, r27	; 0x32
  9c:	55 8c       	ldd	r5, Z+29	; 0x1d
  9e:	1d 3c       	cpi	r17, 0xCD	; 205
  a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
  a2:	57 63       	ori	r21, 0x37	; 55
  a4:	bd 6d       	ori	r27, 0xDD	; 221
  a6:	ed fd       	.word	0xfded	; ????
  a8:	75 3e       	cpi	r23, 0xE5	; 229
  aa:	f6 17       	cp	r31, r22
  ac:	72 31       	cpi	r23, 0x12	; 18
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__mulsf3_pse+0xa2>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d0 e4       	ldi	r29, 0x40	; 64
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_clear_bss>:
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a3 30       	cpi	r26, 0x03	; 3
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0f d1       	rcall	.+542    	; 0x34a <main>
 12c:	7d c5       	rjmp	.+2810   	; 0xc28 <_exit>

0000012e <__bad_interrupt>:
 12e:	68 cf       	rjmp	.-304    	; 0x0 <__vectors>

00000130 <AD_convert>:
#include <avr/interrupt.h>
#include <math.h>
#include "convert.h"

uint8_t AD_convert()
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	1f 92       	push	r1
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
//	cli();
	volatile uint8_t indata_t = 0;
 13a:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |= (1 << ADSC);
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC))
 146:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 14a:	86 fd       	sbrc	r24, 6
 14c:	fc cf       	rjmp	.-8      	; 0x146 <AD_convert+0x16>
	{
	}
	
//	sei();
	return indata_t = ADCH;
 14e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 152:	89 83       	std	Y+1, r24	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <digital_to_volt>:


float digital_to_volt(int digital_out)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <digital_to_volt+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <digital_to_volt+0x8>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	volatile float volt_convert = digital_out*5.0/1023.0;				// Kalibrera intern spänning
 168:	bc 01       	movw	r22, r24
 16a:	99 0f       	add	r25, r25
 16c:	88 0b       	sbc	r24, r24
 16e:	99 0b       	sbc	r25, r25
 170:	e0 d2       	rcall	.+1472   	; 0x732 <__floatsisf>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 ea       	ldi	r20, 0xA0	; 160
 178:	50 e4       	ldi	r21, 0x40	; 64
 17a:	67 d3       	rcall	.+1742   	; 0x84a <__mulsf3>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 ec       	ldi	r19, 0xC0	; 192
 180:	4f e7       	ldi	r20, 0x7F	; 127
 182:	54 e4       	ldi	r21, 0x44	; 68
 184:	3b d2       	rcall	.+1142   	; 0x5fc <__divsf3>
 186:	69 83       	std	Y+1, r22	; 0x01
 188:	7a 83       	std	Y+2, r23	; 0x02
 18a:	8b 83       	std	Y+3, r24	; 0x03
 18c:	9c 83       	std	Y+4, r25	; 0x04
	return volt_convert;
 18e:	69 81       	ldd	r22, Y+1	; 0x01
 190:	7a 81       	ldd	r23, Y+2	; 0x02
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	9c 81       	ldd	r25, Y+4	; 0x04
}
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <convert_uint8_t>:


int convert_uint8_t(uint8_t num)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	60 97       	sbiw	r28, 0x10	; 16
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
	// Konverterar en uint8_t variabel till int
	
	int array[8];
	for (int i = 0; i <8; i++ )
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	1a c0       	rjmp	.+52     	; 0x1f2 <convert_uint8_t+0x4e>
	{
		array[i] = (num >>(7-i)) & 1;	
 1be:	67 e0       	ldi	r22, 0x07	; 7
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	64 1b       	sub	r22, r20
 1c4:	75 0b       	sbc	r23, r21
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <convert_uint8_t+0x2c>
 1cc:	35 95       	asr	r19
 1ce:	27 95       	ror	r18
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <convert_uint8_t+0x28>
 1d4:	21 70       	andi	r18, 0x01	; 1
 1d6:	33 27       	eor	r19, r19
 1d8:	fa 01       	movw	r30, r20
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	6c 0f       	add	r22, r28
 1e4:	7d 1f       	adc	r23, r29
 1e6:	e6 0f       	add	r30, r22
 1e8:	f7 1f       	adc	r31, r23
 1ea:	31 83       	std	Z+1, r19	; 0x01
 1ec:	20 83       	st	Z, r18
int convert_uint8_t(uint8_t num)
{
	// Konverterar en uint8_t variabel till int
	
	int array[8];
	for (int i = 0; i <8; i++ )
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
 1f2:	48 30       	cpi	r20, 0x08	; 8
 1f4:	51 05       	cpc	r21, r1
 1f6:	1c f3       	brlt	.-58     	; 0x1be <convert_uint8_t+0x1a>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	18 c0       	rjmp	.+48     	; 0x232 <convert_uint8_t+0x8e>
	
	int conversion = 0;
	
	for (int index = 0; index < 8; index++)
	{	
		conversion += array[index]*(1 << (7 - index + 2));
 202:	f9 01       	movw	r30, r18
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	4c 0f       	add	r20, r28
 20e:	5d 1f       	adc	r21, r29
 210:	e4 0f       	add	r30, r20
 212:	f5 1f       	adc	r31, r21
 214:	40 81       	ld	r20, Z
 216:	51 81       	ldd	r21, Z+1	; 0x01
 218:	69 e0       	ldi	r22, 0x09	; 9
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	62 1b       	sub	r22, r18
 21e:	73 0b       	sbc	r23, r19
 220:	02 c0       	rjmp	.+4      	; 0x226 <convert_uint8_t+0x82>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <convert_uint8_t+0x7e>
 22a:	84 0f       	add	r24, r20
 22c:	95 1f       	adc	r25, r21
		array[i] = (num >>(7-i)) & 1;	
	}
	
	int conversion = 0;
	
	for (int index = 0; index < 8; index++)
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	28 30       	cpi	r18, 0x08	; 8
 234:	31 05       	cpc	r19, r1
 236:	2c f3       	brlt	.-54     	; 0x202 <convert_uint8_t+0x5e>
	{	
		conversion += array[index]*(1 << (7 - index + 2));
	}
	
	return conversion;
}
 238:	60 96       	adiw	r28, 0x10	; 16
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <is_active_reflex>:


int is_active_reflex()
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	00 d0       	rcall	.+0      	; 0x250 <is_active_reflex+0x6>
 250:	00 d0       	rcall	.+0      	; 0x252 <is_active_reflex+0x8>
 252:	1f 92       	push	r1
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t indata_t = AD_convert();
 258:	6b df       	rcall	.-298    	; 0x130 <AD_convert>
 25a:	89 83       	std	Y+1, r24	; 0x01
	volatile int indata_int = convert_uint8_t(indata_t);
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	a2 df       	rcall	.-188    	; 0x1a4 <convert_uint8_t>
 260:	9b 83       	std	Y+3, r25	; 0x03
 262:	8a 83       	std	Y+2, r24	; 0x02
	volatile int indata_volt = digital_to_volt(indata_int);
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	9b 81       	ldd	r25, Y+3	; 0x03
 268:	79 df       	rcall	.-270    	; 0x15c <digital_to_volt>
 26a:	30 d2       	rcall	.+1120   	; 0x6cc <__fixsfsi>
 26c:	7d 83       	std	Y+5, r23	; 0x05
 26e:	6c 83       	std	Y+4, r22	; 0x04
	
	if (indata_volt > 2) {								// Ändra 2 till ett värde som kalibreras
 270:	8c 81       	ldd	r24, Y+4	; 0x04
 272:	9d 81       	ldd	r25, Y+5	; 0x05
 274:	03 97       	sbiw	r24, 0x03	; 3
 276:	1c f0       	brlt	.+6      	; 0x27e <is_active_reflex+0x34>
		return 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <is_active_reflex+0x38>
	} else {
		return 0;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <volt_to_dist>:


int volt_to_dist(int indata)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	00 d0       	rcall	.+0      	; 0x298 <volt_to_dist+0x6>
 298:	00 d0       	rcall	.+0      	; 0x29a <volt_to_dist+0x8>
 29a:	00 d0       	rcall	.+0      	; 0x29c <volt_to_dist+0xa>
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
	volatile float volt_convert = digital_to_volt(indata);
 2a0:	5d df       	rcall	.-326    	; 0x15c <digital_to_volt>
 2a2:	69 83       	std	Y+1, r22	; 0x01
 2a4:	7a 83       	std	Y+2, r23	; 0x02
 2a6:	8b 83       	std	Y+3, r24	; 0x03
 2a8:	9c 83       	std	Y+4, r25	; 0x04
	volatile int distance = 27/(pow(volt_convert,1.15));
 2aa:	69 81       	ldd	r22, Y+1	; 0x01
 2ac:	7a 81       	ldd	r23, Y+2	; 0x02
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	9c 81       	ldd	r25, Y+4	; 0x04
 2b2:	23 e3       	ldi	r18, 0x33	; 51
 2b4:	33 e3       	ldi	r19, 0x33	; 51
 2b6:	43 e9       	ldi	r20, 0x93	; 147
 2b8:	5f e3       	ldi	r21, 0x3F	; 63
 2ba:	2a d3       	rcall	.+1620   	; 0x910 <pow>
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	88 ed       	ldi	r24, 0xD8	; 216
 2c6:	91 e4       	ldi	r25, 0x41	; 65
 2c8:	99 d1       	rcall	.+818    	; 0x5fc <__divsf3>
 2ca:	00 d2       	rcall	.+1024   	; 0x6cc <__fixsfsi>
 2cc:	7e 83       	std	Y+6, r23	; 0x06
 2ce:	6d 83       	std	Y+5, r22	; 0x05
	return distance;
 2d0:	8d 81       	ldd	r24, Y+5	; 0x05
 2d2:	9e 81       	ldd	r25, Y+6	; 0x06
}
 2d4:	26 96       	adiw	r28, 0x06	; 6
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <is_roadmark>:


int is_roadmark(int sum)
{
	if (sum > 4) {									// Placeholder värde
 2e6:	05 97       	sbiw	r24, 0x05	; 5
 2e8:	1c f0       	brlt	.+6      	; 0x2f0 <is_roadmark+0xa>
		return 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret
		} else {
		return 0;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
	}
 2f4:	08 95       	ret

000002f6 <init_IR>:
#include <avr/interrupt.h>
#include "init.h"

void init_IR()
{
	ADMUX = (0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(0<<MUX0);
 2f6:	86 e2       	ldi	r24, 0x26	; 38
 2f8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2fc:	87 e8       	ldi	r24, 0x87	; 135
 2fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 302:	08 95       	ret

00000304 <init_gyro>:
}


void init_gyro()
{
	ADMUX = (0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 304:	87 e2       	ldi	r24, 0x27	; 39
 306:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 30a:	87 e8       	ldi	r24, 0x87	; 135
 30c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 310:	08 95       	ret

00000312 <init_reflex>:
}


void init_reflex()
{
	DDRA |= 0x1F;
 312:	81 b1       	in	r24, 0x01	; 1
 314:	8f 61       	ori	r24, 0x1F	; 31
 316:	81 b9       	out	0x01, r24	; 1
	ADMUX = (0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0); 
 318:	85 e2       	ldi	r24, 0x25	; 37
 31a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 31e:	87 e8       	ldi	r24, 0x87	; 135
 320:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 324:	08 95       	ret

00000326 <init_interrupt>:
}


void init_interrupt()
{
	EICRA |=(1<<ISC01)|(1<<ISC00);
 326:	e9 e6       	ldi	r30, 0x69	; 105
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	83 60       	ori	r24, 0x03	; 3
 32e:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 330:	8d b3       	in	r24, 0x1d	; 29
 332:	81 60       	ori	r24, 0x01	; 1
 334:	8d bb       	out	0x1d, r24	; 29
 336:	08 95       	ret

00000338 <init_SPI>:



void init_SPI()
{
	DDRB &= ~((1<<PORTB5)|(1<<PORTB7)|(1<<PORTB4));
 338:	84 b1       	in	r24, 0x04	; 4
 33a:	8f 74       	andi	r24, 0x4F	; 79
 33c:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB6);
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	80 64       	ori	r24, 0x40	; 64
 342:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPIE) | (1 << SPE) | (0 << DORD) | (0 << CPOL) | (0 << CPHA); 
 344:	80 ec       	ldi	r24, 0xC0	; 192
 346:	8c bd       	out	0x2c, r24	; 44
 348:	08 95       	ret

0000034a <main>:
volatile int8_t gyro_send;
volatile uint8_t reflex_send;


int main()
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	00 d0       	rcall	.+0      	; 0x350 <main+0x6>
 350:	1f 92       	push	r1
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t IR_send = 0;
 356:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t gyro_send = 0;
 358:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t reflex_send = 0;
 35a:	1b 82       	std	Y+3, r1	; 0x03
	
	init_interrupt();
 35c:	e4 df       	rcall	.-56     	; 0x326 <init_interrupt>
	init_SPI();
 35e:	ec df       	rcall	.-40     	; 0x338 <init_SPI>
	
	sei();
	
	while (1)
	{
		init_IR();
 360:	78 94       	sei
		IR_send = read_IR();
 362:	c9 df       	rcall	.-110    	; 0x2f6 <init_IR>
 364:	8e d0       	rcall	.+284    	; 0x482 <read_IR>

		init_reflex();
 366:	89 83       	std	Y+1, r24	; 0x01
		reflex_send = read_reflex();
 368:	d4 df       	rcall	.-88     	; 0x312 <init_reflex>
 36a:	23 d0       	rcall	.+70     	; 0x3b2 <read_reflex>
 36c:	8b 83       	std	Y+3, r24	; 0x03
		
		init_gyro();
 36e:	ca df       	rcall	.-108    	; 0x304 <init_gyro>
 370:	af d0       	rcall	.+350    	; 0x4d0 <read_gyro>
		gyro_send = read_gyro();
 372:	8a 83       	std	Y+2, r24	; 0x02
 374:	f6 cf       	rjmp	.-20     	; 0x362 <main+0x18>

00000376 <__vector_19>:
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
	}
}


ISR(SPI_STC_vect)
{
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	8f 93       	push	r24
	uint8_t choose_sensor = (uint8_t)SPDR;
 382:	8e b5       	in	r24, 0x2e	; 46
	
	if(choose_sensor == 0)
 384:	81 11       	cpse	r24, r1
 386:	04 c0       	rjmp	.+8      	; 0x390 <__vector_19+0x1a>
	{
		SPDR = IR_send;
 388:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <IR_send>
 38c:	8e bd       	out	0x2e, r24	; 46
 38e:	0b c0       	rjmp	.+22     	; 0x3a6 <__vector_19+0x30>
	}
	else if(choose_sensor == 1)
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	21 f4       	brne	.+8      	; 0x39c <__vector_19+0x26>
	{
		SPDR = reflex_send;
 394:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 398:	8e bd       	out	0x2e, r24	; 46
 39a:	05 c0       	rjmp	.+10     	; 0x3a6 <__vector_19+0x30>
	}
	else if(choose_sensor == 2)
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	19 f4       	brne	.+6      	; 0x3a6 <__vector_19+0x30>
	{
		SPDR = gyro_send;
 3a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gyro_send>
 3a4:	8e bd       	out	0x2e, r24	; 46
	}
}
 3a6:	8f 91       	pop	r24
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <read_reflex>:
#include "read.h"
#include "convert.h"


uint8_t read_reflex()
{
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	2c 97       	sbiw	r28, 0x0c	; 12
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
	int i;
	volatile uint8_t data;
	volatile uint8_t indata = 0;
 3ca:	1a 82       	std	Y+2, r1	; 0x02
	volatile int sum = 0;
 3cc:	1c 82       	std	Y+4, r1	; 0x04
 3ce:	1b 82       	std	Y+3, r1	; 0x03
	volatile int sum_index = 0;
 3d0:	1e 82       	std	Y+6, r1	; 0x06
 3d2:	1d 82       	std	Y+5, r1	; 0x05
	volatile int roadmark = 0;
 3d4:	18 86       	std	Y+8, r1	; 0x08
 3d6:	1f 82       	std	Y+7, r1	; 0x07
	volatile int pivot = 0;
 3d8:	1a 86       	std	Y+10, r1	; 0x0a
 3da:	19 86       	std	Y+9, r1	; 0x09
	volatile int offset = 0;
 3dc:	1c 86       	std	Y+12, r1	; 0x0c
 3de:	1b 86       	std	Y+11, r1	; 0x0b
	
	for(i = 0; i < 11; i++)
 3e0:	00 e0       	ldi	r16, 0x00	; 0
 3e2:	10 e0       	ldi	r17, 0x00	; 0
 3e4:	23 c0       	rjmp	.+70     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		PORTA &= 0xF0;									// Nollställer de fyra LSB bitarna i PORT A
 3e6:	82 b1       	in	r24, 0x02	; 2
 3e8:	80 7f       	andi	r24, 0xF0	; 240
 3ea:	82 b9       	out	0x02, r24	; 2
		PORTA |= i;										// Sätter Muxen till index i
 3ec:	82 b1       	in	r24, 0x02	; 2
 3ee:	80 2b       	or	r24, r16
 3f0:	82 b9       	out	0x02, r24	; 2
		PORTA |= 0x10;									// Startar sensorn
 3f2:	82 b1       	in	r24, 0x02	; 2
 3f4:	80 61       	ori	r24, 0x10	; 16
 3f6:	82 b9       	out	0x02, r24	; 2
		
		indata = is_active_reflex();
 3f8:	28 df       	rcall	.-432    	; 0x24a <is_active_reflex>
 3fa:	8a 83       	std	Y+2, r24	; 0x02
		PORTA &= 0xEF;									// Stänger av sensorn
 3fc:	82 b1       	in	r24, 0x02	; 2
 3fe:	8f 7e       	andi	r24, 0xEF	; 239
 400:	82 b9       	out	0x02, r24	; 2
		
		sum += indata;
 402:	2a 81       	ldd	r18, Y+2	; 0x02
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	9c 81       	ldd	r25, Y+4	; 0x04
 408:	82 0f       	add	r24, r18
 40a:	91 1d       	adc	r25, r1
 40c:	9c 83       	std	Y+4, r25	; 0x04
 40e:	8b 83       	std	Y+3, r24	; 0x03
		sum_index += i*indata;
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	80 9f       	mul	r24, r16
 414:	90 01       	movw	r18, r0
 416:	81 9f       	mul	r24, r17
 418:	30 0d       	add	r19, r0
 41a:	11 24       	eor	r1, r1
 41c:	8d 81       	ldd	r24, Y+5	; 0x05
 41e:	9e 81       	ldd	r25, Y+6	; 0x06
 420:	82 0f       	add	r24, r18
 422:	93 1f       	adc	r25, r19
 424:	9e 83       	std	Y+6, r25	; 0x06
 426:	8d 83       	std	Y+5, r24	; 0x05
	volatile int sum_index = 0;
	volatile int roadmark = 0;
	volatile int pivot = 0;
	volatile int offset = 0;
	
	for(i = 0; i < 11; i++)
 428:	0f 5f       	subi	r16, 0xFF	; 255
 42a:	1f 4f       	sbci	r17, 0xFF	; 255
 42c:	0b 30       	cpi	r16, 0x0B	; 11
 42e:	11 05       	cpc	r17, r1
 430:	d4 f2       	brlt	.-76     	; 0x3e6 <read_reflex+0x34>
		sum += indata;
		sum_index += i*indata;
		
	}
	
	roadmark = is_roadmark(sum);						
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	9c 81       	ldd	r25, Y+4	; 0x04
 436:	57 df       	rcall	.-338    	; 0x2e6 <is_roadmark>
 438:	98 87       	std	Y+8, r25	; 0x08
 43a:	8f 83       	std	Y+7, r24	; 0x07
	
	pivot = sum_index/sum;
 43c:	8d 81       	ldd	r24, Y+5	; 0x05
 43e:	9e 81       	ldd	r25, Y+6	; 0x06
 440:	6b 81       	ldd	r22, Y+3	; 0x03
 442:	7c 81       	ldd	r23, Y+4	; 0x04
 444:	ca d3       	rcall	.+1940   	; 0xbda <__divmodhi4>
 446:	7a 87       	std	Y+10, r23	; 0x0a
 448:	69 87       	std	Y+9, r22	; 0x09
	offset = (6 - pivot);
 44a:	29 85       	ldd	r18, Y+9	; 0x09
 44c:	3a 85       	ldd	r19, Y+10	; 0x0a
 44e:	86 e0       	ldi	r24, 0x06	; 6
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	82 1b       	sub	r24, r18
 454:	93 0b       	sbc	r25, r19
 456:	9c 87       	std	Y+12, r25	; 0x0c
 458:	8b 87       	std	Y+11, r24	; 0x0b
								
	return data = (uint8_t)(roadmark*16 + offset);			//Dela upp i två array, offset negativt problem??
 45a:	2f 81       	ldd	r18, Y+7	; 0x07
 45c:	38 85       	ldd	r19, Y+8	; 0x08
 45e:	8b 85       	ldd	r24, Y+11	; 0x0b
 460:	9c 85       	ldd	r25, Y+12	; 0x0c
 462:	40 e1       	ldi	r20, 0x10	; 16
 464:	24 9f       	mul	r18, r20
 466:	80 0d       	add	r24, r0
 468:	11 24       	eor	r1, r1
 46a:	89 83       	std	Y+1, r24	; 0x01
}
 46c:	2c 96       	adiw	r28, 0x0c	; 12
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <read_IR>:


uint8_t read_IR()
{
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	00 d0       	rcall	.+0      	; 0x488 <read_IR+0x6>
 488:	00 d0       	rcall	.+0      	; 0x48a <read_IR+0x8>
 48a:	00 d0       	rcall	.+0      	; 0x48c <read_IR+0xa>
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data;
	
	volatile uint8_t indata_t = AD_convert();
 490:	4f de       	rcall	.-866    	; 0x130 <AD_convert>
 492:	8a 83       	std	Y+2, r24	; 0x02
	volatile int indata = convert_uint8_t(indata_t);
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	86 de       	rcall	.-756    	; 0x1a4 <convert_uint8_t>
 498:	9c 83       	std	Y+4, r25	; 0x04
 49a:	8b 83       	std	Y+3, r24	; 0x03
	volatile int dist = volt_to_dist(indata);
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	9c 81       	ldd	r25, Y+4	; 0x04
 4a0:	f8 de       	rcall	.-528    	; 0x292 <volt_to_dist>
 4a2:	9e 83       	std	Y+6, r25	; 0x06
 4a4:	8d 83       	std	Y+5, r24	; 0x05
	
	if (dist > 250){									// Förhindrar integer overflow
 4a6:	8d 81       	ldd	r24, Y+5	; 0x05
 4a8:	9e 81       	ldd	r25, Y+6	; 0x06
 4aa:	8b 3f       	cpi	r24, 0xFB	; 251
 4ac:	91 05       	cpc	r25, r1
 4ae:	1c f0       	brlt	.+6      	; 0x4b6 <read_IR+0x34>
		return data = 0xFF;
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	89 83       	std	Y+1, r24	; 0x01
 4b4:	04 c0       	rjmp	.+8      	; 0x4be <read_IR+0x3c>
		} else {
		return data = (uint8_t)dist;
 4b6:	2d 81       	ldd	r18, Y+5	; 0x05
 4b8:	3e 81       	ldd	r19, Y+6	; 0x06
 4ba:	82 2f       	mov	r24, r18
 4bc:	29 83       	std	Y+1, r18	; 0x01
	}
}
 4be:	26 96       	adiw	r28, 0x06	; 6
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <read_gyro>:


int8_t read_gyro()
{		
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	28 97       	sbiw	r28, 0x08	; 8
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t indata_t = AD_convert();
 4e4:	25 de       	rcall	.-950    	; 0x130 <AD_convert>
 4e6:	89 83       	std	Y+1, r24	; 0x01
	volatile int indata = convert_uint8_t(indata_t);
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	5c de       	rcall	.-840    	; 0x1a4 <convert_uint8_t>
 4ec:	9b 83       	std	Y+3, r25	; 0x03
 4ee:	8a 83       	std	Y+2, r24	; 0x02
	volatile float volt = digital_to_volt(indata);
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	9b 81       	ldd	r25, Y+3	; 0x03
 4f4:	33 de       	rcall	.-922    	; 0x15c <digital_to_volt>
 4f6:	6c 83       	std	Y+4, r22	; 0x04
 4f8:	7d 83       	std	Y+5, r23	; 0x05
 4fa:	8e 83       	std	Y+6, r24	; 0x06
 4fc:	9f 83       	std	Y+7, r25	; 0x07
	volatile int8_t w = (volt - 2.5)/0.033;
 4fe:	6c 81       	ldd	r22, Y+4	; 0x04
 500:	7d 81       	ldd	r23, Y+5	; 0x05
 502:	8e 81       	ldd	r24, Y+6	; 0x06
 504:	9f 81       	ldd	r25, Y+7	; 0x07
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e2       	ldi	r20, 0x20	; 32
 50c:	50 e4       	ldi	r21, 0x40	; 64
 50e:	11 d0       	rcall	.+34     	; 0x532 <__subsf3>
 510:	22 e0       	ldi	r18, 0x02	; 2
 512:	3b e2       	ldi	r19, 0x2B	; 43
 514:	47 e0       	ldi	r20, 0x07	; 7
 516:	5d e3       	ldi	r21, 0x3D	; 61
 518:	71 d0       	rcall	.+226    	; 0x5fc <__divsf3>
 51a:	d8 d0       	rcall	.+432    	; 0x6cc <__fixsfsi>
 51c:	68 87       	std	Y+8, r22	; 0x08
	return w;
 51e:	88 85       	ldd	r24, Y+8	; 0x08
 520:	28 96       	adiw	r28, 0x08	; 8
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <__subsf3>:
 532:	50 58       	subi	r21, 0x80	; 128

00000534 <__addsf3>:
 534:	bb 27       	eor	r27, r27
 536:	aa 27       	eor	r26, r26
 538:	0e d0       	rcall	.+28     	; 0x556 <__addsf3x>
 53a:	4d c1       	rjmp	.+666    	; 0x7d6 <__fp_round>
 53c:	3e d1       	rcall	.+636    	; 0x7ba <__fp_pscA>
 53e:	30 f0       	brcs	.+12     	; 0x54c <__addsf3+0x18>
 540:	43 d1       	rcall	.+646    	; 0x7c8 <__fp_pscB>
 542:	20 f0       	brcs	.+8      	; 0x54c <__addsf3+0x18>
 544:	31 f4       	brne	.+12     	; 0x552 <__addsf3+0x1e>
 546:	9f 3f       	cpi	r25, 0xFF	; 255
 548:	11 f4       	brne	.+4      	; 0x54e <__addsf3+0x1a>
 54a:	1e f4       	brtc	.+6      	; 0x552 <__addsf3+0x1e>
 54c:	33 c1       	rjmp	.+614    	; 0x7b4 <__fp_nan>
 54e:	0e f4       	brtc	.+2      	; 0x552 <__addsf3+0x1e>
 550:	e0 95       	com	r30
 552:	e7 fb       	bst	r30, 7
 554:	29 c1       	rjmp	.+594    	; 0x7a8 <__fp_inf>

00000556 <__addsf3x>:
 556:	e9 2f       	mov	r30, r25
 558:	4f d1       	rcall	.+670    	; 0x7f8 <__fp_split3>
 55a:	80 f3       	brcs	.-32     	; 0x53c <__addsf3+0x8>
 55c:	ba 17       	cp	r27, r26
 55e:	62 07       	cpc	r22, r18
 560:	73 07       	cpc	r23, r19
 562:	84 07       	cpc	r24, r20
 564:	95 07       	cpc	r25, r21
 566:	18 f0       	brcs	.+6      	; 0x56e <__addsf3x+0x18>
 568:	71 f4       	brne	.+28     	; 0x586 <__addsf3x+0x30>
 56a:	9e f5       	brtc	.+102    	; 0x5d2 <__addsf3x+0x7c>
 56c:	67 c1       	rjmp	.+718    	; 0x83c <__fp_zero>
 56e:	0e f4       	brtc	.+2      	; 0x572 <__addsf3x+0x1c>
 570:	e0 95       	com	r30
 572:	0b 2e       	mov	r0, r27
 574:	ba 2f       	mov	r27, r26
 576:	a0 2d       	mov	r26, r0
 578:	0b 01       	movw	r0, r22
 57a:	b9 01       	movw	r22, r18
 57c:	90 01       	movw	r18, r0
 57e:	0c 01       	movw	r0, r24
 580:	ca 01       	movw	r24, r20
 582:	a0 01       	movw	r20, r0
 584:	11 24       	eor	r1, r1
 586:	ff 27       	eor	r31, r31
 588:	59 1b       	sub	r21, r25
 58a:	99 f0       	breq	.+38     	; 0x5b2 <__addsf3x+0x5c>
 58c:	59 3f       	cpi	r21, 0xF9	; 249
 58e:	50 f4       	brcc	.+20     	; 0x5a4 <__addsf3x+0x4e>
 590:	50 3e       	cpi	r21, 0xE0	; 224
 592:	68 f1       	brcs	.+90     	; 0x5ee <__addsf3x+0x98>
 594:	1a 16       	cp	r1, r26
 596:	f0 40       	sbci	r31, 0x00	; 0
 598:	a2 2f       	mov	r26, r18
 59a:	23 2f       	mov	r18, r19
 59c:	34 2f       	mov	r19, r20
 59e:	44 27       	eor	r20, r20
 5a0:	58 5f       	subi	r21, 0xF8	; 248
 5a2:	f3 cf       	rjmp	.-26     	; 0x58a <__addsf3x+0x34>
 5a4:	46 95       	lsr	r20
 5a6:	37 95       	ror	r19
 5a8:	27 95       	ror	r18
 5aa:	a7 95       	ror	r26
 5ac:	f0 40       	sbci	r31, 0x00	; 0
 5ae:	53 95       	inc	r21
 5b0:	c9 f7       	brne	.-14     	; 0x5a4 <__addsf3x+0x4e>
 5b2:	7e f4       	brtc	.+30     	; 0x5d2 <__addsf3x+0x7c>
 5b4:	1f 16       	cp	r1, r31
 5b6:	ba 0b       	sbc	r27, r26
 5b8:	62 0b       	sbc	r22, r18
 5ba:	73 0b       	sbc	r23, r19
 5bc:	84 0b       	sbc	r24, r20
 5be:	ba f0       	brmi	.+46     	; 0x5ee <__addsf3x+0x98>
 5c0:	91 50       	subi	r25, 0x01	; 1
 5c2:	a1 f0       	breq	.+40     	; 0x5ec <__addsf3x+0x96>
 5c4:	ff 0f       	add	r31, r31
 5c6:	bb 1f       	adc	r27, r27
 5c8:	66 1f       	adc	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	c2 f7       	brpl	.-16     	; 0x5c0 <__addsf3x+0x6a>
 5d0:	0e c0       	rjmp	.+28     	; 0x5ee <__addsf3x+0x98>
 5d2:	ba 0f       	add	r27, r26
 5d4:	62 1f       	adc	r22, r18
 5d6:	73 1f       	adc	r23, r19
 5d8:	84 1f       	adc	r24, r20
 5da:	48 f4       	brcc	.+18     	; 0x5ee <__addsf3x+0x98>
 5dc:	87 95       	ror	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b7 95       	ror	r27
 5e4:	f7 95       	ror	r31
 5e6:	9e 3f       	cpi	r25, 0xFE	; 254
 5e8:	08 f0       	brcs	.+2      	; 0x5ec <__addsf3x+0x96>
 5ea:	b3 cf       	rjmp	.-154    	; 0x552 <__addsf3+0x1e>
 5ec:	93 95       	inc	r25
 5ee:	88 0f       	add	r24, r24
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <__addsf3x+0x9e>
 5f2:	99 27       	eor	r25, r25
 5f4:	ee 0f       	add	r30, r30
 5f6:	97 95       	ror	r25
 5f8:	87 95       	ror	r24
 5fa:	08 95       	ret

000005fc <__divsf3>:
 5fc:	0c d0       	rcall	.+24     	; 0x616 <__divsf3x>
 5fe:	eb c0       	rjmp	.+470    	; 0x7d6 <__fp_round>
 600:	e3 d0       	rcall	.+454    	; 0x7c8 <__fp_pscB>
 602:	40 f0       	brcs	.+16     	; 0x614 <__divsf3+0x18>
 604:	da d0       	rcall	.+436    	; 0x7ba <__fp_pscA>
 606:	30 f0       	brcs	.+12     	; 0x614 <__divsf3+0x18>
 608:	21 f4       	brne	.+8      	; 0x612 <__divsf3+0x16>
 60a:	5f 3f       	cpi	r21, 0xFF	; 255
 60c:	19 f0       	breq	.+6      	; 0x614 <__divsf3+0x18>
 60e:	cc c0       	rjmp	.+408    	; 0x7a8 <__fp_inf>
 610:	51 11       	cpse	r21, r1
 612:	15 c1       	rjmp	.+554    	; 0x83e <__fp_szero>
 614:	cf c0       	rjmp	.+414    	; 0x7b4 <__fp_nan>

00000616 <__divsf3x>:
 616:	f0 d0       	rcall	.+480    	; 0x7f8 <__fp_split3>
 618:	98 f3       	brcs	.-26     	; 0x600 <__divsf3+0x4>

0000061a <__divsf3_pse>:
 61a:	99 23       	and	r25, r25
 61c:	c9 f3       	breq	.-14     	; 0x610 <__divsf3+0x14>
 61e:	55 23       	and	r21, r21
 620:	b1 f3       	breq	.-20     	; 0x60e <__divsf3+0x12>
 622:	95 1b       	sub	r25, r21
 624:	55 0b       	sbc	r21, r21
 626:	bb 27       	eor	r27, r27
 628:	aa 27       	eor	r26, r26
 62a:	62 17       	cp	r22, r18
 62c:	73 07       	cpc	r23, r19
 62e:	84 07       	cpc	r24, r20
 630:	38 f0       	brcs	.+14     	; 0x640 <__divsf3_pse+0x26>
 632:	9f 5f       	subi	r25, 0xFF	; 255
 634:	5f 4f       	sbci	r21, 0xFF	; 255
 636:	22 0f       	add	r18, r18
 638:	33 1f       	adc	r19, r19
 63a:	44 1f       	adc	r20, r20
 63c:	aa 1f       	adc	r26, r26
 63e:	a9 f3       	breq	.-22     	; 0x62a <__divsf3_pse+0x10>
 640:	33 d0       	rcall	.+102    	; 0x6a8 <__divsf3_pse+0x8e>
 642:	0e 2e       	mov	r0, r30
 644:	3a f0       	brmi	.+14     	; 0x654 <__divsf3_pse+0x3a>
 646:	e0 e8       	ldi	r30, 0x80	; 128
 648:	30 d0       	rcall	.+96     	; 0x6aa <__divsf3_pse+0x90>
 64a:	91 50       	subi	r25, 0x01	; 1
 64c:	50 40       	sbci	r21, 0x00	; 0
 64e:	e6 95       	lsr	r30
 650:	00 1c       	adc	r0, r0
 652:	ca f7       	brpl	.-14     	; 0x646 <__divsf3_pse+0x2c>
 654:	29 d0       	rcall	.+82     	; 0x6a8 <__divsf3_pse+0x8e>
 656:	fe 2f       	mov	r31, r30
 658:	27 d0       	rcall	.+78     	; 0x6a8 <__divsf3_pse+0x8e>
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	bb 1f       	adc	r27, r27
 662:	26 17       	cp	r18, r22
 664:	37 07       	cpc	r19, r23
 666:	48 07       	cpc	r20, r24
 668:	ab 07       	cpc	r26, r27
 66a:	b0 e8       	ldi	r27, 0x80	; 128
 66c:	09 f0       	breq	.+2      	; 0x670 <__divsf3_pse+0x56>
 66e:	bb 0b       	sbc	r27, r27
 670:	80 2d       	mov	r24, r0
 672:	bf 01       	movw	r22, r30
 674:	ff 27       	eor	r31, r31
 676:	93 58       	subi	r25, 0x83	; 131
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	2a f0       	brmi	.+10     	; 0x686 <__divsf3_pse+0x6c>
 67c:	9e 3f       	cpi	r25, 0xFE	; 254
 67e:	51 05       	cpc	r21, r1
 680:	68 f0       	brcs	.+26     	; 0x69c <__divsf3_pse+0x82>
 682:	92 c0       	rjmp	.+292    	; 0x7a8 <__fp_inf>
 684:	dc c0       	rjmp	.+440    	; 0x83e <__fp_szero>
 686:	5f 3f       	cpi	r21, 0xFF	; 255
 688:	ec f3       	brlt	.-6      	; 0x684 <__divsf3_pse+0x6a>
 68a:	98 3e       	cpi	r25, 0xE8	; 232
 68c:	dc f3       	brlt	.-10     	; 0x684 <__divsf3_pse+0x6a>
 68e:	86 95       	lsr	r24
 690:	77 95       	ror	r23
 692:	67 95       	ror	r22
 694:	b7 95       	ror	r27
 696:	f7 95       	ror	r31
 698:	9f 5f       	subi	r25, 0xFF	; 255
 69a:	c9 f7       	brne	.-14     	; 0x68e <__divsf3_pse+0x74>
 69c:	88 0f       	add	r24, r24
 69e:	91 1d       	adc	r25, r1
 6a0:	96 95       	lsr	r25
 6a2:	87 95       	ror	r24
 6a4:	97 f9       	bld	r25, 7
 6a6:	08 95       	ret
 6a8:	e1 e0       	ldi	r30, 0x01	; 1
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	bb 1f       	adc	r27, r27
 6b2:	62 17       	cp	r22, r18
 6b4:	73 07       	cpc	r23, r19
 6b6:	84 07       	cpc	r24, r20
 6b8:	ba 07       	cpc	r27, r26
 6ba:	20 f0       	brcs	.+8      	; 0x6c4 <__divsf3_pse+0xaa>
 6bc:	62 1b       	sub	r22, r18
 6be:	73 0b       	sbc	r23, r19
 6c0:	84 0b       	sbc	r24, r20
 6c2:	ba 0b       	sbc	r27, r26
 6c4:	ee 1f       	adc	r30, r30
 6c6:	88 f7       	brcc	.-30     	; 0x6aa <__divsf3_pse+0x90>
 6c8:	e0 95       	com	r30
 6ca:	08 95       	ret

000006cc <__fixsfsi>:
 6cc:	04 d0       	rcall	.+8      	; 0x6d6 <__fixunssfsi>
 6ce:	68 94       	set
 6d0:	b1 11       	cpse	r27, r1
 6d2:	b5 c0       	rjmp	.+362    	; 0x83e <__fp_szero>
 6d4:	08 95       	ret

000006d6 <__fixunssfsi>:
 6d6:	98 d0       	rcall	.+304    	; 0x808 <__fp_splitA>
 6d8:	88 f0       	brcs	.+34     	; 0x6fc <__fixunssfsi+0x26>
 6da:	9f 57       	subi	r25, 0x7F	; 127
 6dc:	90 f0       	brcs	.+36     	; 0x702 <__fixunssfsi+0x2c>
 6de:	b9 2f       	mov	r27, r25
 6e0:	99 27       	eor	r25, r25
 6e2:	b7 51       	subi	r27, 0x17	; 23
 6e4:	a0 f0       	brcs	.+40     	; 0x70e <__fixunssfsi+0x38>
 6e6:	d1 f0       	breq	.+52     	; 0x71c <__fixunssfsi+0x46>
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	1a f0       	brmi	.+6      	; 0x6f8 <__fixunssfsi+0x22>
 6f2:	ba 95       	dec	r27
 6f4:	c9 f7       	brne	.-14     	; 0x6e8 <__fixunssfsi+0x12>
 6f6:	12 c0       	rjmp	.+36     	; 0x71c <__fixunssfsi+0x46>
 6f8:	b1 30       	cpi	r27, 0x01	; 1
 6fa:	81 f0       	breq	.+32     	; 0x71c <__fixunssfsi+0x46>
 6fc:	9f d0       	rcall	.+318    	; 0x83c <__fp_zero>
 6fe:	b1 e0       	ldi	r27, 0x01	; 1
 700:	08 95       	ret
 702:	9c c0       	rjmp	.+312    	; 0x83c <__fp_zero>
 704:	67 2f       	mov	r22, r23
 706:	78 2f       	mov	r23, r24
 708:	88 27       	eor	r24, r24
 70a:	b8 5f       	subi	r27, 0xF8	; 248
 70c:	39 f0       	breq	.+14     	; 0x71c <__fixunssfsi+0x46>
 70e:	b9 3f       	cpi	r27, 0xF9	; 249
 710:	cc f3       	brlt	.-14     	; 0x704 <__fixunssfsi+0x2e>
 712:	86 95       	lsr	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b3 95       	inc	r27
 71a:	d9 f7       	brne	.-10     	; 0x712 <__fixunssfsi+0x3c>
 71c:	3e f4       	brtc	.+14     	; 0x72c <__fixunssfsi+0x56>
 71e:	90 95       	com	r25
 720:	80 95       	com	r24
 722:	70 95       	com	r23
 724:	61 95       	neg	r22
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	8f 4f       	sbci	r24, 0xFF	; 255
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	08 95       	ret

0000072e <__floatunsisf>:
 72e:	e8 94       	clt
 730:	09 c0       	rjmp	.+18     	; 0x744 <__floatsisf+0x12>

00000732 <__floatsisf>:
 732:	97 fb       	bst	r25, 7
 734:	3e f4       	brtc	.+14     	; 0x744 <__floatsisf+0x12>
 736:	90 95       	com	r25
 738:	80 95       	com	r24
 73a:	70 95       	com	r23
 73c:	61 95       	neg	r22
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	99 23       	and	r25, r25
 746:	a9 f0       	breq	.+42     	; 0x772 <__floatsisf+0x40>
 748:	f9 2f       	mov	r31, r25
 74a:	96 e9       	ldi	r25, 0x96	; 150
 74c:	bb 27       	eor	r27, r27
 74e:	93 95       	inc	r25
 750:	f6 95       	lsr	r31
 752:	87 95       	ror	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b7 95       	ror	r27
 75a:	f1 11       	cpse	r31, r1
 75c:	f8 cf       	rjmp	.-16     	; 0x74e <__floatsisf+0x1c>
 75e:	fa f4       	brpl	.+62     	; 0x79e <__floatsisf+0x6c>
 760:	bb 0f       	add	r27, r27
 762:	11 f4       	brne	.+4      	; 0x768 <__floatsisf+0x36>
 764:	60 ff       	sbrs	r22, 0
 766:	1b c0       	rjmp	.+54     	; 0x79e <__floatsisf+0x6c>
 768:	6f 5f       	subi	r22, 0xFF	; 255
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	8f 4f       	sbci	r24, 0xFF	; 255
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	16 c0       	rjmp	.+44     	; 0x79e <__floatsisf+0x6c>
 772:	88 23       	and	r24, r24
 774:	11 f0       	breq	.+4      	; 0x77a <__floatsisf+0x48>
 776:	96 e9       	ldi	r25, 0x96	; 150
 778:	11 c0       	rjmp	.+34     	; 0x79c <__floatsisf+0x6a>
 77a:	77 23       	and	r23, r23
 77c:	21 f0       	breq	.+8      	; 0x786 <__floatsisf+0x54>
 77e:	9e e8       	ldi	r25, 0x8E	; 142
 780:	87 2f       	mov	r24, r23
 782:	76 2f       	mov	r23, r22
 784:	05 c0       	rjmp	.+10     	; 0x790 <__floatsisf+0x5e>
 786:	66 23       	and	r22, r22
 788:	71 f0       	breq	.+28     	; 0x7a6 <__floatsisf+0x74>
 78a:	96 e8       	ldi	r25, 0x86	; 134
 78c:	86 2f       	mov	r24, r22
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	2a f0       	brmi	.+10     	; 0x79e <__floatsisf+0x6c>
 794:	9a 95       	dec	r25
 796:	66 0f       	add	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	88 1f       	adc	r24, r24
 79c:	da f7       	brpl	.-10     	; 0x794 <__floatsisf+0x62>
 79e:	88 0f       	add	r24, r24
 7a0:	96 95       	lsr	r25
 7a2:	87 95       	ror	r24
 7a4:	97 f9       	bld	r25, 7
 7a6:	08 95       	ret

000007a8 <__fp_inf>:
 7a8:	97 f9       	bld	r25, 7
 7aa:	9f 67       	ori	r25, 0x7F	; 127
 7ac:	80 e8       	ldi	r24, 0x80	; 128
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	08 95       	ret

000007b4 <__fp_nan>:
 7b4:	9f ef       	ldi	r25, 0xFF	; 255
 7b6:	80 ec       	ldi	r24, 0xC0	; 192
 7b8:	08 95       	ret

000007ba <__fp_pscA>:
 7ba:	00 24       	eor	r0, r0
 7bc:	0a 94       	dec	r0
 7be:	16 16       	cp	r1, r22
 7c0:	17 06       	cpc	r1, r23
 7c2:	18 06       	cpc	r1, r24
 7c4:	09 06       	cpc	r0, r25
 7c6:	08 95       	ret

000007c8 <__fp_pscB>:
 7c8:	00 24       	eor	r0, r0
 7ca:	0a 94       	dec	r0
 7cc:	12 16       	cp	r1, r18
 7ce:	13 06       	cpc	r1, r19
 7d0:	14 06       	cpc	r1, r20
 7d2:	05 06       	cpc	r0, r21
 7d4:	08 95       	ret

000007d6 <__fp_round>:
 7d6:	09 2e       	mov	r0, r25
 7d8:	03 94       	inc	r0
 7da:	00 0c       	add	r0, r0
 7dc:	11 f4       	brne	.+4      	; 0x7e2 <__fp_round+0xc>
 7de:	88 23       	and	r24, r24
 7e0:	52 f0       	brmi	.+20     	; 0x7f6 <__fp_round+0x20>
 7e2:	bb 0f       	add	r27, r27
 7e4:	40 f4       	brcc	.+16     	; 0x7f6 <__fp_round+0x20>
 7e6:	bf 2b       	or	r27, r31
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__fp_round+0x18>
 7ea:	60 ff       	sbrs	r22, 0
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <__fp_round+0x20>
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	08 95       	ret

000007f8 <__fp_split3>:
 7f8:	57 fd       	sbrc	r21, 7
 7fa:	90 58       	subi	r25, 0x80	; 128
 7fc:	44 0f       	add	r20, r20
 7fe:	55 1f       	adc	r21, r21
 800:	59 f0       	breq	.+22     	; 0x818 <__fp_splitA+0x10>
 802:	5f 3f       	cpi	r21, 0xFF	; 255
 804:	71 f0       	breq	.+28     	; 0x822 <__fp_splitA+0x1a>
 806:	47 95       	ror	r20

00000808 <__fp_splitA>:
 808:	88 0f       	add	r24, r24
 80a:	97 fb       	bst	r25, 7
 80c:	99 1f       	adc	r25, r25
 80e:	61 f0       	breq	.+24     	; 0x828 <__fp_splitA+0x20>
 810:	9f 3f       	cpi	r25, 0xFF	; 255
 812:	79 f0       	breq	.+30     	; 0x832 <__fp_splitA+0x2a>
 814:	87 95       	ror	r24
 816:	08 95       	ret
 818:	12 16       	cp	r1, r18
 81a:	13 06       	cpc	r1, r19
 81c:	14 06       	cpc	r1, r20
 81e:	55 1f       	adc	r21, r21
 820:	f2 cf       	rjmp	.-28     	; 0x806 <__fp_split3+0xe>
 822:	46 95       	lsr	r20
 824:	f1 df       	rcall	.-30     	; 0x808 <__fp_splitA>
 826:	08 c0       	rjmp	.+16     	; 0x838 <__fp_splitA+0x30>
 828:	16 16       	cp	r1, r22
 82a:	17 06       	cpc	r1, r23
 82c:	18 06       	cpc	r1, r24
 82e:	99 1f       	adc	r25, r25
 830:	f1 cf       	rjmp	.-30     	; 0x814 <__fp_splitA+0xc>
 832:	86 95       	lsr	r24
 834:	71 05       	cpc	r23, r1
 836:	61 05       	cpc	r22, r1
 838:	08 94       	sec
 83a:	08 95       	ret

0000083c <__fp_zero>:
 83c:	e8 94       	clt

0000083e <__fp_szero>:
 83e:	bb 27       	eor	r27, r27
 840:	66 27       	eor	r22, r22
 842:	77 27       	eor	r23, r23
 844:	cb 01       	movw	r24, r22
 846:	97 f9       	bld	r25, 7
 848:	08 95       	ret

0000084a <__mulsf3>:
 84a:	0b d0       	rcall	.+22     	; 0x862 <__mulsf3x>
 84c:	c4 cf       	rjmp	.-120    	; 0x7d6 <__fp_round>
 84e:	b5 df       	rcall	.-150    	; 0x7ba <__fp_pscA>
 850:	28 f0       	brcs	.+10     	; 0x85c <__mulsf3+0x12>
 852:	ba df       	rcall	.-140    	; 0x7c8 <__fp_pscB>
 854:	18 f0       	brcs	.+6      	; 0x85c <__mulsf3+0x12>
 856:	95 23       	and	r25, r21
 858:	09 f0       	breq	.+2      	; 0x85c <__mulsf3+0x12>
 85a:	a6 cf       	rjmp	.-180    	; 0x7a8 <__fp_inf>
 85c:	ab cf       	rjmp	.-170    	; 0x7b4 <__fp_nan>
 85e:	11 24       	eor	r1, r1
 860:	ee cf       	rjmp	.-36     	; 0x83e <__fp_szero>

00000862 <__mulsf3x>:
 862:	ca df       	rcall	.-108    	; 0x7f8 <__fp_split3>
 864:	a0 f3       	brcs	.-24     	; 0x84e <__mulsf3+0x4>

00000866 <__mulsf3_pse>:
 866:	95 9f       	mul	r25, r21
 868:	d1 f3       	breq	.-12     	; 0x85e <__mulsf3+0x14>
 86a:	95 0f       	add	r25, r21
 86c:	50 e0       	ldi	r21, 0x00	; 0
 86e:	55 1f       	adc	r21, r21
 870:	62 9f       	mul	r22, r18
 872:	f0 01       	movw	r30, r0
 874:	72 9f       	mul	r23, r18
 876:	bb 27       	eor	r27, r27
 878:	f0 0d       	add	r31, r0
 87a:	b1 1d       	adc	r27, r1
 87c:	63 9f       	mul	r22, r19
 87e:	aa 27       	eor	r26, r26
 880:	f0 0d       	add	r31, r0
 882:	b1 1d       	adc	r27, r1
 884:	aa 1f       	adc	r26, r26
 886:	64 9f       	mul	r22, r20
 888:	66 27       	eor	r22, r22
 88a:	b0 0d       	add	r27, r0
 88c:	a1 1d       	adc	r26, r1
 88e:	66 1f       	adc	r22, r22
 890:	82 9f       	mul	r24, r18
 892:	22 27       	eor	r18, r18
 894:	b0 0d       	add	r27, r0
 896:	a1 1d       	adc	r26, r1
 898:	62 1f       	adc	r22, r18
 89a:	73 9f       	mul	r23, r19
 89c:	b0 0d       	add	r27, r0
 89e:	a1 1d       	adc	r26, r1
 8a0:	62 1f       	adc	r22, r18
 8a2:	83 9f       	mul	r24, r19
 8a4:	a0 0d       	add	r26, r0
 8a6:	61 1d       	adc	r22, r1
 8a8:	22 1f       	adc	r18, r18
 8aa:	74 9f       	mul	r23, r20
 8ac:	33 27       	eor	r19, r19
 8ae:	a0 0d       	add	r26, r0
 8b0:	61 1d       	adc	r22, r1
 8b2:	23 1f       	adc	r18, r19
 8b4:	84 9f       	mul	r24, r20
 8b6:	60 0d       	add	r22, r0
 8b8:	21 1d       	adc	r18, r1
 8ba:	82 2f       	mov	r24, r18
 8bc:	76 2f       	mov	r23, r22
 8be:	6a 2f       	mov	r22, r26
 8c0:	11 24       	eor	r1, r1
 8c2:	9f 57       	subi	r25, 0x7F	; 127
 8c4:	50 40       	sbci	r21, 0x00	; 0
 8c6:	8a f0       	brmi	.+34     	; 0x8ea <__mulsf3_pse+0x84>
 8c8:	e1 f0       	breq	.+56     	; 0x902 <__mulsf3_pse+0x9c>
 8ca:	88 23       	and	r24, r24
 8cc:	4a f0       	brmi	.+18     	; 0x8e0 <__mulsf3_pse+0x7a>
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	bb 1f       	adc	r27, r27
 8d4:	66 1f       	adc	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	88 1f       	adc	r24, r24
 8da:	91 50       	subi	r25, 0x01	; 1
 8dc:	50 40       	sbci	r21, 0x00	; 0
 8de:	a9 f7       	brne	.-22     	; 0x8ca <__mulsf3_pse+0x64>
 8e0:	9e 3f       	cpi	r25, 0xFE	; 254
 8e2:	51 05       	cpc	r21, r1
 8e4:	70 f0       	brcs	.+28     	; 0x902 <__mulsf3_pse+0x9c>
 8e6:	60 cf       	rjmp	.-320    	; 0x7a8 <__fp_inf>
 8e8:	aa cf       	rjmp	.-172    	; 0x83e <__fp_szero>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	ec f3       	brlt	.-6      	; 0x8e8 <__mulsf3_pse+0x82>
 8ee:	98 3e       	cpi	r25, 0xE8	; 232
 8f0:	dc f3       	brlt	.-10     	; 0x8e8 <__mulsf3_pse+0x82>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b7 95       	ror	r27
 8fa:	f7 95       	ror	r31
 8fc:	e7 95       	ror	r30
 8fe:	9f 5f       	subi	r25, 0xFF	; 255
 900:	c1 f7       	brne	.-16     	; 0x8f2 <__mulsf3_pse+0x8c>
 902:	fe 2b       	or	r31, r30
 904:	88 0f       	add	r24, r24
 906:	91 1d       	adc	r25, r1
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	97 f9       	bld	r25, 7
 90e:	08 95       	ret

00000910 <pow>:
 910:	fa 01       	movw	r30, r20
 912:	ee 0f       	add	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	30 96       	adiw	r30, 0x00	; 0
 918:	21 05       	cpc	r18, r1
 91a:	31 05       	cpc	r19, r1
 91c:	99 f1       	breq	.+102    	; 0x984 <pow+0x74>
 91e:	61 15       	cp	r22, r1
 920:	71 05       	cpc	r23, r1
 922:	61 f4       	brne	.+24     	; 0x93c <pow+0x2c>
 924:	80 38       	cpi	r24, 0x80	; 128
 926:	bf e3       	ldi	r27, 0x3F	; 63
 928:	9b 07       	cpc	r25, r27
 92a:	49 f1       	breq	.+82     	; 0x97e <pow+0x6e>
 92c:	68 94       	set
 92e:	90 38       	cpi	r25, 0x80	; 128
 930:	81 05       	cpc	r24, r1
 932:	61 f0       	breq	.+24     	; 0x94c <pow+0x3c>
 934:	80 38       	cpi	r24, 0x80	; 128
 936:	bf ef       	ldi	r27, 0xFF	; 255
 938:	9b 07       	cpc	r25, r27
 93a:	41 f0       	breq	.+16     	; 0x94c <pow+0x3c>
 93c:	99 23       	and	r25, r25
 93e:	42 f5       	brpl	.+80     	; 0x990 <pow+0x80>
 940:	ff 3f       	cpi	r31, 0xFF	; 255
 942:	e1 05       	cpc	r30, r1
 944:	31 05       	cpc	r19, r1
 946:	21 05       	cpc	r18, r1
 948:	11 f1       	breq	.+68     	; 0x98e <pow+0x7e>
 94a:	e8 94       	clt
 94c:	08 94       	sec
 94e:	e7 95       	ror	r30
 950:	d9 01       	movw	r26, r18
 952:	aa 23       	and	r26, r26
 954:	29 f4       	brne	.+10     	; 0x960 <pow+0x50>
 956:	ab 2f       	mov	r26, r27
 958:	be 2f       	mov	r27, r30
 95a:	f8 5f       	subi	r31, 0xF8	; 248
 95c:	d0 f3       	brcs	.-12     	; 0x952 <pow+0x42>
 95e:	10 c0       	rjmp	.+32     	; 0x980 <pow+0x70>
 960:	ff 5f       	subi	r31, 0xFF	; 255
 962:	70 f4       	brcc	.+28     	; 0x980 <pow+0x70>
 964:	a6 95       	lsr	r26
 966:	e0 f7       	brcc	.-8      	; 0x960 <pow+0x50>
 968:	f7 39       	cpi	r31, 0x97	; 151
 96a:	50 f0       	brcs	.+20     	; 0x980 <pow+0x70>
 96c:	19 f0       	breq	.+6      	; 0x974 <pow+0x64>
 96e:	ff 3a       	cpi	r31, 0xAF	; 175
 970:	38 f4       	brcc	.+14     	; 0x980 <pow+0x70>
 972:	9f 77       	andi	r25, 0x7F	; 127
 974:	9f 93       	push	r25
 976:	0c d0       	rcall	.+24     	; 0x990 <pow+0x80>
 978:	0f 90       	pop	r0
 97a:	07 fc       	sbrc	r0, 7
 97c:	90 58       	subi	r25, 0x80	; 128
 97e:	08 95       	ret
 980:	3e f0       	brts	.+14     	; 0x990 <pow+0x80>
 982:	18 cf       	rjmp	.-464    	; 0x7b4 <__fp_nan>
 984:	60 e0       	ldi	r22, 0x00	; 0
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	80 e8       	ldi	r24, 0x80	; 128
 98a:	9f e3       	ldi	r25, 0x3F	; 63
 98c:	08 95       	ret
 98e:	4f e7       	ldi	r20, 0x7F	; 127
 990:	9f 77       	andi	r25, 0x7F	; 127
 992:	5f 93       	push	r21
 994:	4f 93       	push	r20
 996:	3f 93       	push	r19
 998:	2f 93       	push	r18
 99a:	9e d0       	rcall	.+316    	; 0xad8 <log>
 99c:	2f 91       	pop	r18
 99e:	3f 91       	pop	r19
 9a0:	4f 91       	pop	r20
 9a2:	5f 91       	pop	r21
 9a4:	52 df       	rcall	.-348    	; 0x84a <__mulsf3>
 9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <exp>
 9a8:	19 f4       	brne	.+6      	; 0x9b0 <pow+0xa0>
 9aa:	0e f0       	brts	.+2      	; 0x9ae <pow+0x9e>
 9ac:	fd ce       	rjmp	.-518    	; 0x7a8 <__fp_inf>
 9ae:	46 cf       	rjmp	.-372    	; 0x83c <__fp_zero>
 9b0:	01 cf       	rjmp	.-510    	; 0x7b4 <__fp_nan>

000009b2 <exp>:
 9b2:	2a df       	rcall	.-428    	; 0x808 <__fp_splitA>
 9b4:	c8 f3       	brcs	.-14     	; 0x9a8 <pow+0x98>
 9b6:	96 38       	cpi	r25, 0x86	; 134
 9b8:	c0 f7       	brcc	.-16     	; 0x9aa <pow+0x9a>
 9ba:	07 f8       	bld	r0, 7
 9bc:	0f 92       	push	r0
 9be:	e8 94       	clt
 9c0:	2b e3       	ldi	r18, 0x3B	; 59
 9c2:	3a ea       	ldi	r19, 0xAA	; 170
 9c4:	48 eb       	ldi	r20, 0xB8	; 184
 9c6:	5f e7       	ldi	r21, 0x7F	; 127
 9c8:	4e df       	rcall	.-356    	; 0x866 <__mulsf3_pse>
 9ca:	0f 92       	push	r0
 9cc:	0f 92       	push	r0
 9ce:	0f 92       	push	r0
 9d0:	4d b7       	in	r20, 0x3d	; 61
 9d2:	5e b7       	in	r21, 0x3e	; 62
 9d4:	0f 92       	push	r0
 9d6:	c0 d0       	rcall	.+384    	; 0xb58 <modf>
 9d8:	ec e8       	ldi	r30, 0x8C	; 140
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	16 d0       	rcall	.+44     	; 0xa0a <__fp_powser>
 9de:	4f 91       	pop	r20
 9e0:	5f 91       	pop	r21
 9e2:	ef 91       	pop	r30
 9e4:	ff 91       	pop	r31
 9e6:	e5 95       	asr	r30
 9e8:	ee 1f       	adc	r30, r30
 9ea:	ff 1f       	adc	r31, r31
 9ec:	49 f0       	breq	.+18     	; 0xa00 <exp+0x4e>
 9ee:	fe 57       	subi	r31, 0x7E	; 126
 9f0:	e0 68       	ori	r30, 0x80	; 128
 9f2:	44 27       	eor	r20, r20
 9f4:	ee 0f       	add	r30, r30
 9f6:	44 1f       	adc	r20, r20
 9f8:	fa 95       	dec	r31
 9fa:	e1 f7       	brne	.-8      	; 0x9f4 <exp+0x42>
 9fc:	41 95       	neg	r20
 9fe:	55 0b       	sbc	r21, r21
 a00:	32 d0       	rcall	.+100    	; 0xa66 <ldexp>
 a02:	0f 90       	pop	r0
 a04:	07 fe       	sbrs	r0, 7
 a06:	26 c0       	rjmp	.+76     	; 0xa54 <inverse>
 a08:	08 95       	ret

00000a0a <__fp_powser>:
 a0a:	df 93       	push	r29
 a0c:	cf 93       	push	r28
 a0e:	1f 93       	push	r17
 a10:	0f 93       	push	r16
 a12:	ff 92       	push	r15
 a14:	ef 92       	push	r14
 a16:	df 92       	push	r13
 a18:	7b 01       	movw	r14, r22
 a1a:	8c 01       	movw	r16, r24
 a1c:	68 94       	set
 a1e:	05 c0       	rjmp	.+10     	; 0xa2a <__fp_powser+0x20>
 a20:	da 2e       	mov	r13, r26
 a22:	ef 01       	movw	r28, r30
 a24:	1e df       	rcall	.-452    	; 0x862 <__mulsf3x>
 a26:	fe 01       	movw	r30, r28
 a28:	e8 94       	clt
 a2a:	a5 91       	lpm	r26, Z+
 a2c:	25 91       	lpm	r18, Z+
 a2e:	35 91       	lpm	r19, Z+
 a30:	45 91       	lpm	r20, Z+
 a32:	55 91       	lpm	r21, Z+
 a34:	ae f3       	brts	.-22     	; 0xa20 <__fp_powser+0x16>
 a36:	ef 01       	movw	r28, r30
 a38:	8e dd       	rcall	.-1252   	; 0x556 <__addsf3x>
 a3a:	fe 01       	movw	r30, r28
 a3c:	97 01       	movw	r18, r14
 a3e:	a8 01       	movw	r20, r16
 a40:	da 94       	dec	r13
 a42:	79 f7       	brne	.-34     	; 0xa22 <__fp_powser+0x18>
 a44:	df 90       	pop	r13
 a46:	ef 90       	pop	r14
 a48:	ff 90       	pop	r15
 a4a:	0f 91       	pop	r16
 a4c:	1f 91       	pop	r17
 a4e:	cf 91       	pop	r28
 a50:	df 91       	pop	r29
 a52:	08 95       	ret

00000a54 <inverse>:
 a54:	9b 01       	movw	r18, r22
 a56:	ac 01       	movw	r20, r24
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	80 e8       	ldi	r24, 0x80	; 128
 a5e:	9f e3       	ldi	r25, 0x3F	; 63
 a60:	cd cd       	rjmp	.-1126   	; 0x5fc <__divsf3>
 a62:	a2 ce       	rjmp	.-700    	; 0x7a8 <__fp_inf>
 a64:	ac c0       	rjmp	.+344    	; 0xbbe <__fp_mpack>

00000a66 <ldexp>:
 a66:	d0 de       	rcall	.-608    	; 0x808 <__fp_splitA>
 a68:	e8 f3       	brcs	.-6      	; 0xa64 <inverse+0x10>
 a6a:	99 23       	and	r25, r25
 a6c:	d9 f3       	breq	.-10     	; 0xa64 <inverse+0x10>
 a6e:	94 0f       	add	r25, r20
 a70:	51 1d       	adc	r21, r1
 a72:	bb f3       	brvs	.-18     	; 0xa62 <inverse+0xe>
 a74:	91 50       	subi	r25, 0x01	; 1
 a76:	50 40       	sbci	r21, 0x00	; 0
 a78:	94 f0       	brlt	.+36     	; 0xa9e <ldexp+0x38>
 a7a:	59 f0       	breq	.+22     	; 0xa92 <ldexp+0x2c>
 a7c:	88 23       	and	r24, r24
 a7e:	32 f0       	brmi	.+12     	; 0xa8c <ldexp+0x26>
 a80:	66 0f       	add	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	91 50       	subi	r25, 0x01	; 1
 a88:	50 40       	sbci	r21, 0x00	; 0
 a8a:	c1 f7       	brne	.-16     	; 0xa7c <ldexp+0x16>
 a8c:	9e 3f       	cpi	r25, 0xFE	; 254
 a8e:	51 05       	cpc	r21, r1
 a90:	44 f7       	brge	.-48     	; 0xa62 <inverse+0xe>
 a92:	88 0f       	add	r24, r24
 a94:	91 1d       	adc	r25, r1
 a96:	96 95       	lsr	r25
 a98:	87 95       	ror	r24
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret
 a9e:	5f 3f       	cpi	r21, 0xFF	; 255
 aa0:	ac f0       	brlt	.+42     	; 0xacc <ldexp+0x66>
 aa2:	98 3e       	cpi	r25, 0xE8	; 232
 aa4:	9c f0       	brlt	.+38     	; 0xacc <ldexp+0x66>
 aa6:	bb 27       	eor	r27, r27
 aa8:	86 95       	lsr	r24
 aaa:	77 95       	ror	r23
 aac:	67 95       	ror	r22
 aae:	b7 95       	ror	r27
 ab0:	08 f4       	brcc	.+2      	; 0xab4 <ldexp+0x4e>
 ab2:	b1 60       	ori	r27, 0x01	; 1
 ab4:	93 95       	inc	r25
 ab6:	c1 f7       	brne	.-16     	; 0xaa8 <ldexp+0x42>
 ab8:	bb 0f       	add	r27, r27
 aba:	58 f7       	brcc	.-42     	; 0xa92 <ldexp+0x2c>
 abc:	11 f4       	brne	.+4      	; 0xac2 <ldexp+0x5c>
 abe:	60 ff       	sbrs	r22, 0
 ac0:	e8 cf       	rjmp	.-48     	; 0xa92 <ldexp+0x2c>
 ac2:	6f 5f       	subi	r22, 0xFF	; 255
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	e3 cf       	rjmp	.-58     	; 0xa92 <ldexp+0x2c>
 acc:	b8 ce       	rjmp	.-656    	; 0x83e <__fp_szero>
 ace:	0e f0       	brts	.+2      	; 0xad2 <ldexp+0x6c>
 ad0:	76 c0       	rjmp	.+236    	; 0xbbe <__fp_mpack>
 ad2:	70 ce       	rjmp	.-800    	; 0x7b4 <__fp_nan>
 ad4:	68 94       	set
 ad6:	68 ce       	rjmp	.-816    	; 0x7a8 <__fp_inf>

00000ad8 <log>:
 ad8:	97 de       	rcall	.-722    	; 0x808 <__fp_splitA>
 ada:	c8 f3       	brcs	.-14     	; 0xace <ldexp+0x68>
 adc:	99 23       	and	r25, r25
 ade:	d1 f3       	breq	.-12     	; 0xad4 <ldexp+0x6e>
 ae0:	c6 f3       	brts	.-16     	; 0xad2 <ldexp+0x6c>
 ae2:	df 93       	push	r29
 ae4:	cf 93       	push	r28
 ae6:	1f 93       	push	r17
 ae8:	0f 93       	push	r16
 aea:	ff 92       	push	r15
 aec:	c9 2f       	mov	r28, r25
 aee:	dd 27       	eor	r29, r29
 af0:	88 23       	and	r24, r24
 af2:	2a f0       	brmi	.+10     	; 0xafe <log+0x26>
 af4:	21 97       	sbiw	r28, 0x01	; 1
 af6:	66 0f       	add	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	da f7       	brpl	.-10     	; 0xaf4 <log+0x1c>
 afe:	20 e0       	ldi	r18, 0x00	; 0
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	40 e8       	ldi	r20, 0x80	; 128
 b04:	5f eb       	ldi	r21, 0xBF	; 191
 b06:	9f e3       	ldi	r25, 0x3F	; 63
 b08:	88 39       	cpi	r24, 0x98	; 152
 b0a:	20 f0       	brcs	.+8      	; 0xb14 <log+0x3c>
 b0c:	80 3e       	cpi	r24, 0xE0	; 224
 b0e:	30 f0       	brcs	.+12     	; 0xb1c <log+0x44>
 b10:	21 96       	adiw	r28, 0x01	; 1
 b12:	8f 77       	andi	r24, 0x7F	; 127
 b14:	0f dd       	rcall	.-1506   	; 0x534 <__addsf3>
 b16:	e4 eb       	ldi	r30, 0xB4	; 180
 b18:	f0 e0       	ldi	r31, 0x00	; 0
 b1a:	03 c0       	rjmp	.+6      	; 0xb22 <log+0x4a>
 b1c:	0b dd       	rcall	.-1514   	; 0x534 <__addsf3>
 b1e:	e1 ee       	ldi	r30, 0xE1	; 225
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	73 df       	rcall	.-282    	; 0xa0a <__fp_powser>
 b24:	8b 01       	movw	r16, r22
 b26:	be 01       	movw	r22, r28
 b28:	ec 01       	movw	r28, r24
 b2a:	fb 2e       	mov	r15, r27
 b2c:	6f 57       	subi	r22, 0x7F	; 127
 b2e:	71 09       	sbc	r23, r1
 b30:	75 95       	asr	r23
 b32:	77 1f       	adc	r23, r23
 b34:	88 0b       	sbc	r24, r24
 b36:	99 0b       	sbc	r25, r25
 b38:	fc dd       	rcall	.-1032   	; 0x732 <__floatsisf>
 b3a:	28 e1       	ldi	r18, 0x18	; 24
 b3c:	32 e7       	ldi	r19, 0x72	; 114
 b3e:	41 e3       	ldi	r20, 0x31	; 49
 b40:	5f e3       	ldi	r21, 0x3F	; 63
 b42:	8f de       	rcall	.-738    	; 0x862 <__mulsf3x>
 b44:	af 2d       	mov	r26, r15
 b46:	98 01       	movw	r18, r16
 b48:	ae 01       	movw	r20, r28
 b4a:	ff 90       	pop	r15
 b4c:	0f 91       	pop	r16
 b4e:	1f 91       	pop	r17
 b50:	cf 91       	pop	r28
 b52:	df 91       	pop	r29
 b54:	00 dd       	rcall	.-1536   	; 0x556 <__addsf3x>
 b56:	3f ce       	rjmp	.-898    	; 0x7d6 <__fp_round>

00000b58 <modf>:
 b58:	fa 01       	movw	r30, r20
 b5a:	dc 01       	movw	r26, r24
 b5c:	aa 0f       	add	r26, r26
 b5e:	bb 1f       	adc	r27, r27
 b60:	9b 01       	movw	r18, r22
 b62:	ac 01       	movw	r20, r24
 b64:	bf 57       	subi	r27, 0x7F	; 127
 b66:	28 f4       	brcc	.+10     	; 0xb72 <modf+0x1a>
 b68:	22 27       	eor	r18, r18
 b6a:	33 27       	eor	r19, r19
 b6c:	44 27       	eor	r20, r20
 b6e:	50 78       	andi	r21, 0x80	; 128
 b70:	1f c0       	rjmp	.+62     	; 0xbb0 <modf+0x58>
 b72:	b7 51       	subi	r27, 0x17	; 23
 b74:	88 f4       	brcc	.+34     	; 0xb98 <modf+0x40>
 b76:	ab 2f       	mov	r26, r27
 b78:	00 24       	eor	r0, r0
 b7a:	46 95       	lsr	r20
 b7c:	37 95       	ror	r19
 b7e:	27 95       	ror	r18
 b80:	01 1c       	adc	r0, r1
 b82:	a3 95       	inc	r26
 b84:	d2 f3       	brmi	.-12     	; 0xb7a <modf+0x22>
 b86:	00 20       	and	r0, r0
 b88:	69 f0       	breq	.+26     	; 0xba4 <modf+0x4c>
 b8a:	22 0f       	add	r18, r18
 b8c:	33 1f       	adc	r19, r19
 b8e:	44 1f       	adc	r20, r20
 b90:	b3 95       	inc	r27
 b92:	da f3       	brmi	.-10     	; 0xb8a <modf+0x32>
 b94:	0d d0       	rcall	.+26     	; 0xbb0 <modf+0x58>
 b96:	cd cc       	rjmp	.-1638   	; 0x532 <__subsf3>
 b98:	61 30       	cpi	r22, 0x01	; 1
 b9a:	71 05       	cpc	r23, r1
 b9c:	a0 e8       	ldi	r26, 0x80	; 128
 b9e:	8a 07       	cpc	r24, r26
 ba0:	b9 46       	sbci	r27, 0x69	; 105
 ba2:	30 f4       	brcc	.+12     	; 0xbb0 <modf+0x58>
 ba4:	9b 01       	movw	r18, r22
 ba6:	ac 01       	movw	r20, r24
 ba8:	66 27       	eor	r22, r22
 baa:	77 27       	eor	r23, r23
 bac:	88 27       	eor	r24, r24
 bae:	90 78       	andi	r25, 0x80	; 128
 bb0:	30 96       	adiw	r30, 0x00	; 0
 bb2:	21 f0       	breq	.+8      	; 0xbbc <modf+0x64>
 bb4:	20 83       	st	Z, r18
 bb6:	31 83       	std	Z+1, r19	; 0x01
 bb8:	42 83       	std	Z+2, r20	; 0x02
 bba:	53 83       	std	Z+3, r21	; 0x03
 bbc:	08 95       	ret

00000bbe <__fp_mpack>:
 bbe:	9f 3f       	cpi	r25, 0xFF	; 255
 bc0:	31 f0       	breq	.+12     	; 0xbce <__fp_mpack_finite+0xc>

00000bc2 <__fp_mpack_finite>:
 bc2:	91 50       	subi	r25, 0x01	; 1
 bc4:	20 f4       	brcc	.+8      	; 0xbce <__fp_mpack_finite+0xc>
 bc6:	87 95       	ror	r24
 bc8:	77 95       	ror	r23
 bca:	67 95       	ror	r22
 bcc:	b7 95       	ror	r27
 bce:	88 0f       	add	r24, r24
 bd0:	91 1d       	adc	r25, r1
 bd2:	96 95       	lsr	r25
 bd4:	87 95       	ror	r24
 bd6:	97 f9       	bld	r25, 7
 bd8:	08 95       	ret

00000bda <__divmodhi4>:
 bda:	97 fb       	bst	r25, 7
 bdc:	07 2e       	mov	r0, r23
 bde:	16 f4       	brtc	.+4      	; 0xbe4 <__divmodhi4+0xa>
 be0:	00 94       	com	r0
 be2:	06 d0       	rcall	.+12     	; 0xbf0 <__divmodhi4_neg1>
 be4:	77 fd       	sbrc	r23, 7
 be6:	08 d0       	rcall	.+16     	; 0xbf8 <__divmodhi4_neg2>
 be8:	0b d0       	rcall	.+22     	; 0xc00 <__udivmodhi4>
 bea:	07 fc       	sbrc	r0, 7
 bec:	05 d0       	rcall	.+10     	; 0xbf8 <__divmodhi4_neg2>
 bee:	3e f4       	brtc	.+14     	; 0xbfe <__divmodhi4_exit>

00000bf0 <__divmodhi4_neg1>:
 bf0:	90 95       	com	r25
 bf2:	81 95       	neg	r24
 bf4:	9f 4f       	sbci	r25, 0xFF	; 255
 bf6:	08 95       	ret

00000bf8 <__divmodhi4_neg2>:
 bf8:	70 95       	com	r23
 bfa:	61 95       	neg	r22
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255

00000bfe <__divmodhi4_exit>:
 bfe:	08 95       	ret

00000c00 <__udivmodhi4>:
 c00:	aa 1b       	sub	r26, r26
 c02:	bb 1b       	sub	r27, r27
 c04:	51 e1       	ldi	r21, 0x11	; 17
 c06:	07 c0       	rjmp	.+14     	; 0xc16 <__udivmodhi4_ep>

00000c08 <__udivmodhi4_loop>:
 c08:	aa 1f       	adc	r26, r26
 c0a:	bb 1f       	adc	r27, r27
 c0c:	a6 17       	cp	r26, r22
 c0e:	b7 07       	cpc	r27, r23
 c10:	10 f0       	brcs	.+4      	; 0xc16 <__udivmodhi4_ep>
 c12:	a6 1b       	sub	r26, r22
 c14:	b7 0b       	sbc	r27, r23

00000c16 <__udivmodhi4_ep>:
 c16:	88 1f       	adc	r24, r24
 c18:	99 1f       	adc	r25, r25
 c1a:	5a 95       	dec	r21
 c1c:	a9 f7       	brne	.-22     	; 0xc08 <__udivmodhi4_loop>
 c1e:	80 95       	com	r24
 c20:	90 95       	com	r25
 c22:	bc 01       	movw	r22, r24
 c24:	cd 01       	movw	r24, r26
 c26:	08 95       	ret

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>
